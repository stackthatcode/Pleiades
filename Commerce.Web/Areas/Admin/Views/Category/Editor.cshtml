@using Commerce.Web.Areas.Admin
@using Pleiades.Web.MvcHelpers

@section _Scripts {
    @Scripts.Render("~/Content/JQuery/jquery.animate-colors-min.js")

	<script type="text/javascript">
        function CategoryService() {
            var self = new PushLibrary.Ajax();

            self.RetrieveAllSections = function (callback) {
                self.AjaxGet("/Admin/Category/Sections", callback);
            };

	        self.RetrieveAllCategoriesBySection = function (sectionId, callback) {
	            self.AjaxGet("/Admin/Category/CategoriesBySection/" + sectionId, callback);
	        };

	        self.RetrieveById = function (id, callback) {
	            self.AjaxGet("/Admin/Category/Category/" + id, callback);
	        };

	        self.Save = function (category, callback) {
	            if (category.Id == null) {
	                self.AjaxPost("/Admin/Category/Insert", category, callback);
	            } else {
	                self.AjaxPost("/Admin/Category/Update", category, callback);
	            }
	        };

	        self.Delete = function (id, callback) {
	            self.AjaxPost("/Admin/Category/Delete/" + id, {}, callback);
	        };

	        self.SwapParentChild = function (parent, child, callback) {
	            self.AjaxPost("/Admin/Category/SwapParentChild/" + parent.Id + "/" + child.Id, {}, callback);
	        };

	        return self;
        }

		function CategoryViewModel(serviceAdapter) {	
			var self = this;
			
			// KO enabling/disabling of server JSON
		    self.KnockoutIfyCategory = function(category) {
		        var output = {
		            Id: ko.observable(category.Id),
		            ParentId: ko.observable(category.ParentId),
		            Name: ko.observable(category.Name),
		            SEO: ko.observable(category.SEO),
		            Categories: ko.observableArray(),
		        };
		        if (category.Categories) {
		            $.each(category.Categories, function(index, element) {
		                output.Categories.push(self.KnockoutIfyCategory(element));
		            });
		        }
		        return output;
		    };
			
			self.CategoryToServerJson = function(category) {
				return {
					Id: category.Id(),
					ParentId: category.ParentId(),
					Name: category.Name(),
					SEO: category.SEO(),
				};
			};
			
			// UI state management
		    self.ExpandToggle = function(record) {
		        var current = self.ParentViewModel.ExpandData.get(record.Id)();
		        self.ParentViewModel.ExpandData.set(record.Id, !current);
		    };

		    self.IsRootCategoryForChildView = function(categoryId) {
		        return categoryId == self.ChildViewModel().Id();
		    };

		    self.IsSectionForChildView = function(sectionId) {
		        return sectionId == self.ChildViewModel().ParentId()
		    };

		    self.SectionClick = function(record, event) {
		        self.RetrieveModelBySection(record, null);
		    };

		    self.EditRecord = function(record) {
		        self.ClearUnsavedCategoryFromModel();
		        record.EditName = ko.observable(record.Name());
		        record.EditSEO = ko.observable(record.SEO());
		        self.ChildViewSelectedRecord(record);
		    };

		    self.AddParentRecord = function() {
		        flow.exec(
		            function() {
		                var parentId = self.ParentViewModel.SelectedSection().Id;
		                var newCategory = { Id: null, ParentId: parentId, Name: "", SEO: "", Categories: null };
		                var knockedoutData = self.KnockoutIfyCategory(newCategory);
		                self.ChildViewModel(knockedoutData);
		                self.Glider.GlideToChild(this);
		            },
		            function() {
		                self.EditRecord(self.ChildViewModel()); // The ChildViewModel is the root of that category
		            }
		        );
		    };

		    self.AddChildRecord = function() {
		        var newCategory = self.KnockoutIfyCategory(
		            { Id: null, ParentId: self.ChildViewModel().Id(), Name: "", SEO: "", Categories: null });

		        self.ChildViewModel().Categories.unshift(newCategory);
		        self.EditRecord(newCategory);
		        window.scrollTo(0, 0);
		    };

		    self.CancelEdit = function(record) {
		        self.ClearUnsavedCategoryFromModel();
		        self.ChildViewSelectedRecord(null);
		    };

		    self.ClearUnsavedCategoryFromModel = function() {
		        if (self.ChildViewSelectedRecord() && self.ChildViewSelectedRecord().Id() === null) {
		            self.ChildViewModel().Categories.remove(self.ChildViewSelectedRecord());
		        }
		    };
			

		    // asynchronous, service-bound operations
		    self.SelectSectionFromChildView = function(record) {
		        self.Glider.GlideToParent(function() {
		            self.ChildViewModel(null);
		            self.ChildViewSelectedRecord(null);
		            self.RetrieveModelBySection(record);
		        });
		    };

		    self.GlideToChildView = function(parentRecord) {
		        flow.exec(
		            function() {
		                self.ServiceAdapter.RetrieveById(parentRecord.Id, this);
		            },
		            function(parentRecord) {
		                var knockedoutData = self.KnockoutIfyCategory(parentRecord);
		                self.ChildViewModel(knockedoutData);
		                self.Glider.GlideToChild();
		            }
		        );
		    };

		    self.GlideToParentView = function() {
		        var parentRecordId = self.ChildViewModel().Id();
		        flow.exec(
		            function() {
		                $("#glideToParent").hide();
		                self.RetrieveModelBySection(self.ParentViewModel.SelectedSection(), this);
		            },
		            function() {
		                // animate back
		                //self.Glider.GlideToParent(this);
		                self.TrackToIdIfNotNull(parentRecordId);
		            },
		            function() {
		            }
		        );
		    };

		    self.RetrieveSections = function(callback) {
		        flow.exec(
		            function() {
		                self.ServiceAdapter.RetrieveAllSections(this);
		            },
		            function(sections) {
		                self.ParentViewModel.Sections(sections);
		                self.RetrieveModelBySection(self.ParentViewModel.Sections()[0], this);
		            },
		            function() {
		                if (callback) {
		                    callback();
		                }
		            }
		        );
		    };

		    self.RetrieveModelBySection = function(section, callback) {
		        flow.exec(
		            function() {
		                if (self.ChildViewModel()) {
		                    self.Glider.GlideToParent(this);
		                } else {
		                    this();
		                }
		            },
		            function() {
		                self.ChildViewSelectedRecord(null); // Clear out the ChildView state
		                self.ChildViewModel(null);
		                self.ServiceAdapter.RetrieveAllCategoriesBySection(section.Id, this);
		            },
		            function(data) {
		                // select the section
		                self.ParentViewModel.SelectedSection(section);

		                // expand - Add expand state to our observable dictionary if it's not *yet* Added
		                $.each(data, function(index, elem) {
		                    if (!self.ParentViewModel.ExpandData.get(elem.Id)()) {
		                        self.ParentViewModel.ExpandData.set(elem.Id, false);
		                    }

		                    elem.Expanded = ko.computed(function() {
		                        return self.ParentViewModel.ExpandData.get(elem.Id)();
		                    });
		                });

		                self.ParentViewModel.Data(data);
		                if (callback) {
		                    callback();
		                }
		            }
		        );
		    };

		    self.SaveRecord = function() {
		        flow.exec(
		            function() {
		                var record = self.ChildViewSelectedRecord();
		                if ($.trim(record.EditName()) == "" || $.trim(record.EditSEO()) == "") {
		                    $("#validation").show();
		                    return;
		                }
		                record.Name(record.EditName());
		                record.SEO(record.EditSEO());

		                self.ServiceAdapter.Save(self.CategoryToServerJson(record), this);
		            },
		            function(data) {
		                self.ChildViewSelectedRecord().Id(data.Id);
		                self.ChildViewSelectedRecord(null);
		            }
		        );
		    };

		    self.SwapParentChild = function() {
		        var oldParent = self.CategoryToServerJson(self.ChildViewModel());
		        var newParent = self.CategoryToServerJson(self.ChildViewSelectedRecord());

		        flow.exec(
		            function() {
		                self.ServiceAdapter.SwapParentChild(oldParent, newParent, this);
		            },
		            function() {
		                self.RetrieveModelBySection(self.ParentViewModel.SelectedSection(), this);
		                self.ServiceAdapter.RetrieveById(newParent.Id, this);
		            },
		            function(refreshedChildData) {
		                self.ChildViewModel(self.KnockoutIfyCategory(refreshedChildData));
		                self.TrackToIdIfNotNull(newParent.Id);
		                self.HighlightByTrackerId(newParent.Id);
		            }
		        );
		    };

		    self.ChangeParent = function(parentRecord) {
		        var newParentRecordId = parentRecord.Id;
		        var selectedRecordId = self.ChildViewSelectedRecord().Id();
		        flow.exec(
		            function() {
		                self.ChildViewSelectedRecord().ParentId(newParentRecordId);
		                self.ServiceAdapter.Save(self.CategoryToServerJson(self.ChildViewSelectedRecord()), this);
		            },
		            function() {
		                self.Glider.GlideToParent(this);
		            },
		            function() {
		                var isTopLevelCategory = parentRecord.ParentId == null;
		                if (isTopLevelCategory) {
		                    self.ParentViewModel.SelectedSection(parentRecord);
		                    self.ServiceAdapter.RetrieveById(selectedRecordId, this);
		                } else {
		                    self.ServiceAdapter.RetrieveById(newParentRecordId, this);
		                }
		            },
		            function(updatedParentRecord) {
		                var knockedoutData = self.KnockoutIfyCategory(updatedParentRecord);
		                self.ChildViewModel(knockedoutData);
		                self.Glider.GlideToChild(this);
		            },
		            function() {
		                self.TrackToIdIfNotNull(selectedRecordId);
		                self.HighlightByTrackerId(selectedRecordId);
		            }
		        );
		    };

		    self.Delete = function() {
		        var record = self.ChildViewSelectedRecord();
		        if (self.IsRootCategoryForChildView(record.Id())) {
		            self.ModalViewModel("Delete");
		            $('#modal-delete').modal();
		            return;
		        }

		        flow.exec(
		            function() {
		                self.ServiceAdapter.Delete(record.Id(), this);
		            },
		            function() {
		                self.ServiceAdapter.RetrieveById(self.ChildViewModel().Id(), this);
		            },
		            function(parentRecord) {
		                self.ChildViewModel(self.KnockoutIfyCategory(parentRecord));
		            }
		        );
		    };

		    self.DeleteConfirm = function() {
		        $('#modal-delete').modal('hide');
		        flow.exec(
		            function() {
		                var record = self.ChildViewSelectedRecord();
		                self.ServiceAdapter.Delete(record.Id(), this);
		            },
		            function() {
		                self.RetrieveModelBySection(self.ParentViewModel.SelectedSection(), this);
		            },
		            function() {
		                self.ChildViewModel(null);
		                self.ChildViewSelectedRecord(null);
		            }
		        );
		    };
			
            // Scroll Tracking
		    self.TrackToIdIfNotNull = function(id) {
		        if (!id) return;
		        var offset = $('#tracker' + id).parent().offset().top - $("#gliding-container").offset().top;
		        $("body").scrollTop(offset);
		    };

		    self.HighlightByTrackerId = function(id) {
		        var set = $('#tracker' + id).closest("td");
		        set.animate({ backgroundColor: "#AAA" }, { duration: 1000 });
		        set.animate(
		            { backgroundColor: "#FFF" },
		            {
		                duration: 1000,
		                complete: function() { set.css({ backgroundColor: "" }); }
		            });
		    };


			// Initialization
			self.ServiceAdapter = serviceAdapter;
            self.Glider = new PushLibrary.GliderWidget("#gliding-container", "#parent-editor", "#child-editor");
			
			// load ko.observables into view model				
			self.ParentViewModel = { 
				Data: ko.observableArray(), 
				ExpandData: ko.observableDictionary(), 
				Sections: ko.observableArray(), 
				SelectedSection: ko.observable(),
			};			
			self.ChildViewModel = ko.observable(null); 
			self.ChildViewSelectedRecord = ko.observable(null);
			self.ModalViewModel = ko.observable(null);
				
			// load the Sections
			self.RetrieveSections();
		}
		
		$(function() {
            var serviceAdapter = new CategoryService();
            var model = new CategoryViewModel(serviceAdapter);
			ko.applyBindings(model);
		});
	</script>
}	

@section _Templates {
	<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE -->
	<script type="text/html" id="Top-Workspace">
		<!-- PARENT VIEW HEADER -->
		<div id="heading" class="container" data-bind="ifnot: $root.ChildViewModel()">
			<div class="row" data-bind="if: $root.ParentViewModel.SelectedSection()">
				<div class="span9">
					<h1><span data-bind="text: $root.ParentViewModel.SelectedSection().Name"></span> &gt; All Categories</h1>
				</div>
				<div class="span3" style="margin-top:15px; text-align:right;">
					<a class="btn btn-primary btn-block" data-bind="click: $root.AddParentRecord">Add New Category <i class="icon-arrow-right icon-white"></i></a>
				</div>
				
				<!-- SECTION DROP DOWN -->
				<div class="span9" data-bind="template: { name: 'Section-Navigator' }">
				</div>
			</div>
		</div>
		
		<!-- CHILD VIEW HEADER -->
		<div id="heading" class="container" data-bind="if: $root.ChildViewModel()">
			<div class="row" data-bind="if: $root.ParentViewModel.SelectedSection()" style="position:relative;">
				<div class="span9">
					<h1><span data-bind="text:$root.ParentViewModel.SelectedSection().Name"></span> &gt; <span data-bind="text: $root.ChildViewModel().Name"></span></h1>
				</div>
				<div class="span3" style="margin-top:15px; text-align:right;" data-bind="visible: $root.ChildViewModel().Id">
					<a class="btn btn-primary btn-block" data-bind="click: $root.AddChildRecord"><i class="icon-plus icon-white"></i> Add Sub-Category</a>
				</div>
				
				<!-- SECTION DROP DOWN -->
				<div class="span9" data-bind="template: { name: 'Section-Navigator' }" style="height:44px;">
				</div>
			</div>
		</div>
	</script>
	
	<!-- KNOCKOUT TEMPLATE - SECTION NAVIGATOR -->
	<script type="text/html" id="Section-Navigator">
		<ul class="nav nav-pills" style="">
            <li style="width:150px;" data-bind="if: $root.ChildViewModel()">
				<a id="glideToParent" class="backbutton" data-bind="click: $root.GlideToParentView">&laquo; Back to Section</a>
                &nbsp;
            </li>
                 
			<li class="dropdown">
			<a class="dropdown-toggle" id="drop5" role="button" data-toggle="dropdown" href="#">Go to Different Section... <b class="caret"></b></a>
				
			<ul id="menu3" class="dropdown-menu" role="menu" aria-labelledby="drop5">
				<!-- ko foreach: $root.ParentViewModel.Sections() -->
					<li data-bind="ifnot: $data == $root.ParentViewModel.SelectedSection()">
						<a tabindex="-1" href="#" data-bind="text: $data.Name, click: $root.SectionClick"></a>
					</li>
					<li data-bind="if: $data == $root.ParentViewModel.SelectedSection()">
						<a href="#"><span data-bind="text: $data.Name" href="#"></span> <i class="icon-ok icon-black"></i></a>
					</li>
                <!-- /ko -->
					
				<li class="divider"></li>
				<li><a tabindex="-1" href="@Url.RouteUrl(AdminNavigation.SectionEditor())">Edit Sections...</a></li>
			</ul>
			</li>
		</ul>
	</script>
	
	<!-- KNOCKOUT TEMPLATE - PARENT EDITOR -->
	<script type="text/html" id="Parent-Editor">
		<div style="margin-top:40px; text-align:center;" class="alert alert-info" data-bind="visible: $data.Data().length == 0">
			<strong>This Section is empty. Click "Add New Category" to start adding Categories.</strong>  
		</div>
		
		<table id="parent-editor-table" class="table table-hover" data-bind="visible: $data.Data().length > 0">
		<tbody data-bind="foreach: $data.Data()">
			<tr>
			<td>
				<span class="span8">
					<input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					<h4 data-bind="text: $data.Name"></h4>
					
					<!-- ko if: $data.Expanded() -->
					<div data-bind="foreach: $data.Categories">
						<h4 style="padding-left:40px;">&raquo; <span data-bind="text: Name"></span></h4>
					</div>
					<!-- /ko -->
				</span>
				
				<span class="span3" style="text-align:right;">
					<a class="btn" href="#" data-bind="click: $root.ExpandToggle">
						<i class="icon-chevron-down" data-bind="visible: $data.Expanded()"></i>
						<i class="icon-chevron-up" data-bind="visible: !$data.Expanded()"></i>
					</a>
					
					<a class="btn btn-inverse" data-bind="click: $root.GlideToChildView">Edit Category<i class="icon-arrow-right icon-white"></i></a>
				</span>
			</td>
			</tr>
		</tbody>
		</table>
	</script>
	
	<!-- KNOCKOUT TEMPLATE - CHILD EDITOR -->
	<script type="text/html" id="Child-Editor">
		<table class="table table-hover" style="margin-bottom:0px;">
			<tbody data-bind="template: { name: 'Editor-Row-Template', data: $data }">
			</tbody>
		</table>
		
		<table class="table table-hover">
			<tbody data-bind="template: { name: 'Editor-Row-Template', foreach: $data.Categories }">
			</tbody>
		</table>

        <div style="margin-top:40px; text-align:center;" class="alert alert-info" data-bind="visible: $data.Id() && $data.Categories().length == 0">
			<strong>This Category has no Sub-Categories.  Click "Add New Sub Category" to start adding new ones.</strong>  
	    </div>
	</script>
	
	<!-- KNOCKOUT TEMPLATE - EDITOR ROW -->
	<script type="text/html" id="Editor-Row-Template">
		<tr data-bind="if: $root.ChildViewSelectedRecord() != $data, click: $root.EditRecord">
		<td>
			<span class="span8">	
				<input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id() }" />
				
				<div data-bind="if: $data.Id() == $root.ChildViewModel().Id()">
					<h4 data-bind="text: $data.Name()"></h4>
					<span data-bind="text: $data.SEO()"></span>
				</div>
				
				<div data-bind="if: $data.Id() != $root.ChildViewModel().Id()" style="padding-left:20px;">
					<h4 data-bind="text: '&raquo; ' + $data.Name()"></h4>
					<span data-bind="text: $data.SEO()"></span>
				</div>
			</span>				
			<span class="span3" style="text-align:right; padding-top:20px;">
				<p>Touch Row to Edit</p>
			</span>
		</td>
		</tr>
		
		<!-- EDITOR TEMPLATE -->
		<tr data-bind="if: $root.ChildViewSelectedRecord() == $data">
        <td>
			<form>
			<div id="validation" style="text-align:center; clear:both; display: none;" class="alert alert-error">
				<button type="button" class="close" data-dismiss="alert">x</button>
				<strong>Please enter a Category Name and SEO slug.</strong>  
			</div>
		
			<div>
				<!-- EDITOR FIELDS -->
				<span class="span7" style="float:left;padding-top:5px;">
					<input id="entry" class="input-large" style="float:left; width:225px; margin-right:20px;" type="text" placeholder="Enter Category Name" data-bind="value: $data.EditName" />
					<input id="entry" class="input-large" style="float:left; width:225px;" type="text" value="sport-casual-seo-tag" placeholder="Enter SEO Tag" data-bind="value: $data.EditSEO" />
				</span>
				
				<!-- BUTTONS -->
				<span class="span4" style="padding-top:5px; text-align:right;">
					<a class="btn btn-primary" href="#" data-bind="click: $root.SaveRecord"><i class="icon-ok icon-white"></i> Save</a>
					<a class="btn btn-primary" href="#" data-bind="click: $root.Delete"><i class="icon-trash icon-white"></i> Delete</a>
					<a class="btn btn-inverse" href="#" data-bind="click: $root.CancelEdit"><i class="icon-remove icon-white"></i> Cancel</a>
				</span>
			</div>					
			<div style="clear:both; height:15px;width:1px;" />
			<div>
				<span class="span9" style="float:left;">					
					<!-- CHANGE PARENT CATEGORY DROP DOWN -->					
					<div data-bind="template: { name: 'Change-Parent-Template', data: $data }">
					</div>
				</span>						
				<span class="span3">
				</span>
			</div>
			</form>
		</td>
		</tr>
	</script>
	
	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG -->
	<script type="text/html" id="Modal-Dialog">
		<div id="modal-delete" class="modal hide fade" data-bind="if: $root.ChildViewSelectedRecord()">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Delete <span data-bind="text: $root.ChildViewSelectedRecord().Name()"></span></h3>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to Delete this Category?</p>			
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteConfirm"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>		
	</script>
	
	<!-- KNOCKOUT TEMPLATE - CHANGE PARENT CATEGORY/SECTIION -->
	<script type="text/html" id="Change-Parent-Template">
		<!-- CHANGE PARENT CATEGORY DROP DOWN -->
		<div data-bind="visible: $data.Id()">
			<div data-bind="ifnot: $root.IsRootCategoryForChildView($data.Id())" class="dropdown" style="float:left;">
				<a class="btn btn-primary dropdown-toggle" data-toggle="dropdown" href="#">
					Put Under Different Parent Category...<span class="caret"></span>
				</a>
				
				<ul class="dropdown-menu" role="menu" aria-labelledby="drop1">
                    <!-- ko foreach: $root.ParentViewModel.Data -->
                    <li data-bind="if: $root.IsRootCategoryForChildView($data.Id)">
						<a href="#"><span data-bind="text: $data.Name" href="#"></span> <i class="icon-ok icon-black"></i></a>
					</li>
					<li data-bind="ifnot: $root.IsRootCategoryForChildView($data.Id)">
						<a tabindex="-1" data-bind="text: $data.Name, click: $root.ChangeParent" href="#"></a>
					</li>
					<!-- /ko -->
                    
					<li class="divider"></li>
					<li><a tabindex="-1" data-bind="click: $root.SwapParentChild" href="#">Make This the Parent Category</a></li>
				</ul>
			</div>
			
			<!-- CHANGE SECTION CATEGORY DROP DOWN -->
			<div data-bind="if: $root.IsRootCategoryForChildView($data.Id())" class="dropdown" style="float:left;">
				<a class="btn btn-primary dropdown-toggle" data-toggle="dropdown" href="#">
					Put Under Different Section...<span class="caret"></span>
				</a>
				
				<ul class="dropdown-menu" role="menu" aria-labelledby="drop1">
					<!-- ko foreach: $root.ParentViewModel.Sections -->
						<li data-bind="if: $root.IsSectionForChildView($data.Id)">
							<a href="#"><span data-bind="text: $data.Name" href="#"></span> <i class="icon-ok icon-black"></i></a>
						</li>
						<li data-bind="ifnot: $root.IsSectionForChildView($data.Id)">
							<a tabindex="-1" data-bind="text: $data.Name, click: $root.ChangeParent" href="#"></a>
						</li>
					<!-- /ko -->
				</ul>
			</div>
		</div>		
	</script>
}

@section _Body {
	
    <div class="workspace-heading-parent">
		<div class="workspace-heading" data-bind="template: { name: 'Top-Workspace', data: $root }"></div>
	</div>
	
	<div id="gliding-container" class="container">
		<div id="parent-editor" data-bind="if: $root.ParentViewModel.SelectedSection()">
			<div style="margin-bottom:200px;" data-bind="template: { name: 'Parent-Editor', data: $root.ParentViewModel }">
			</div>
		</div>
		
		<div id="child-editor" data-bind="if: $root.ChildViewModel()">
			<div style="margin-bottom:200px;" data-bind="template: { name: 'Child-Editor', data: $root.ChildViewModel() }">
			</div>
		</div>
    </div>

    <div id="modal-enclave" data-bind="template: { name: 'Modal-Dialog' }"></div>    

}
