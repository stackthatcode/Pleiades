@using Pleiades.Web.MvcHelpers

@section _Scripts {
    @Html.Javascript("/Content/JQuery/jquery-ui-1.10.0.custom.min.js")S    
    @Html.Partial("_ColorPickerShim")
    @Html.Partial("_FineUploaderShim")
	@Html.Partial("_ImageBundleViewer")

    <!-- Knockout Translation scripts -->
    <script type="text/javascript">
        function ProductService(errorCallback, showLoadingCallback, hideLoadingCallback) {
            var self = new AjaxService(errorCallback, showLoadingCallback, hideLoadingCallback);

            // Search
            self.Search = function (brandId, categoryId, searchText, callback) {
                self.AjaxGet("/Admin/Product/Search" +
            "?brandId=" + brandId + "&categoryId=" + categoryId + "&searchText=" + searchText, callback);
            };

            self.Categories = function (callback) {
                self.AjaxGet("/Admin/Product/Categories", callback);
            };

            self.Brands = function (callback) {
                self.AjaxGet("/Admin/Product/Brands", callback);
            };

            self.SizeGroups = function (callback) {
                self.AjaxGet("/Admin/Product/SizeGroups", callback);
            };



            // Info
            self.Info = function (productId, callback) {
                self.AjaxGet("/Admin/Product/Info/" + productId, callback);
            };

            self.Update = function (product, callback) {
                self.AjaxPost("/Admin/Product/Update", product, callback);
            };

            self.Delete = function (id, callback) {
                self.AjaxPost("/Admin/Product/Delete/" + id, {}, callback);
            };

            self.Save = function (product, callback) {
                self.AjaxPost("/Admin/Product/Save", product, callback);
            };



            // Sizes
            self.SizeGroups = function (callback) {
                self.AjaxGet("/Admin/Size/SizeGroups", callback);
            }

            self.AddProductSize = function (productId, sizeId, callback) {
                self.AjaxPost("/Admin/Product/AddProductSize/" + productId + "?sizeId=" + sizeId, {}, callback);
            };

            self.Sizes = function (productId, callback) {
                self.AjaxGet("/Admin/Product/Sizes/" + productId, callback);
            };

            self.DeleteProductSize = function (productId, sizeId, callback) {
                self.AjaxPost("/Admin/Product/DeleteProductSize/" + productId + "?sizeId=" + sizeId, {}, callback);
            };

            self.UpdateSizeOrder = function (productId, sortedIds, callback) {
                self.AjaxPost("/Admin/Product/UpdateSizeOrder/" + productId + "?sorted=" + sortedIds, {}, callback);
            };



            // Colors
            self.Colors = function (productId, callback) {
                self.AjaxGet("/Admin/Product/Colors/" + productId, callback);
            };

            self.ColorsList = function (callback) {
                self.AjaxGet("/Admin/Color/Colors", callback);
            };

            self.AddColorToColorList = function (color, callback) {
                self.AjaxPost("/Admin/Color/Insert", color, callback);
            };

            self.AddProductColor = function (productId, colorId, callback) {
                self.AjaxPost("/Admin/Product/AddProductColor/" + productId + "?colorId=" + colorId, {}, callback);
            };

            self.UpdateColorOrder = function (productId, sorted, callback) {
                self.AjaxPost("/Admin/Product/UpdateColorOrder/" + productId + "?sorted=" + sorted, {}, callback);
            };

            self.DeleteProductColor = function (productId, productColorId, callback) {
                self.AjaxPost("/Admin/Product/DeleteProductColor/" + productId + "?productColorId=" + productColorId, {}, callback);
            };

            self.ChangeImageColor = function (productId, productImageId, newColorId, callback) {
                self.AjaxPost(
                "/Admin/Product/ChangeImageColor/" + productId +
                    "?productImageId=" + productImageId + "&newColorId=" + newColorId, {}, callback);
            };

            self.AssignImagesToColor = function (productId, callback) {
                self.AjaxPost("/Admin/Product/AssignImagesToColor/" + productId, {}, callback);
            };

            self.UnassignImagesFromColor = function (productId, callback) {
                self.AjaxPost("/Admin/Product/UnassignImagesFromColor/" + productId, {}, callback);
            };



            // Images
            self.Images = function (productId, callback) {
                self.AjaxGet("/Admin/Product/Images/" + productId, callback);
            };

            self.AddProductImage = function (productId, image, callback) {
                self.AjaxPost("/Admin/Product/AddProductImage/" + productId, image, callback);
            };

            self.UpdateImageOrder = function (productId, sorted, callback) {
                self.AjaxPost("/Admin/Product/UpdateImageOrder/" + productId + "?sorted=" + sorted, callback);
            };

            self.CreateBitmap = function (createRequest, callback) {
                self.AjaxPost("/Admin/Product/CreateBitmap", createRequest, callback);
            };

            self.DeleteProductImage = function (productId, productImageId, callback) {
                self.AjaxPost("/Admin/Product/DeleteProductImage/" + productId + "?productImageId=" + productImageId, {}, callback);
            };



            // Inventory
            self.InventoryTotal = function (productId, callback) {
                return self.AjaxGet("/Admin/Product/" + productId + "/InventoryTotal", callback);
            };

            self.Inventory = function (productId, callback) {
                return self.AjaxGet("/Admin/Product/" + productId + "/Inventory?regenerate=true", callback);
            };

            self.UpdateInventory = function (productId, total, callback) {
                return self.AjaxPost("/Admin/Product/" + productId + "/Inventory?inventoryTotal=" + total, {}, callback);
            };

            return self;
        }
    </script>
    <script type="text/javascript">
		// KO enabling/disabling of server JSON        
        var ProductInfoToKnockout = function(product) {
			var output = {
				Id: ko.observable(product.Id),
				Name: ko.observable(product.Name || ""),
				SEO: ko.observable(product.SEO || ""),
				SkuCode: ko.observable(product.SkuCode || ""),
				Synopsis: ko.observable(product.Synopsis || ""),
                Description: ko.observable(product.Description || ""),
                BrandId: ko.observable(product.BrandId),
                BrandName: ko.observable(product.BrandName),
                CategoryId: ko.observable(product.CategoryId),
                CategoryName: ko.observable(product.CategoryName),
                UnitPrice: ko.observable(product.UnitPrice || 0),
                UnitCost: ko.observable(product.UnitCost || 0),
                AssignImagesToColors: ko.observable(product.AssignImagesToColors),             
                ImageBundleExternalId: ko.observable(product.ImageBundleExternalId),
			};
            
            // TODO: figure out how to glue this together via prototypes
            output.UnitPriceFormatted = 
                ko.computed({
                    read: function () {
                        var readValue = '$' + output.UnitPrice().toFixed(2);
                        //console.log("Reading to EditUnitPrice: " + readValue);
                        return readValue;
                    },
                    write: function (value) {
                        //console.log("Writing to EditUnitPrice: " + value);
                        // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                        value = parseFloat(value.replace(/[^\.\d]/g, ""));
                        output.UnitPrice(isNaN(value) ? 0 : value); // Write to underlying storage
                        output.UnitPrice.notifySubscribers();
                    },
                    owner: output
                });

            output.UnitCostFormatted = 
                ko.computed({
                    read: function () {
                        return '$' + output.UnitCost().toFixed(2);
                    },
                    write: function (value) {
                        // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                        value = parseFloat(value.replace(/[^\.\d]/g, ""));
                        output.UnitCost(isNaN(value) ? 0 : value); // Write to underlying storage
                        output.UnitCost.notifySubscribers();
                    },
                    owner: output
                });

            return output;
		}
        
        var ProductInfoToServerJson = function(product) {
			return {
				Id: product.Id(),
				Name: product.Name(),
                SEO: product.SEO(),
                SkuCode: product.SkuCode(),
                Synopsis: product.Synopsis(),
                Description: product.Description(),
                CategoryId: product.CategoryId(),
                BrandId: product.BrandId(),
                UnitPrice: product.UnitPrice(),
                UnitCost: product.UnitCost(),
                ImageBundleExternalId: product.ImageBundleExternalId(),
                AssignImagesToColors: product.AssignImagesToColors(),
			};
		}
	</script>    

    <!-- List Model -->
    <script type="text/javascript">
        var AddListModel = function (rootModel) {
            var self = rootModel;
            self.BrandArray = ko.observableArray();
            self.CategoryArray = ko.observableArray();
            
            self.RetrieveCategoriesList = function (callback) {
                flow.exec(
                    function () {
                        self.ProductService.Categories(this);
                    },
                    function (data) {
                        self.CategoryArray.removeAll();
                        self.CategoryArray.push({ value: null, text: "(No Category)" });

                        var addCategory = function (category, indent) {
                            self.CategoryArray.push({ value: category.Id, text: indent + category.Name });
                            $.each(category.Categories, function (index, elem) { addCategory(elem, indent + '....'); });
                        }
                        $.each(data, function (index, elem) { addCategory(elem, ''); });
                        if (callback) {
                            callback();
                        }
                    }
                );
            }

            self.RetrieveBrandsList = function (callback) {
                flow.exec(
                    function () {
                        self.ProductService.Brands(this);
                    },
                    function (data) {
                        self.BrandArray.removeAll();
                        self.BrandArray.push({ value: null, text: "(No Brand)" });

                        $.each(data, function (index, elem) {
                            self.BrandArray.push({ value: elem.Id, text: elem.Name });
                        });

                        if (callback) {
                            callback();
                        }
                    }
                );
            }

        }
    </script>
    <!-- Search View Model -->
    <script type="text/javascript">
        var AddSearchFunctions = function (rootModel) {
            var self = rootModel;

            // asynchronous, service-bound operations            
            self.EditProduct = function (product) {
                flow.exec(
					function () {
					    self.SelectedIndex = self.SearchData.indexOf(product);
					    self.ProductService.Info(product.Id, this);
					},
					function (product) {
					    var knockedoutData = ProductInfoToKnockout(product);
					    self.SelectedProduct(knockedoutData);
					    self.ParentGlider.GlideToChild(this);
					},
                    function () {
                        self.InfoTabClick();
                    }
				);
            }

            self.AddProduct = function () {
                flow.exec(
                    function () {
                        var knockedoutData = ProductInfoToKnockout({});
                        self.SelectedProduct(knockedoutData);
                        self.ParentGlider.GlideToChild(this);
                    },
                    function () {
                        self.InfoTabClick();
                    }
                );
            }

            self.SearchClick = function () {
                flow.exec(
                    function () {
                        var brandId = $("#SearchBrand").val();
                        var categoryId = $("#SearchCategory").val();
                        var searchText = $("#SearchText").val();
                        self.ProductService.Search(brandId, categoryId, searchText, this);
                    },
                    function (data) {
                        self.SearchData(data);
                    }
                );
            }

            self.InfoTabClick = function () {
                self.ActiveView({ Level: "Child", Template: "Info" });
            }

            self.GlideToSearchView = function () {
                var recordId = self.SelectedProduct().Id();
                flow.exec(
                    function () {
                        $("#glideToParent").hide();
                        if (recordId) {
                            self.ProductService.Info(recordId, this);
                        } else {
                            this();
                        }
                    },
                    function (data) {
                        if (data) {
                            var index = self.SearchData().arrayFirstIndexOf(function (x) { return x.Id == recordId; });
                            if (index == -1) {
                                self.SearchData.unshift(data);
                            } else {
                                self.SearchData.replace(self.SearchData()[index], data);
                            }
                        }
                        self.ParentGlider.GlideToParent(this);
                    },
					function () {
					    self.ActiveView({ Level: "Parent", Template: "Search" });
					    self.SelectedProduct(null);
					    self.SelectedIndex = null;
					    self.CommonUI.TrackToIdIfNotNull(recordId);
					}
				);
            }

            self.DeleteProduct = function (product) {
                self.ModalViewModel({ Template: "Modal-Dialog-Product", Data: product });
                $('#modal-delete').modal();
            }

            self.DeleteProductConfirm = function () {
                var record = self.ModalViewModel().Data;
                flow.exec(
                    function () {
                        $('#modal-delete').modal('hide');
                        self.ProductService.Delete(record.Id, this);
                    },
                    function (data) {
                        self.SearchData.remove(record); //function (item) { return item.Id == record.Id; });
                        self.ModalViewModel({ Data: null, Template: null });
                    });
            }

            self.SaveClick = function () {
                var product = self.SelectedProduct();
                var errors = [];
                errors.push({ controlGroup: "#ProductName", invalid: product.Name().trim() == "" });
                errors.push({ controlGroup: "#SkuCode", invalid: product.SkuCode().trim() == "" });
                errors.push({ controlGroup: "#SEO", invalid: product.SEO().trim() == "" });
                errors.push({ controlGroup: "#Synopsis", invalid: product.Synopsis().trim() == "" });
                errors.push({ controlGroup: "#Description", invalid: product.Description().trim() == "" });
                
                var validationMessage = $("#validation");
                validationMessage.hide();
                $.each(errors, function (index, elem) {
                    if (elem.invalid) {
                        $(elem.controlGroup).addClass("error");
                        validationMessage.show();
                    }
                    else {
                        $(elem.controlGroup).removeClass("error");
                    }
                });

                if (validationMessage.is(":visible")) {
                    return;
                }

                flow.exec(
                    function () {
                        self.ProductService.Save(ProductInfoToServerJson(product), this);
                    },
                    function (product) {
                        var knockedoutData = ProductInfoToKnockout(product);
                        self.SelectedProduct(knockedoutData);
                    }
                );
            }

            return self;
        }
    </script> 

    <!-- Root View Model -->
    <script type="text/javascript">
        var RootModel = function () {
            var self = this;

            self.ActiveView = ko.observable({ Level: "Parent", Template: "Search" });
            self.ModalViewModel = ko.observable({ Data: null, Template: null });

            self.CommonUI = new CommonUI("#gliding-container");
            self.ParentGlider = new GliderWidget("#gliding-container", "#parent-editor", "#child-editor");
            self.ChildGlider = new GliderWidget("#gliding-container", "#child-editor", "#sub-child-editor");
            self.ProductService = new ProductService(self.CommonUI.Error, self.CommonUI.ShowLoading, self.CommonUI.HideLoading);

            AddSearchFunctions(self);
            AddListModel(self);
            AddColorFunctions(self);
            AddImageFunctions(self);
            AddSizeFunctions(self);
            AddInventoryFunctions(self);

            self.RetrieveCategoriesList();
            self.RetrieveBrandsList();
            self.SearchData = ko.observableArray();

            // Move these to the Product View Model
            self.SelectedProduct = ko.observable(null);
            self.SelectedProductName = ko.computed(
                function () {
                    return self.SelectedProduct() && self.SelectedProduct().Name() && self.SelectedProduct().Name().koTrunc(50, true) || "(New Product)"
                }, this);
        }

        var rootModel;
        $(function () {
            rootModel = new RootModel();
            ko.applyBindings(rootModel);
        });
    </script>
}

@section _Templates {
    @Html.Partial("_EndlessGlider")
    @Html.Partial("_SearchAndInfo")
    @Html.Partial("_TopWorkspace")
    @Html.Partial("_Colors")
    @Html.Partial("_Sizes")
    @Html.Partial("_Images")
    @Html.Partial("_Inventory")

	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT -->
	<script type="text/html" id="Modal-Dialog-Product">
		<div id="modal-delete" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Delete <span data-bind="text: $root.ModalViewModel().Data.Name"></span></h3>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to Delete this Product?</p>			
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteProductConfirm"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>
    </script>
}

@section _Body {
    <div class="workspace-heading-parent" data-bind="template: { name: 'Top-Workspace-' + $root.ActiveView().Level }">
	</div>
    
	<div id="gliding-container" class="container" style="top:185px;">
    	<div id="parent-editor" data-bind="if: $root.ActiveView().Level == 'Parent'">
			<div style="margin-bottom:100px;" data-bind="template: { name: 'Parent-Editor-' + $root.ActiveView().Template }">
			</div>
		</div>
		<div id="child-editor" data-bind="if: $root.ActiveView().Level == 'Child'">
			<div style="margin-bottom:100px;" data-bind="template: { name: 'Child-Editor-' + $root.ActiveView().Template  }">
			</div>
		</div>
        <div id="sub-child-editor" data-bind="if: $root.ActiveView().Level == 'Sub-Child'">
			<div style="margin-bottom:100px;" data-bind="template: { name: 'Sub-Child-Editor-' + $root.ActiveView().Template }">
			</div>
		</div>
    </div>

    <div id="modal-enclave" data-bind="if: $root.ModalViewModel().Template">
        <div data-bind="template: { name: $root.ModalViewModel().Template }">
        </div>
    </div>    
}
