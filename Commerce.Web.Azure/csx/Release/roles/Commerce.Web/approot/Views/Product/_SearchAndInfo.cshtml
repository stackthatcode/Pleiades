<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE PARENT/SEARCH -->
<script type="text/html" id="Top-Workspace-Parent">
    <div class="workspace-heading" style="height:125px;">
        <div id="heading" class="container">
            <div class="row">
                <div class="span9">
                    <h1>Products > Search</h1>
                </div>
                <div class="span3" style="margin-top:15px; text-align:right;">
                    <a class="btn btn-primary btn-block" data-bind="click: $root.AddProduct">Add New Product <i class="icon-arrow-right icon-white"></i></a>
                </div>
            </div>

            <div style="height:20px;"></div>
                
            <div class="row">
                <div class="span3">
                    <select id="SearchCategory" data-bind="foreach: $data.CategoryArray">
                        <option data-bind="value: $data.value, text: $data.text"  />
                    </select>
                </div>
                <div class="span3">
                    <select id="SearchBrand" data-bind="foreach: $data.BrandArray">
                        <option data-bind="value: $data.value, text: $data.text"  />
                    </select>
                </div>
                <div class="span3">
                    <input id="SearchText" type="text" class="input-large" placeholder="Description, Name, Sku..." />
                </div>
                <div class="span3">
                    <a class="btn btn-inverse btn-block" data-bind="click: $data.SearchClick">Search <i class="icon-search icon-white"></i></a>
                </div>
            </div>
        </div>
    </div>
</script>

<!-- KNOCKOUT TEMPLATE - MAIN EDITOR PARENT/SEARCH) -->
<script type="text/html" id="Main-Editor-Search">
    <div style="width:100%; height:20px;"></div>

    <div style="margin-top:20px; text-align:center;" class="alert alert-info" data-bind="visible: $root.SearchData().length == 0">
        <strong>There are no Products in your current search.  Click "Search" to run a search or click "Add New Product" to create a new one.</strong>  
    </div>
		
    <table id="parent-editor-table" class="table table-hover" data-bind="visible: $root.SearchData().length > 0">
        <tbody data-bind="foreach: $root.SearchData()">
            <tr>
                <td>
                    <div style="width:150px; float:left;">
                        <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ImageBundleExternalId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
                        </div>
                    </div>
                    <div style="width:550px; float:left;">
                        <input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
                        <p>
                            <h4 data-bind="text: $data.Name" style="margin-bottom:5px;"></h4>
                            <span data-bind="text: 'Sku: ' + $data.SkuCode"></span><br />
                            <div data-bind="if:$data.BrandName">
                                <span data-bind="text: 'Brand: ' + $data.BrandName"></span><br />
                            </div>
                            <span data-bind="text: 'Price: ' + ToMoney($data.UnitPrice)"></span>
                        </p>
                    </div>
                    <div style="width:200px; float:left; padding-top:40px; text-align:right;">
                        <a class="btn btn-primary" style="width:70px;" href="#" data-bind="click: function() { $parent.DeleteProduct($data) }"><i class="icon-trash icon-white"></i> Delete</a>
                        <a class="btn btn-inverse" style="width:70px;" data-bind="click: $parent.EditProduct">Edit <i class="icon-arrow-right icon-white"></i></a>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>
    
     <div style="width:100%; height:100px;"></div>
</script>

<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE INFO ET AL. aka the beastly tab management area.  Take heed! -->
<script type="text/html" id="Top-Workspace-Child">
<div class="workspace-heading" style="height:125px;">
    <div id="heading" class="container" data-bind="if: $root.SelectedProduct()">
        <div class="row" style="position:relative;">				
            <div class="span12">
                <h1>Products &gt; <span data-bind="text: $root.SelectedProductName"></span></h1>
            </div>
        </div>
                
        <div style="height:20px;"></div>
                
        <div class="row">
            <div class="span7" style="height:48px;">
                <ul class="nav nav-pills">
                    <li style="width:140px;">
                        <a id="glideToParent" class="backbutton" data-bind="click: $root.GlideToSearchView">&laquo; Back to Search</a>
                        &nbsp;
                    </li>

                    <li data-bind="if: $root.GetActiveMainEditor() == 'Info'" class="active">
                        <a href="#">Info</a>
                    </li>
                    <li data-bind="if: $root.GetActiveMainEditor() != 'Info'">
                        <a href="#" data-bind="click: $root.InfoTabClick">Info</a>
                    </li>

                    <!-- ko if: $root.SelectedProduct().Id() -->
                    <li data-bind="if: $root.GetActiveMainEditor() == 'Colors'" class="active">
                        <a href="#">Colors</a>
                    </li>
                    <li data-bind="if: $root.GetActiveMainEditor() != 'Colors'">
                        <a href="#" data-bind="click: $root.ColorsTabClick">Colors</a>
                    </li>

                    <li data-bind="if: $root.GetActiveMainEditor() == 'Images'" class="active">
                        <a href="#">Images</a>
                    </li>
                    <li data-bind="if: $root.GetActiveMainEditor() != 'Images'">
                        <a href="#" data-bind="click: $root.ImagesTabClick">Images</a>
                    </li>
                                                        
                    <li data-bind="if: $root.GetActiveMainEditor() == 'Sizes'" class="active">
                        <a href="#">Sizes</a>
                    </li>
                    <li data-bind="if: $root.GetActiveMainEditor() != 'Sizes'">
                        <a href="#" data-bind="click: $root.SizesTabClick">Sizes</a>
                    </li>

                    <li data-bind="if: $root.GetActiveMainEditor() == 'Inventory'" class="active">
                        <a href="#">Inventory</a>
                    </li>
                    <li data-bind="if: $root.GetActiveMainEditor() != 'Inventory'">
                        <a href="#" data-bind="click: $root.InventoryTabClick">Inventory</a>
                    </li>
                    <!-- /ko -->
                </ul>
            </div>

            <div class="span5" style="text-align:right;" data-bind="if: $root.GetActiveMainEditor() == 'Info'">
                <a class="btn btn-inverse" href="#" data-bind="click: $root.GlideToSearchView"><i class="icon-remove icon-white"></i> Cancel</a>                    
                <a class="btn btn-primary" href="#" data-bind="click: $root.SaveClick"><i class="icon-ok icon-white"></i> Save</a>
            </div>

            <div class="span5" style="text-align:right;" data-bind="if: $root.GetActiveMainEditor() == 'Colors'">
                <a class="btn btn-primary" href="#" data-bind="click: $root.SlideToColorList"><i class="icon-white icon-search"></i> Add Color from Lists</a>
                <a class="btn btn-primary" href="#" data-bind="click: $root.SlideToCreateNewColor"><i class="icon-white icon-pencil"></i> Create New Color</a>
            </div>

            <div class="span5" style="text-align:right;" data-bind="if: $root.GetActiveMainEditor() == 'Images'">				        
                <!-- ko ifnot: $root.SelectedProduct().AssignImagesToColors() -->
                <a class="btn btn-primary" href="#" data-bind="click: $root.AddNewImage"><i class="icon-plus icon-white"></i> Add Image</a>
                <a class="btn btn-primary" href="#" data-bind="click: $root.AssignImagesToColorClick"><i class="icon-white icon-share"></i> Assign Images To Colors</a>
                <!-- /ko -->

                <!-- ko if: $root.SelectedProduct().AssignImagesToColors() -->
                <a class="btn btn-primary" href="#" data-bind="click: $root.UnassignImagesFromColorClick"><i class="icon-white icon-ban-circle"></i> Don't Assign Images To Colors</a>
                <!-- /ko -->
            </div>
                    
            <div class="span5" style="text-align:right;" data-bind="if: $root.GetActiveMainEditor() == 'Sizes'">
                <a class="btn btn-primary" href="#" data-bind="click: $root.AddSizeFromList"><i class="icon-white icon-search"></i> Add Size from Lists</a>
            </div>
        </div>
    </div>
</div>
</script>

<!-- KNOCKOUT TEMPLATE - CHILD EDITOR INFO TAB -->
<script type="text/html" id="Main-Editor-Info">
    <div style="margin-top:40px;" data-bind="with: $root.SelectedProduct()">
    <form>
		<div id="validation" style="text-align:center; clear:both; display:none;" class="alert alert-error">
            <strong>Please enter all the required fields.</strong>
		</div>

        <div class="row">
            <div class="span6">
                <div class="row">
                    <div id="ProductName" class="span6 control-group">
                        <label>Product Name<br /><input class="input-large" style="width:440px;" type="text" placeholder="Enter Product Name" data-bind="value: $data.Name" maxlength="50" />
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div id="SkuCode" class="span3 control-group">
                        <label>SKU Code<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Sku Code" data-bind="value: $data.SkuCode" maxlength="10" />
				        </label>
                    </div>
                    <div id="SEO" class="span3 control-group">
                        <label>SEO<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter SEO Tag" data-bind="value: $data.SEO" maxlength="50" />
				        </label>
                    </div>
                </div>

                <div class="row">
                    <div id="Synopsis" class="span6 control-group">
                        <label>Synopsis (short desc.)<br/>
                            <textarea id="entry" type="text" class="input-large" style="width:440px;" rows="2" 
                                placeholder="Enter Synopsis" data-bind="value: $data.Synopsis" maxlength="200" />
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div id="Description" class="span6 control-group">
                        <label>Description<br/>
                            <textarea id="entry" type="text" class="input-large" style="width:440px;" rows="6" 
                                placeholder="Enter Description" data-bind="value: $data.Description" maxlength="500" />
                        </label>
                    </div>
                </div>
            </div>

            <div class="span3">
                <div class="row">
                    <div class="span3 control-group">
                        <label>Unit Price<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Unit Price" data-bind="value: $data.UnitPriceFormatted" maxlength="12" />
				        </label>
                    </div>
                </div>
                <div class="row">
                    <div class="span3 control-group">
                        <label>Unit Cost<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Unit Cost" data-bind="value: $data.UnitCostFormatted" maxlength="12" />
				        </label>
                    </div>
                </div>
                <div class="row">
				    <div id="Brand" class="span3 control-group">
                        <label>Brand<br />
                            <select id="SelectedBrand" data-bind="options: $root.BrandArray, optionsText: 'text', optionsValue:'value', value: $data.BrandId" />
                        </label>
                    </div>
                </div>
                <div class="row">
                    <div id="Category" class="span3 control-group">
                        <label>Category<br />
                            <select id="SelectedCategory" data-bind="options: $root.CategoryArray, optionsText: 'text', optionsValue:'value', value: $data.CategoryId" />
                        </label>
                    </div>
                </div>
            </div>
        </div>            
    </form>
    </div>
</script>    
    
<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT -->
<script type="text/html" id="Modal-Dialog-Product">
	<div id="modal-delete" class="modal hide fade">
		<div class="modal-header">
			<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
			<h3>Delete <span data-bind="text: $root.ModalViewModel().Data.Name"></span></h3>
		</div>
		<div class="modal-body">
			<p>Are you sure you want to Delete this Product?</p>			
		</div>
		<div class="modal-footer">
			<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
			<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteProductConfirm"><i class="icon-ok icon-white"></i> Ok</a>
		</div>
	</div>
</script>

<!-- Knockout functions for Product Info -->
<script type="text/javascript">
	// KO enabling/disabling of server JSON        
    var ProductInfoToKnockout = function(product) {
        var output = {
            Id: ko.observable(product.Id),
            Name: ko.observable(product.Name || ""),
            SEO: ko.observable(product.SEO || ""),
            SkuCode: ko.observable(product.SkuCode || ""),
            Synopsis: ko.observable(product.Synopsis || ""),
            Description: ko.observable(product.Description || ""),
            BrandId: ko.observable(product.BrandId),
            BrandName: ko.observable(product.BrandName),
            CategoryId: ko.observable(product.CategoryId),
            CategoryName: ko.observable(product.CategoryName),
            UnitPrice: ko.observable(product.UnitPrice || 0),
            UnitCost: ko.observable(product.UnitCost || 0),
            AssignImagesToColors: ko.observable(product.AssignImagesToColors),
            ImageBundleExternalId: ko.observable(product.ImageBundleExternalId),
        };

        // TODO: figure out how to glue this together via prototypes
        output.UnitPriceFormatted =
            ko.computed({
                read: function() {
                    var readValue = '$' + output.UnitPrice().toFixed(2);
                    //console.log("Reading to EditUnitPrice: " + readValue);
                    return readValue;
                },
                write: function(value) {
                    //console.log("Writing to EditUnitPrice: " + value);
                    // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                    value = parseFloat(value.replace(/[^\.\d]/g, ""));
                    output.UnitPrice(isNaN(value) ? 0 : value); // Write to underlying storage
                    output.UnitPrice.notifySubscribers();
                },
                owner: output
            });

        output.UnitCostFormatted =
            ko.computed({
                read: function() {
                    return '$' + output.UnitCost().toFixed(2);
                },
                write: function(value) {
                    // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                    value = parseFloat(value.replace(/[^\.\d]/g, ""));
                    output.UnitCost(isNaN(value) ? 0 : value); // Write to underlying storage
                    output.UnitCost.notifySubscribers();
                },
                owner: output
            });

        return output;
    };

    var ProductInfoToServerJson = function(product) {
        return {
            Id: product.Id(),
            Name: product.Name(),
            SEO: product.SEO(),
            SkuCode: product.SkuCode(),
            Synopsis: product.Synopsis(),
            Description: product.Description(),
            CategoryId: product.CategoryId(),
            BrandId: product.BrandId(),
            UnitPrice: product.UnitPrice(),
            UnitCost: product.UnitCost(),
            ImageBundleExternalId: product.ImageBundleExternalId(),
            AssignImagesToColors: product.AssignImagesToColors(),
        };
    };
</script>

<!-- Search & Info View Model functions -->
<script type="text/javascript">
    var PushMkt = namespace("PushMkt");

    PushMkt.AddSearchFunctions = function (rootModel) {
        var self = rootModel;

        self.BrandArray = ko.observableArray();
        self.CategoryArray = ko.observableArray();
        self.SearchData = ko.observableArray();
        self.SelectedProduct = ko.observable(null);
        self.SelectedProductName = ko.computed(
            function () {
                return self.SelectedProduct() && self.SelectedProduct().Name() && self.SelectedProduct().Name().koTrunc(38, true) || "(New Product)";
            }, this);


        self.RetrieveCategoriesList = function (callback) {
            flow.exec(
                function () {
                    self.ProductService.Categories(this);
                },
                function (data) {
                    self.CategoryArray.removeAll();
                    self.CategoryArray.push({ value: null, text: "(No Category)" });

                    var addCategory = function (category, indent) {
                        self.CategoryArray.push({ value: category.Id, text: indent + category.Name });
                        $.each(category.Categories, function (index, elem) { addCategory(elem, indent + '....'); });
                    };
                    $.each(data, function (index, elem) { addCategory(elem, ''); });
                    if (callback) {
                        callback();
                    }
                }
            );
        };

        self.RetrieveBrandsList = function (callback) {
            flow.exec(
                function () {
                    self.ProductService.Brands(this);
                },
                function (data) {
                    self.BrandArray.removeAll();
                    self.BrandArray.push({ value: null, text: "(No Brand)" });

                    $.each(data, function (index, elem) {
                        self.BrandArray.push({ value: elem.Id, text: elem.Name });
                    });

                    if (callback) {
                        callback();
                    }
                }
            );
        };

        // asynchronous, service-bound operations            
        self.EditProduct = function (product) {
            flow.exec(
                function () {
                    self.SelectedIndex = self.SearchData.indexOf(product);
                    self.ProductService.Info(product.Id, this);
                },
                function (product) {
                    var knockedoutData = ProductInfoToKnockout(product);
                    self.SelectedProduct(knockedoutData);
                    self.GlideRight("Child", "Info", this);
                },
                function () {
                    self.InfoTabClick();
                }
            );
        };

        self.SearchClick = function () {
            flow.exec(
                function () {
                    var brandId = $("#SearchBrand").val();
                    var categoryId = $("#SearchCategory").val();
                    var searchText = $("#SearchText").val();
                    self.ProductService.Search(brandId, categoryId, searchText, this);
                },
                function (data) {
                    self.SearchData(data);
                }
            );
        };

        self.AddProduct = function () {
            flow.exec(
                function () {
                    var knockedoutData = ProductInfoToKnockout({});
                    self.SelectedProduct(knockedoutData);
                    self.GlideRight("Child", "Info", this);
                },
                function () {
                    self.InfoTabClick();
                }
            );
        };
    };

    PushMkt.AddInfoFunctions = function(rootModel) {
        var self = rootModel;

        self.InfoTabClick = function() {
            self.SetActiveMainEditor("Info");
        };

        self.GlideToSearchView = function() {
            var recordId = self.SelectedProduct().Id();
            flow.exec(
                function() {
                    $("#glideToParent").hide();
                    if (recordId) {
                        self.ProductService.Info(recordId, this);
                    } else {
                        this();
                    }
                },
                function(data) {
                    if (data) {
                        var index = self.SearchData().arrayFirstIndexOf(function(x) { return x.Id == recordId; });
                        if (index == -1) {
                            self.SearchData.unshift(data);
                        } else {
                            self.SearchData.replace(self.SearchData()[index], data);
                        }
                    }
                    self.GlideLeft("Parent", "Search", this);
                },
                function() {
                    self.SelectedProduct(null);
                    self.SelectedIndex = null;

                    self.ScrollTracker.TrackToIdIfNotNull(recordId);
                }
            );
        };

        self.DeleteProduct = function(product) {
            self.ModalViewModel({ Template: "Modal-Dialog-Product", Data: product });
            $('#modal-delete').modal();
        };

        self.DeleteProductConfirm = function() {
            var record = self.ModalViewModel().Data;
            flow.exec(
                function() {
                    $('#modal-delete').modal('hide');
                    self.ProductService.Delete(record.Id, this);
                },
                function(data) {
                    self.SearchData.remove(record); //function (item) { return item.Id == record.Id; });
                    self.ModalViewModel({ Data: null, Template: null });
                });
        };

        self.SaveClick = function() {
            var product = self.SelectedProduct();
            var errors = [];
            errors.push({ controlGroup: "#ProductName", invalid: product.Name().trim() == "" });
            errors.push({ controlGroup: "#SkuCode", invalid: product.SkuCode().trim() == "" });
            errors.push({ controlGroup: "#SEO", invalid: product.SEO().trim() == "" });
            errors.push({ controlGroup: "#Synopsis", invalid: product.Synopsis().trim() == "" });
            errors.push({ controlGroup: "#Description", invalid: product.Description().trim() == "" });

            var validationMessage = $("#validation");
            validationMessage.hide();
            $.each(errors, function(index, elem) {
                if (elem.invalid) {
                    $(elem.controlGroup).addClass("error");
                    validationMessage.show();
                } else {
                    $(elem.controlGroup).removeClass("error");
                }
            });

            if (validationMessage.is(":visible")) {
                return;
            }

            flow.exec(
                function() {
                    self.ProductService.Save(ProductInfoToServerJson(product), this);
                },
                function(product) {
                    var knockedoutData = ProductInfoToKnockout(product);
                    self.SelectedProduct(knockedoutData);
                }
            );
        };

        return self;
    };
</script> 

