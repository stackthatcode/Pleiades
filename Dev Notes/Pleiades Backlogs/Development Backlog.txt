FRONTRANGE - HOTZONE
====================
- Fix the MVC Application with the Great Refactoring => IN PROGRESS
* Fix the ManagerController + Tests => IN PROGRESS - EASY PICKINGS
* Part of this ^^^ implement bridge methods for AggregateUserService, to move logic out of the Controller into Services, Domain and Execution => IN PROGRESS

*** Celebrate coming Out-of-the-Wild with The Great Refactoring #1! *** => TODO
- Postback Control Framework additions =>< TODO


Methods of Security
-------------------
- Controller-bound System-Level Authorization
- OwnerAuthorizedComposite-dervied Execution Composites



Another Backlog
---------------
* Postback Control Framework => TODO
* Create a new CategoryController/Views/Domain Model, etc.
- FIX THIS WITH AN EXTENSION METHOD =><%: Html.RouteLink("LOGOUT", OutboundNavigation.AdminLogout(), new Dictionary<string, object>() { { "class", "header" } })%>
- Refactor the Standard Control Framework => TODO
* http://stackoverflow.com/questions/6308794/html-validationmessagefor-custom-validationmessage-always-shown => AMONG OTHER THINGS
* Fix the web.config with assembly references => IN PROGRESS
- How to deal with LastUpdated field => IN PROGRESS
- Upgrade to ASP.NET MVC 4.0 (4.5?) => TODO
- Web Optimization Toolkit => TODO
- FUTURE DIRECTIONS: NHIBERNATE + MYSQL => and eventually, RAVENDB(!!!)
* Get Scott Hanselman's obj/bin cleaner utility => IN PROGRESS


THOUGHTS ON UI CODING
---------------------
1.) FormLineEditor's are for rapidly building interfaces.
2.) We need: Input Control rendering, Model Binding stuff for Postback, and rendering Validation
3.) DESIRE => Composable Control Builders
* Can add stuff to the Control that injects Style
* Can add stuff to the Control that adds Validation Feedback
4.) Why do we need to compose Labels with the Editor itself...?  What's the honest trade-off?
* Add stuff to the Label itself for Validation Feedback
5.) Try using Facebook without JavaScript

STUFF TO CONFIGURE/BUILD
------------------------
=> Location of CSS Files Directory
=> Location of JavaScript Directory
=> Location of Control Dependent Images and CSS and JS Files
=> Method:

SomethingLibrary.SetDependenciesLocation()
SomethingLibrary.InjectControlDependencies()

Technical Debt #1 - how does the CSS file and JavaScript know how to render the file paths...?

- Create new CategoryRepository => TODO
- Create new CategoryControllerTests => TODO

Enhanced MVC
* Research creating Simplified Outbound Link builders in MVC => TODO 
- Create a Catalog of canned routes for easy navigation through Application => TODO




DESIGN & TECH BACKLOG - REVIEW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- EntityFramework - how to perform basic CRUD stuff - Damn Brutha! => TODO
- EntityFramework Transactions and ASP.NET MVC Concurrency => TODO
- Start adding Logging stuff - you won't be sorry! => TODO
- Easily the most important security article evar => - http://blogs.msdn.com/b/rickandy/archive/2011/05/02/securing-your-asp-net-mvc-3-application.aspx
- Look up Troy Hunt's article's, too
- Best Practices for Unit Testing CRUD, esp. when passing objects around?  How do we verify the payload?
=> POSSIBLE ANSWER: create View Model to Domain Model Transformer Services and inject them like everything else?


The Crazier, The Better!
~~~~~~~~~~~~~~~~~~~~~~~~
- Create a consulting firm that focuses on using Alt.Net-centric development techniques
- Attack mobile computing head-on - go after iOS development with a vengance


BACKLOG
=======
* Security n Stuff
- Move User Approval functions from MembershipService into AggregateUserService

* Research & Design
- How to manage CSS files and dependencies from separate assemblies in ASP.NET MVC => TODO
- http://fluentvalidation.codeplex.com/

* Should we create IdentityUser Integration Tests? => TODO

* New ASP.NET MVC Infrastructure
- Standard Control Refactoring for CSS
- Enable Dependency Injection w/ Autofac => TODO NEXT
- Error Handler Module
- Logging Module
- Email Service w/ Links (MSMQ?)

* General Code Mods
- Leave the Category stuff as Legacy
- Move scripts into Content
- Move the Public stuff into its own Area

* Pleiades Framework
- Create generalized Pleiades Pop-up JQuery Library (OK, YES/NO dialogs)
- Copy jqia2.support.js functions

* General Fixes
- Disable Caching for AJAX stuff => TODO

