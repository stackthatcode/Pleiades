

Some Burndown
-------------
Front Range - 11/4/2012 - RECAP
- Good to create a solid DataAdapter mock - CHECK
- http://stackoverflow.com/questions/6237198/jquery-show-div-and-scroll-to-it-without-hashtag-in-url
- Possibly create a separate Adapter class...  which can be mocked up so I can test my AJAX stuff separately => TODO

-1.) Fix the rendering height => DONE 11/9/2012

0.) Scroll To New Record => => DONE 11/10/2012
- Save Id in hidden field => DONE
- Find field with JQuery and Scroll To Parent => DONE
- ???
- Profit => DONE

6.) Collapse Button => DONE 11/17/2012
- Had to write logic to recover collapse state after refreshing a record.
- NOTE: wouldn't have tp do if we had a "State Sleeve"

- Get Products => v2.0 Backlog
- Add Template for ChildChildView => v2.0 Backlog
- Add another ChildView => v2.0 Backlog

11/18/2012
----------
- Fix the View Model after adding Collapse feature

11/19/2012
----------
- Created SQL model and queries for storing hierarchical SQL Data
- Stubbed-out methods on the JavaScript Data Adapter

11/20/2012
----------
// TODO: change this to RetrieveAllBySectionId - DONE
// ALSO: add a RetreiveSections() method to DataAdapter - DONE
- Add SectionViewModel => DONE

11/21/2012
----------
NEW.) Add Section Drop Down Wiring - Click
- Fix the Section Name in the Header
1.5.) Change Parent Drop Down
- Get Parents Method => DONE
- Add Drop Down template => DONE
- JQuery asynchronous programming => DONE

11/22/2012
----------
1.25.) Add another Go To Section for Sub Category => DONE
- Change Section for Category => DONE
1.5.) Change Parent
- Make this the Parent Category => DONE
- Add Checkmark to Section Navigator => DONE

11/23/2012
----------
1.) MASSIVE refactoring -- completely eliminated the horribly misguided Pipelines and Filters pattern in its entirety.
2.) Moved functionality into extension methods and remaining complex, stateful-stuff into AggregateUserService
3.) REwrote Unit Tests for Aggregate User Service
4.) ALSO: trimmed those AWFUL comments from the MembershipProvider AND removed extraneous Factory reference therein

11/25/2012
----------
- Some basic KO code sanitization => DONE
1.9.) Empty Section markup => DONE
- Added Section check mark to both templates => DONE
2.) Delete Button => DONE
- Add Modal Pop-up - are you sure? =>  DONE
3.) Global Error Handling w/ Pop-up => DONE
- Add Modal Pop-up "Something Went Wrong.  Please Refresh the Page" => DONE
3.5.) Add ErrorState to DataAdapter, and ServerError to ViewModel => DONE
- ALSO: added error simulation => DONE

// I WANT SYMMETRY!  I WANT TO MAKE ASSEMBLING STUFF EASY FOR THE SERVER.  <=== FUCK YOU!!!  BUILDING JSON IS TRIVIAL FOR C#
// UPDATE: everything was upside down.  This should store everything flat for ease-of-manipulation, then translate into JSON accordingly.
// THEREFORE: refactor this and eliminate the tree structure bullshit in our mock data layer.
// Another Update: 
// 1.) problems if we use SectionId -- why does this bother me?
//		A.) RetrieveByParentId has SectionId
//		B.) Not beautiful abstract
//		C.) How often will we repeat ourselves...?  In the database!  In queries!
//		D.) Moving a Category to a new section is too much work
// 2.) problems if we use ParentId... 
//		A.) Query complexity... may have to run twice
//		SELECT * FROM Category t1 WHERE t1.ParentId = "1001" AND t2.ParentId = t1.Id
//  http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/

11/26/2012
----------
5.) AJAX Hourglass
- Wire AJAX hourglass into the DataAdapter

11/28 - 11/30
-------------
- Confrontation of the asynchronous issues
- Refactoring to account for lag

12/2
----
7.) Validation
- Max Length - to HTML
- Show Alert When Empty
- FINISHED THE asynchronous programming for the flow.js library

12/5
----
- Eliminated EF Unit of Work
- Removed SaveChanges from AggregateUserRepo
- Removed SaveChanges PfMembershipProvider

12/7 to 12/8 (6 Hours)
----------------------
- Fixed Dependency Injection issues
- Re-worked the Unit of Work to enable Request-level Transaction atomicity
- Consolidated UpdateUser method to include Membership Email and Approval
- Verified in the Unit Tests
- Fix Defects in Category Editor => DONE
- Domain Object => DONE
- Entity Framework => DONE
- Refactored EVERYTHING in Aggregate and Membership Provider to use UnitOfWork to commit transactions

Resolution of Dependency Injection per Request
- Unit of Work => TODO
* http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application

- Dependency Injection Issues...
1.) How can I ensure that the MembershipProvider creates one DbContext per Request, and doesn't share across Requests
2.) http://stackoverflow.com/questions/12127000/autofac-instanceperhttprequest-vs-instanceperlifetimescope-in-asp-net-mvc-3
3.) * http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx
4.) http://stackoverflow.com/users/335467/alex-meyer-gleaves
5.) http://stackoverflow.com/questions/10027330/how-to-resolve-autofac-instanceperhttprequest => WATCH OUT!
- Transaction Object => TODO

12/8 (2??? Hours after 11pm)
-------------------
- Marked code in MembershipService which will be eliminated in refactoring

12/9 (4.0 Hours)
--------------
- Fix broken Commerce Tests => DONE
- Added UnitOfWork to ManagerController
- Added UnitOfWork Commits to Unit Tests
- Corrected issue in the Commerce Initializer App => DONE
- Confirm AggrService Trace @ Controller Level => TODO
AggrService => Tracer = {6abd51e3-d9f9-4600-8bb8-2c7c257cd20c}
PleiadesContext => ContextId = {5ca9c077-0fed-4fe2-9ed2-2fb2cd91a85a}
=> How do browsers handle caching of the Javascript Libraries...? => DONE
=> Category Editor using JKB development: MILESTONE => DONE
- Important: Create a separate Model for Editing Users => DONE
- Fix the other Admin Editing Screens, including the Add User button => DONE
- Add the window shade effect to the top Menu => DONE
- Reorganized the Backlogs =>  DONE
- Measured Test Coverage => DONE
