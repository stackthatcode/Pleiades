Some Burndown
-------------
Front Range - 11/4/2012 - RECAP
- Good to create a solid DataAdapter mock - CHECK
- http://stackoverflow.com/questions/6237198/jquery-show-div-and-scroll-to-it-without-hashtag-in-url
- Possibly create a separate Adapter class...  which can be mocked up so I can test my AJAX stuff separately => TODO

-1.) Fix the rendering height => DONE 11/9/2012

0.) Scroll To New Record => => DONE 11/10/2012
- Save Id in hidden field => DONE
- Find field with JQuery and Scroll To Parent => DONE
- ???
- Profit => DONE

6.) Collapse Button => DONE 11/17/2012
- Had to write logic to recover collapse state after refreshing a record.
- NOTE: wouldn't have tp do if we had a "State Sleeve"

- Get Products => v2.0 Backlog
- Add Template for ChildChildView => v2.0 Backlog
- Add another ChildView => v2.0 Backlog

11/18/2012
----------
- Fix the View Model after adding Collapse feature

11/19/2012
----------
- Created SQL model and queries for storing hierarchical SQL Data
- Stubbed-out methods on the JavaScript Data Adapter

11/20/2012
----------
// TODO: change this to RetrieveAllBySectionId - DONE
// ALSO: add a RetreiveSections() method to DataAdapter - DONE
- Add SectionViewModel => DONE

11/21/2012
----------
NEW.) Add Section Drop Down Wiring - Click
- Fix the Section Name in the Header
1.5.) Change Parent Drop Down
- Get Parents Method => DONE
- Add Drop Down template => DONE
- JQuery asynchronous programming => DONE

11/22/2012
----------
1.25.) Add another Go To Section for Sub Category => DONE
- Change Section for Category => DONE
1.5.) Change Parent
- Make this the Parent Category => DONE
- Add Checkmark to Section Navigator => DONE

11/23/2012
----------
1.) MASSIVE refactoring -- completely eliminated the horribly misguided Pipelines and Filters pattern in its entirety.
2.) Moved functionality into extension methods and remaining complex, stateful-stuff into AggregateUserService
3.) REwrote Unit Tests for Aggregate User Service
4.) ALSO: trimmed those AWFUL comments from the MembershipProvider AND removed extraneous Factory reference therein

11/25/2012
----------
- Some basic KO code sanitization => DONE
1.9.) Empty Section markup => DONE
- Added Section check mark to both templates => DONE
2.) Delete Button => DONE
- Add Modal Pop-up - are you sure? =>  DONE
3.) Global Error Handling w/ Pop-up => DONE
- Add Modal Pop-up "Something Went Wrong.  Please Refresh the Page" => DONE
3.5.) Add ErrorState to DataAdapter, and ServerError to ViewModel => DONE
- ALSO: added error simulation => DONE

// I WANT SYMMETRY!  I WANT TO MAKE ASSEMBLING STUFF EASY FOR THE SERVER.  <=== FUCK YOU!!!  BUILDING JSON IS TRIVIAL FOR C#
// UPDATE: everything was upside down.  This should store everything flat for ease-of-manipulation, then translate into JSON accordingly.
// THEREFORE: refactor this and eliminate the tree structure bullshit in our mock data layer.
// Another Update: 
// 1.) problems if we use SectionId -- why does this bother me?
//		A.) RetrieveByParentId has SectionId
//		B.) Not beautiful abstract
//		C.) How often will we repeat ourselves...?  In the database!  In queries!
//		D.) Moving a Category to a new section is too much work
// 2.) problems if we use ParentId... 
//		A.) Query complexity... may have to run twice
//		SELECT * FROM Category t1 WHERE t1.ParentId = "1001" AND t2.ParentId = t1.Id
//  http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/

11/26/2012
----------
5.) AJAX Hourglass
- Wire AJAX hourglass into the DataAdapter

11/28 - 11/30
-------------
- Confrontation of the asynchronous issues
- Refactoring to account for lag

12/2
----
7.) Validation
- Max Length - to HTML
- Show Alert When Empty
- FINISHED THE asynchronous programming for the flow.js library

12/5
----
- Eliminated EF Unit of Work
- Removed SaveChanges from AggregateUserRepo
- Removed SaveChanges PfMembershipProvider

12/7 to 12/8 (6 Hours)
----------------------
- Fixed Dependency Injection issues
- Re-worked the Unit of Work to enable Request-level Transaction atomicity
- Consolidated UpdateUser method to include Membership Email and Approval
- Verified in the Unit Tests
- Fix Defects in Category Editor => DONE
- Domain Object => DONE
- Entity Framework => DONE
- Refactored EVERYTHING in Aggregate and Membership Provider to use UnitOfWork to commit transactions

Resolution of Dependency Injection per Request
- Unit of Work => TODO
* http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application

- Dependency Injection Issues...
1.) How can I ensure that the MembershipProvider creates one DbContext per Request, and doesn't share across Requests
2.) http://stackoverflow.com/questions/12127000/autofac-instanceperhttprequest-vs-instanceperlifetimescope-in-asp-net-mvc-3
3.) * http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx
4.) http://stackoverflow.com/users/335467/alex-meyer-gleaves
5.) http://stackoverflow.com/questions/10027330/how-to-resolve-autofac-instanceperhttprequest => WATCH OUT!
- Transaction Object => TODO

12/8 (2??? Hours after 11pm)
-------------------
- Marked code in MembershipService which will be eliminated in refactoring

12/9 (4.0 Hours)
--------------
- Fix broken Commerce Tests => DONE
- Added UnitOfWork to ManagerController
- Added UnitOfWork Commits to Unit Tests
- Corrected issue in the Commerce Initializer App => DONE
- Confirm AggrService Trace @ Controller Level => TODO
AggrService => Tracer = {6abd51e3-d9f9-4600-8bb8-2c7c257cd20c}
PleiadesContext => ContextId = {5ca9c077-0fed-4fe2-9ed2-2fb2cd91a85a}
=> How do browsers handle caching of the Javascript Libraries...? => DONE
=> Category Editor using JKB development: MILESTONE => DONE
- Important: Create a separate Model for Editing Users => DONE
- Fix the other Admin Editing Screens, including the Add User button => DONE
- Add the window shade effect to the top Menu => DONE
- Reorganized the Backlogs =>  DONE
- Measured Test Coverage => DONE

12/12 & 12/13 (3.0 Hours)
-------------------------
- Soft Delete => DONE
- Repository => DONE
- Models for JSON DTO's => DONE
* Create => DONE

12/15 - 1 hour
--------------
- Built Controller methods

12/16 - 3 hours
---------------
- Troubleshoot routing 
- Complete End-to-End Integration
- Category Service => DONE
- Repository/Domain => JSON => ViewModel/Knockout => Template => DONE
- Controller Methods => DONE
* Edit => DONE
* Change => DONE
* DeleteConfirm => DONE
- JQuery Library for AJAX => THE MOMENT IS NOW!
- Logging Aspect => DONE

12/20 - 3 hours late night
--------------------------
* BUG: Save Category twice => FIXED
* BUG: Delete Parent Category => FIXED
* Bug fixes => IN PROGRESS
* BUG: Swap Categories => DONE!!
CRITICAL - refactoring of the Repository to handle complexity of creating JsonCategories... well done, chap!
- Added Touch to DateTime stamp
- Add new commands to the Commerce Initializer i.e. Delete all Users => DONE
- Category Editor => DONE

12/23 4.0 Hours
---------------
- Master Page with Javascript includes => DONE
- Tested everything AGAIN => DONE
- Fixed the Menu => DONE
- Ported Manager Editor to Razor => DONE
- Razor View Engine => DONE
- Bootstrap the Postback stuff => TODO
- Refactor UI to share code in Prototype => TODO

12/23 (DRUNK CODING) 4 Hours
----------------------------
- Finished fixing the Postback stuff for Admin => DONE
- Finish the Bootstrap + Razor conversion => TODO
- Fix Integration Tests => DONE
- Fix Route Unit Tests => TODO

12/26 2 Hours
-------------
- Make this Parent Category BUG => FIX
- DeleteConfirm - finish it => DONE

- REVIEW MY GITHUB HISTORY => DONE
- Clean-up my Chrome Bookmarks => DONE

- Last sweep over MakeThisParent => DONE - STICK WITH IT, FOR NOW
- Refactored Integration Tests => DONE
- Refactored Commerce Initializer Application => DONE
- Fixed Integration Tests => DONE

12/28 3.5 Hours
---------------
- Wrangling with Autofac Instance Lifetime Scope
- Fixed the Integration Tests, refactored to share code from the Commerce Initializer program

12/29 4.0 Hours
---------------
TODO: how to stop repeating Date Inserted and Date Updated => DONE - CAN'T BE DONE
- Tussled with Repository Pattern and ORM Design issues => DONE - FUCK, MAN!!!
* Create functions that populate Test data in Initializer => IN PROGRESS
* Create Integration Tests that play with the data => IN PROGRESS
* Verify proper JSON (de)serialization => IN PROGRESS
- Oh Shites! - experiencing major architectural break down with the Repositories... Please sit down and spell things out => TODO
* OK: so maybe the rule of thumb is that each AggregateRoot or class equals a single Repository
* SHIT: I've been sleeping thinking that I didn't have any beef with my Repository model... but I do!

12/30 4.5 Hours
---------------
- Divorced JsonCategoryRepo from GenericRepo <= that guy is kind of evil => DONE
- Refactored Category Integration Tests => DONE
- Closed of "bounded context" with JsonCategory and Category => DONE
// COMMENT: isn't this absurd...???  Why use a Repository like this...??? => UPDATE: AMENDED
- Eliminated many redundant Repositories => DONE
- Established the base-line Repository architecture with Json-grams => DONE
- Finished building JsonSizeRepository =>DONE
- Fluent Dependency Builder => DONE
- TODO: do we need to remove objects from hierarchy on Soft Delete?  Maybe not => TODO
* Should we create IdentityUser Integration Tests? => TODO - NOPE, DONE

TAKEAWAYS FROM REPOSITORY ISSUES
--------------------------------
- The base class as a concept is very limited.  Stop forcing yourself to inherit from it and expect things to work.  Break away from the influence.

12/31/2012 =>  1/1/2013 3.0 Hour
--------------------------------
- Post Mortem on Full-stack AJAX to SQL Dev
- Played with refactoring the Size and SizeGroup stuff
- ORM Enlightenment

1/1/2013 - 4.5 Hours
------------------
- Size Group Design and Analysis 0.5 Hours
- SizeController - 5 minutes
- size-service.js - 25 minutes
- Finished the Size Editor - another 3 Hours => GOOD JOB!!!
* Create functions that populate Test data in Initializer => DONE
* Create Integration Tests that play with the data => DONE
* Verify proper JSON (de)serialization => DONE
* Wire into Controllers => TODO
* Copy the View Model from Category for Size => DONE

1/2/2013 - 5.5 Hours
--------------------
*** MANDATE => after burndown of the goddamn backlog for Category Editor, every feature is weighed and estimated accordingly!  Make a feature Backlog. => DONE
Section Editor => DONE
- List all Sections, which includes a count of the Categories under each => DONE
- Add a new Section => DONE
- Update a Section => DONE
- Delete a Section => DONE
- Color Backend Programming => DONE
- Brand Backend Programming => DONE
- Performance - just how horrible is the EF code...? => DONE - FUCK PERFORMANCE, IT'S A SHIT MATCH

1/3/2013 - 3.0 Hours
--------------------
- Built ImageBundle, FileResource Repositories => DONE
- Research File Upload - found JQuery + Bootstrap plug-ins => DONE
- Stubbed-out Image Processor => DONE

1/4/2013 - 5.0 Hours
--------------------
- Exceptional! Finished back-end coding for Brand => DONE
- Built Brand Controller, Brand Repository =>  DONE
- Tweaked the ImageBundleRepository and so forth => DONE

1/6/2013 - 3.25 Hours
--------------------
Notes on Brand State => DONE
#1.) Adding a new Record
- The Brand data is empty
- The External Id is NOT present
#2.) Adding a new Record After File Upload
- The Brand data is empty
- The External Id is present
#3.) Editing an Existing Record
- The Brand data is populated
- The External Id is present

- https://github.com/valums/file-uploader/tree/master/server/ASP.NET%20MVC%20C%23 => INTEGRATED WITH CODEBASE

1/8/2013 1.25 Hours
-------------------
- What's the FineUploadBasic vs. Not? => DONE
- Capture the OnCompletion event and pull data from Image Bundle => DONE
- Fix the Bootstrap styling => DONE
- http://fineuploader.com/#demo =>  DONE
* Copy the script => DONE
* Test on the Test Upload page => DONE
* Backend Script / File Upload Backend => DONE

1/9/2013 ~2.0 Hours
-------------------
- Disable Uploads while in progress => DONE
- Centralize Upload Code => DONE
- Added Close Button to Upload Alert => DONE
- Finished coding the ImageBundle Repository => DONE
- Finished coding the Image Download => DONE

1/10/2013 1.5 Hours
-------------------
- Create the Thumbnail View => DONE
- Create the Click for Larger Image View => DONE
- Finished all Image Upload stuff => DONE

1/11/2013 1.5 Hours
-------------------
- Centralized CrossCuttingUI => DONE
- Fix BrandIntegrationTests => DONE
- Copied SizeEditor for Brand => DONE
- Finished Mocking Parent Interface => DONE

1/12/2013 3.5 Hours
-------------------
- MAJOR HTML correction => DONE
- Wired Brand Editor Upload => DONE
 
1/13/2013 5.5 Hours
------------------
- Fix Size to Brand on drill-down => DONE
- Cancel Button => DONE
- Add New Button => DONE
- Empty Add New Size Group Textbox => DONE
- Done with all things Brands => DONE
- Validation => DONE
- Save Button => DONE
- Brand - Delete => DONE
- Thumbnail Viewier Fix => DONE
- Fixed Brand Name Field => DONE
- Rapid, rapid Development of the Color Editor 

1/14/2013 1.0 Hour
------------------
- Require an Image Upload for Color and Brand - Server/Client => DONE
- Optimize the Lightbox to Lazy Load => DONE

1/15/2013 0.75 Hour
------------------
- Lightbox Doublehits - Optimize/Fix => DONE
- Farbtastic Color Picker => DONE

1/16/2013 1.5 Hour
------------------
- The last List - Color - Backend + UI => DONE
- Change color of the Upload Button for File => DONE
- Finish the Color Picker integration => DONE

1/17/2013 1.5 Hours
-------------------
- => Convert existing Pleiades stuff to Admin Interface/Bootstrap => DONE
- Hardcode Product Domain Modeling => DONE

1/19/2013 1.0 Hour
------------------
- Domain modelling and stubbing out Data Builders => DONE

1/20/2013 3.25 Hours
--------------------
- Product Editor work in progress - very good gains => DONE

1/22/2013 1.25 Hours
1/23/2013 1.5 Hours
-------------------
* List View => DONE
* List View Search => DONE
Product Synopsis = Id, Name, Synopsis, Sku, Main Image => DONE
=> Info - Product Name, Description, Base Sku, DELETE BUTTON => DONE
=> Brand & Category => DONE

1/24/2013 1.0 Hours
-------------------
- Architectural Review of Security stuff => DONE

1/25/2013 0.5
-------------
???

1/26/2013 3.5 Hours
-------------------
Finished Validation logic =>DONE
Finished Save Logic
- There's some edge-case bug in Color... so, test the hell out of it => DONE
=> Size Group => DRILL-DOWN STATEFUL
=> ADD BUTTON => DONE

1/27/2013 3.5 Hours
-------------------
- Colors Tab, Refactoring for Active Views, => DONE
- Double-drill-down Logic => DONE
=> SizeGroup Save => DONE
=> SizeGroup "0" versus null => DONE

1/28/2013 1.0 Hour
------------------
- Refactored Views to greatly, greatly Gliding logic => DONE


1/29/2013 1.75 Hours
-------------------
- Product Colors work in progress => DONE

1/30/2013
---------
1.0 Hours

2/1/2013 1.5 Hours
------------------
=> Colors => TODO - EXECUTE DESIGN - DONE
AddColorsToProduct DONE
DeleteColorFromProduct DONE
SelectColor DONE
BIG QUESTION => how to associate Colors to Images... easily...? => DONE

2/2/2013 1.5 Hours
------------------
- TRIPLE CHECK YOUR BACKUPS, DUDE => DONE
- Finished coding Colors

2/3/2013 3.0 Hours
------------------
- Finished major refactoring of Product Screen - which was a failure: back to hard-coding => DONE

backlog cleaning
----------------
- http://fluentvalidation.codeplex.com/ => TODO
* Fix the web.config with assembly references => IN PROGRESS
- How to deal with LastUpdated field => IN PROGRESS
- Copy jqia2.support.js functions
- EntityFramework - how to perform basic CRUD stuff - Damn Brutha! => TODO
- EntityFramework Transactions and ASP.NET MVC Concurrency => TODO
- Start adding Logging stuff - you won't be sorry! => TODO
- RESEARCH a lighter-weight ORM => TODO
- TASK => cross-browser test Animation Stuff, mayhaps introduce method chaining => PENDING EVAL
- Review order of Modal Ok/Cancel => PENDING EVAL

2/4 1.5 Hours
2/5 1.0 Hours
2/6 1.75 Hours
2/7 1.0 Hours
2/8 1.5 Hours
2/9 1.0 Hours
2/10 3.0 Hours
--------------
- Upload Validation => DONE
- Add New Image optimization to List on Save => DONE
- Save Image Order Event => DONE
- Adding a New Color should Update Sort on server => DONE
- Adding a New Image should Update Sort on server => DONE
- Delete Image => DONE
- Rebuild Schema => DONE

2/11 1.0 Hours
2/12 1.0 Hours
2/13 1.5 Hours
2/14 1.5 Hours
2/15 1.5 Hours
--------------
- Fix the Delete Color Function => DONE - BUT: FIX THE MODAL TEXT => DONE
- Fix the Order on assign to Color => DONE
- Upload Image Add To List => DONE
- Delete Image Function => DONE
- Unassigned Images => DONE
- Choose Color Drop Down => DONE
- Render Images to Colors => DONE
- Fix the Color to Image Sorting => DONE
- Delete Color Repository modification => DONE
- Server method for changing Assigned => DONE

2/16 5 Hours
------------
- Fix the Scroll Tracker - take it to the top => DONE
- Scroll Tracking on Add => DONE
- Unassign Images Button => DONE
- Assign Images to Colors Button => DONE
- Add Copy Image Method to Repository => DONE
- Change ProductColor To Belong to Product => DONE
- Fix the Thumbnail by Sort Order => DONE
=> Screen for ordering Colors & Images => DONE
- Update Product in Search after Adding & Editing=> DONE
- Start Designing Product Screen => DONE
- Product Images and Colors IsDeleted - do we need it? => DONE
* Sku's/Stock will be wiped when we delete Colors and Sizes, right? => TRUE
* Orders will still maintain the Sku Code and Description for tracing => TRUE
* So, remove IsDeleted from ProductColors? => DONE
- Product Search Add/Delete => DONE
- Fix bug on Back to Search => TODO
*** WRETCHED DEATH MARCH *** fixed the image thumbnail B-Logic => DONE
- Use xhr replay to repro a nasty fricking bug - bravo! => DONE - FIXED A NASTY BUG THANKS TO CHROME
- Options for Thumbnail
* Implicit selection.. confusing and bullshitty =>DONE
- Checked the Color glideback Ko vs. Sortable - clean =>DONE
- ALSO: improved performance tremendously with new Thumbnail approach => DONE

2/18 - 3.0 Hours
----------------
self.ProductService.SizeList(this); => DONE
self.ProductService.AddProductSize(self.SelectedProduct().Id(), nextSizeId, iterator); => DONE
self.ProductService.Sizes(self.SelectedProduct().Id(), this); => DONE
self.ProductService.DeleteProductSize(self.SelectedProduct().Id(), size.Id, this); => DONE
self.ProductService.UpdateSizeOrder(self.SelectedProduct().Id(), sortedIds); => DONE
- Fix the Color Delete Modal formatting => DONE
* Remove Size Group => DONE
self.SelectedProductSizes = ko.observableArray();
self.NewSizeInput = ko.observable(null);
self.SizeReferenceData = ko.observableArray();
self.ActiveView({ Level: "Sub-Child", Template: "AddSizesFromList" });
self.GlideBackToSizes = function () {
self.GlideBackToSizesTabWithRefresh 
self.SaveSize
AddSizeFromList - TODO
- Size copying interface => DONE
* Add Size Group List => DONE
CreateNewSize - TODO - BACKLOGGED - DON'T NEED IT

2/18 - Part 2 - 2.0 Hours
-------------------------
- PREVENT DELETION OF LAST SECTION => DONE
-- SO, ONLY IF THEY HAVE NON-ZERO INVENTORY IN SIZES, RIGHT? => DONE
=> "You will now be tracking Colors.  Old Inventory without Colors will be destroyed.  Please update your Inventory"
-- SO, ONLY IF THEY HAVE NON-ZERO INVENTORY, RIGHT?
=> "You will now be tracking Sizes.  Old Inventory without Sizes will be destroyed.  Please update your Inventory"
- Change out the Back Buttons => IN PROGRESS


2/19 - 1.5 Hours
2/20 - 1.25 Hours
2/21 - 1.25 Hours
2/22 - 1.0 Hours
2/22 - 0.75 Hours
~~~~~~~~~~~~~~~~
- When I delete a Category or Brand, gotta set the Product's == N/A => DONE
- Create Category and Brand "N/A" => DONE
- Empty Images indicator + Upload Image to empty images EXCEPTION => DONE

- SKU and Order Generator => DONE

WHEN TO CHANGE SKUS => DONE
- Add First Color to Product => If there are sizes / or not, then => Rebuild all Sku's 
- Add First Size to Product => If there are colors / or not, then => Rebuild all Sku's 
- Delete All Colors => Rebuild all Sku's - already have warnings - DONE 
- Delete All Sizes => Rebuild all Sku's - already have warnings = DONE

- +1 Delete Color from Product => Remove those Sku's - already have warnings - DONE
- +1 Delete Size from Product => Remove those Sku's - already have warnings - DONE
- +1 Add New Color to Product => Add more Skus
- +1 Add New Size to Product => Add more Skus

2/23 1.0 Hours
--------------
- JQuery Validation research =>DONE

2/24 5.5 Hours + 0.5 Hours
--------------------------
- Change Menu for Login Screen => DONE

Banana Republic 
~~~~~~~~~~~~~~~
- Lets you modify the Order while checking out - albeit with postback
- Automatically copies Shipping Address to Billing Address
- Review the Order before submission

- ReturnUrl on Login => DONE
- Fix the Delete User sequence and fix the Security process (IsDeleted == true) => DONE
- Fix empty Inventory Total bug => DONE
- Fixed URL Decoding on ReturnUrl => DONE
- Order Menu item => DONE
- ** MAJOR ** perpetual gliding => DONE
- Created scaffolding for Order Editor => DONE
- Order Product Search => DONE
- Get Inventory on Create Order => DONE
* Perpetual Glide => DONE

2/25 0.75 Hours
---------------
* Splash Screen => NOPE!
* Search for Product => DONE
* Use the complete hard coding approach => DONE

2/26 1.0 Hours
--------------
- Add Category and Brand "0" for defaults => DONE
- Fix Repositories for these, too => DONE
- Fix bug in Save Info => DONE
- Add the Number of Products in a Brand screen => DONE
- Added Inventory Update method to Repo => DONE
* Swap in a practical grid, son => DONE

2/27 1.25 Hours
---------------
* Write the Save Function and add the KO Binding customization => DONE
* Update Inventory method in Product Editor => DONE
- Inventory Editor => DONE
- AccessDenied versus + SolicitLogin => DONE
- Ability to change the Order of Sizes => DONE

2/28 1.5 Hours
--------------
- Fix bug in Inventory Editor => DONE
- Sizes Breaking Inventory Notification => DONE
- Empty Image UI => DONE
* Fix Quantity Knockout Binding => DONE
- Shopping Cart Design => DONE

3/1 1.5 Hours
-------------
- Fixed Quantity observable bug => DONE
- Write Add to Cart Method => DONE
- Write an Add to Cart Visual Feedback => DONE
* Create Add Constraint => DONE
* Created Modal function => DONE
- Order Entry Stuff * Numbers up top =>  DONE

3/3 4.0 Hours
-------------
- Maximum Quantity is 99 => DONE
- Add Quantity to Existing Sku => DONE
- Max Items types per Cart => DONE
- Fixed gthe Perpetual Glider stuff => DONE
* Add More Items Link => DONE
- Added Product reference to Shopping Cart =>DONE
- Add Cart Automation => DONE
- Fixed Lightbox bug => DONE

3/4 1.5 Hours
-------------
- Finalized Edit Cart interface layout => DONE
* Unit Price => DONE
* Delete Button => DONE
* Item Name => DONE
* Sku Code => DONE
- Loaded Colors, Sizes and Inventory => DONE

3/5 1.75 Hours
--------------
* Get the ProductColors and ProductSizes from Server => DONE
- Add Next Constraint for Empty Cart => DONE

3/6 1.5 Hours
-------------
~~~ Heavy duty DDD stuff (see below)

- STUFF TO BUILD
* Product Color Thumbnail Image property => DONE
* Fix the Image Delete - it doesn't manage the Product Thumbnail correctly => DONE
* When I add an Image, the Product Color gets updated => DONE
* When I change Image order, the Product Color get updated => DONE
* When I change Image Assignment, the Product Colors get updated => DONE
* When I delete an Image, the Product Color get updated => DONE
* Looking at Product Detail => Show Product Colors => DONE
* View Contents of My Cart => show the Product Item Thumbnail, or if I chose a Color, show the Color Thumbnail => DONE
ASSERTION => if we always store the Image with the Product Color, then we're covered. => DONE
Two flows: 
1.) Assign Images to Color - Sku shows its Product Color => DONE
2.) Don't assign Images to Color - Sku shows Product Thumbnail => DONE
1.) Update Product Color Thumbnail => DONE
2.) Update Product Thumbnail => DONE
- THINK IT THROUGH
* Browsing Products => Product Thumbnail => DONE

- EXCEPTIONAL JOB, ALEKS!

3/9 3.25 Hours
--------------
- Hard work on the Edit Cart functionality => DONE

3/12 1.0 Hours
--------------
- More work on Edit Cart => dONE
* ReservedInventory => DONE
* TotalInventory => DONE
* Make the Edit Cart more well-mannered => DONE

3/17 6.0 Hours
--------------
* Clearing technical debts
* More intensive work on Cart

3/19 2.0 Hours
--------------
* Near completion of the Cart Editor

3/20 1.5 Hours
--------------
* Continuation of Cart Editor

3/21 2.5 Hours
--------------
* Continuation of Cart Editor	

3/22 1.0 Hours
--------------
More hacking

3/23 2.0 Hours
--------------
* Cleared a massive technical debt I was incurring on the ShoppingCart

3/24 8.0 + Hours
----------------
- The ExternalResourceId boondoggle debt
- Update the SKU when a valid Color and Size combo is selected => DONE
- Update the Cart with Inventory Available and CartItem Quantity javascript function => DONE
- Notify - "Hey, we had to remove some items from your Cart, as Inventory is changing.  Hurry up and check-out!" => DONE
- Review Step - Copy the SKU to an Edit State => DONE
- Determine how to filter the Sizes / Colors based on Available Inventory => DONE
- Isolate the Current Sku Code => DONE
- Isolate Current Color and Size => DONE
* WHEN: I click on Expand Item, and when I Edit the Cart => DONE
* WHAT: If Available < my Quantity, notify and adjust Quantity. If Available = 0, remove and notify => DONE
- Current Selected Color => DONE
- Current Selected Size => DONE
- Determine when to show Size/Color, when not => DONE
- Aligned Columns => DONE
- Quantity to add should reflect Available - QuantityInCartBySku => DONE
- Write a separate QuantityInCartBySku function => DONE
- ALSO: when doing Inventory Item check, adjust Quantities based on CURRENT Availability, and show a notification when things have adjusted => DONE
- When selected, check the Available Quantity and maybe render (Out-of-Stock) =>DONE

* Create Shopping Cart Screen => IN PROGRESS
- Cart Screen spec
	* Top Header
		* Next Button (to Shipping) => DONE
	* Body Grid (each row)
		* Image => DONE
		* Color => DONE
		* Size => DONE
		* Qty => DONE
		* Edit Button => IN PROGRESS		
	* Body Grid Edit State
		* (SAME FIELDS)
		* Quantity Drop Down
		* Save Button
		* Cancel Button =>  DONE

- On Edit CartItem
* EditCartItem => DONE
* When I submit my Order, the Sku Image literally gets COPIED and tied to the Order Line => DONE
- Product - Add In-Stock flag => DONE

3/26 2.0 Hours
--------------
- CRITICAL => began the final pass on pwnage of the Membership Provider
* Fix the bugs with the Images when we have no Color => DONE - GOOD JOB
* Take a peek at EF's inefficiency => DONE - PRETTY BAD, OPTIMIZATION WOULD BE WITH DAPPER
* Fix the Quantity Dropdown => DONE

- Bundle Image technical debt => DONE - FANTASTIK!
ImageBundle => ExternalId
JsonProductInfo =>  ImageBundleExternalId
Product => ImageBundle
ProductSku => ImageBundle
ProductImage => ImageBundle
ProductColor => ImageBundle(2x)

- Fixed the ugly ass Inventory layout => DONE

3/27 1.5 Hours
--------------
* Subtotal Row => DONE
* Thrashing around with Product Management on the Checkout process => IN PROGRESS

3/28 1.0 Hours
--------------
* Cart comparison between MMA, BR and Amazon
* Order Sub Total Before Tax => DONE

3/30 2.5 Hours + 2.0 Hours
--------------------------
* Shipping Information

3/31 2.5 Hours
--------------
* Enter Email Address + Shipping Info + Shipping method => DONE
* Add Validation for fields => DONE
* Add Shipping View Model => DONE
* Create Email Exists service => DONE - PHASE 2 w/ User Accounts

3/31 2.5 Hours
--------------
- Sale Tax computation
* Enter Billing Info => DONE

4/1/2013 1.5 Hours
------------------
- Add Shipping Address to Order Summary w/ link to Shipping Info => DONE
- Fix the double clicks on nav buttons => DONE
- Fix the double-link-click bug => DONE (BIG CATCH!)
- Fix the bug with Image pop-up on Create Order screen => DONE
- Fix the bug in choosing a color in the Product Editor => NO REPRO
- Add Card Entry Test Automation => DONE
- Cache the Image Bundles too...? => NOPE
- Fix bug which consolidates Cart Items => DONE
- Clicking a link while it's loading the AJAX causes JQuery to beef => DONE
- Develop and/or Research Fluent Validation library => DONE

4/2/2013 2.0 Hours
------------------
- Frank and Oak's Store Front => DONE
- Mockup of my Store Front Design => DONE
- Fighter's Market => DONE
- Order, Shipping, Billing, ShippingMethod Domain objects / Models => DONE
- More Builders => DONE
- Order Computation => DONE
- RESTful URL research => DONE
- Skeleton of Submit Order process => DONE

4/5 1.0 Hour
------------
- Order Bounded Context Design => DONE

4/6 1.0 Hours
--------------
- Researched Charts and Graphs => DONE

4/7 5.0 Hours
-------------
1.) Compose the Order request into a JSON object => DONE
2.) Send request to Server => DONE
FIX - Email to Email Address => DONE
FIX - Converge First Name and Last Name into Name => DONE
* Create Order Validation flow for Check-out => DONE
// (ME) Confirm Order data entry correctly translates - DONE
// Client Side method that converts Cart into Order - DONE!
2.5.) Validate Request => TODO - DONE, FOR NOW
FIX - the Client Side Grand Total computation => DONE
FIX - Unselected Edit before Shipping => done
FIX - Inventory placeholder (says SKU) => DONE
FIX - Add Category is broken => DONE FOR NOW
State Taxes -- Added 

4/8 1.5 Hours
-------------
2.8.) Shipping Process => DONE
2.9.) Tax Process => DONE
Add Shipping Info object to payload so Json matches C# Model => DONE
// Get all of the Skus from the Order - DONE            
* Create State Tax Service => DONE
// Invoke Payment Processor - DONE

4/9 1.5 Hours
-------------
-// Return Order Creation status object...? - DONE
// Make corrections to the Quantities - DONE
// How do we message that: => DONE
// Payment Failed?=> DONE
// Invalid Payment Info=> DONE
// Valid Payment Info, but still a no-no=> DONE
// Payment Succeeded=> DONE
// Inventory changed?=> DONE
2.7.) Inventory Process => DONE
3.) Payment Processing => DONE FOR NOW
* Create Shipping Service for Shipping Options => DONE
* Create Order w/ Payment Verification service => DONE

4/10 1.75 Hours
---------------
- States + Shipping // TODO: load this into KO => DONE
- Ideally?  A Message Bus => BUT NOT NOW
*** MANDATE => more play with Autofac => DONE, FOR NOW
- http://nblumhardt.com/2011/01/an-autofac-lifetime-primer/ => DONE, FOR NOW
- JQuery Validate => DONE
- difference between PartialViews, USerControls, etc. => DONE
- Shopping Cart Problem Notification => DONE
- Stubbed out the Analytics Service and Email Sending Service => DONE
- Error Simulation => DONE
Communication Process => DONE FOR NOW, UNTIL EMAIL ENGINE
Analytics Tracking Process => DONE FOR NOW, UNTIL ANALYTICS ENGINE + NICE LITTLE GRAPH

4/11 1.0 Hours
--------------
- Order/Payment processing => IN PROGRESS

4/12 1.5 Hours
--------------
- Order/Payment processing => IN PROGRESS

4/14 6 Hours
------------
- Finished writing Unit Tests for Order/Payment Procesing => DONE - GOOD JOB, BRAH!

4/15 1.5 Hours
--------------
- Domain object modelling => IN PROGRESS

4/16 1.5 Hours
--------------
- Fix bug in the Product Info Save button => TODO - PRETTY IMPORTANT - DONE
- Update Sku Code
- Disable Inventory Sku-Code Editing
- Update Inventory Reserved

4/18 1.0 Hours
--------------
- Add OrderNotes to one-to-many OrderLines => DONE
- Order Number Generator => DONE
- DDD on the Order => IN PROGRESS
- Verification of Refund logic => DONE
- Corrections of verbage on ORder corrections => DONE
- Order Status specification => DONE
- Order Complete => DONE (I THINK)

4/19 1.0 Hours
--------------
* Order Id Provisioning Tool => DONE

4/20 5.0 Hours
--------------
- Finished the Order Completion part => DONE
* Create an Order Processing "post mortem" Page => IN PROGRESS (DO IN PARALLEL WITH THE STORE FRONT DESIGN) => DONE
- coupled to Inventory Context =>  DONE - DECOUPLED
- Patched broken Images for missing Sku Image => DONE
- The struggle for data integrity => IN PROGRESS
- Delete Product => do we delete the Inventory => DONE
* Why are there Product Color orphans in the database? => DONE
- Fixed admin graphics
- THE GREAT FLOW - Tying it All Together (!!!) => DONE
- Test *EVERYTHING* => create a Product and simulate Creation of a Product followed by deletion of Categories, Brands, etc. => DONE
* What happens if a Product/Color/Size/Image is Deleted?  What happens to Carts?  What happens to Orders? => DONE
- Delete Product => do we delete the Inventory => DONE
* Why are there Product Color orphans in the database? => DONE
- Fixed Category and Brand data integrity => DONE
- Fixed clear Brand / Category error => DONE

Order Submission Flow - Bound Contexts and Concerns 4/8/2013 => CLEAR
------------------------------------------------------------
- Product Context (Creation, Deletion of Product, Colors, Images)
- Inventory Context (In-stock, Reserved & Available Quantities)
- Order Context (Creation of Order, Tracking/Management of Order Status)
- Payment Context (Payment Processing, Receipt/record of Payment, Refunds, Payment History by canonicalized-email or User ID)
- Communication Context (Email, Email Send History, Faxes, etc.)
- Analytics Context (Sale Record, Product Popularity, Refund Record)

- INTELLIGENCE - start reverse-engineering Frank and Oak's process => DONE
*** Move SkuCode editor to the Inventory screen => DONE
NOTES ON THE HEGEMONY OF UNREASON (STATIC MEMBERSHIP)
- UpdateSelf() invocations... this odd function is called... with tons of exception checking... as if, there are not transactions...?  Why don't you throw
- What's the rigamorale about Updating shit...?  Why not try it and if it fails, throw an Exception???

4/21/2013
---------
- Current User Popover => DONE
- Logged-In User => DONE
- Destroyed some of the old Security Model => DONE
- http://stackoverflow.com/questions/4036582/asp-net-mvc-displaying-user-name-from-a-profile
- Cache the AggregateUser stuff in a static Dictionary (I mean, seriously, man) => IMPORTANT
- Added Image caching => DONE


5/2/2013
--------
- CHECK THIS OUT => http://www.ww2helmets.com/products-page/checkout/ => TODO
~ Random => http://designmodo.github.com/Flat-UI/ => DONE



