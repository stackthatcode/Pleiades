Some Burndown
-------------
Front Range - 11/4/2012 - RECAP
- Good to create a solid DataAdapter mock - CHECK
- http://stackoverflow.com/questions/6237198/jquery-show-div-and-scroll-to-it-without-hashtag-in-url
- Possibly create a separate Adapter class...  which can be mocked up so I can test my AJAX stuff separately => TODO

-1.) Fix the rendering height => DONE 11/9/2012

0.) Scroll To New Record => => DONE 11/10/2012
- Save Id in hidden field => DONE
- Find field with JQuery and Scroll To Parent => DONE
- ???
- Profit => DONE

6.) Collapse Button => DONE 11/17/2012
- Had to write logic to recover collapse state after refreshing a record.
- NOTE: wouldn't have tp do if we had a "State Sleeve"

- Get Products => v2.0 Backlog
- Add Template for ChildChildView => v2.0 Backlog
- Add another ChildView => v2.0 Backlog

11/18/2012
----------
- Fix the View Model after adding Collapse feature

11/19/2012
----------
- Created SQL model and queries for storing hierarchical SQL Data
- Stubbed-out methods on the JavaScript Data Adapter

11/20/2012
----------
// TODO: change this to RetrieveAllBySectionId - DONE
// ALSO: add a RetreiveSections() method to DataAdapter - DONE
- Add SectionViewModel => DONE

11/21/2012
----------
NEW.) Add Section Drop Down Wiring - Click
- Fix the Section Name in the Header
1.5.) Change Parent Drop Down
- Get Parents Method => DONE
- Add Drop Down template => DONE
- JQuery asynchronous programming => DONE

11/22/2012
----------
1.25.) Add another Go To Section for Sub Category => DONE
- Change Section for Category => DONE
1.5.) Change Parent
- Make this the Parent Category => DONE
- Add Checkmark to Section Navigator => DONE

11/23/2012
----------
1.) MASSIVE refactoring -- completely eliminated the horribly misguided Pipelines and Filters pattern in its entirety.
2.) Moved functionality into extension methods and remaining complex, stateful-stuff into AggregateUserService
3.) REwrote Unit Tests for Aggregate User Service
4.) ALSO: trimmed those AWFUL comments from the MembershipProvider AND removed extraneous Factory reference therein

11/25/2012
----------
- Some basic KO code sanitization => DONE
1.9.) Empty Section markup => DONE
- Added Section check mark to both templates => DONE
2.) Delete Button => DONE
- Add Modal Pop-up - are you sure? =>  DONE
3.) Global Error Handling w/ Pop-up => DONE
- Add Modal Pop-up "Something Went Wrong.  Please Refresh the Page" => DONE
3.5.) Add ErrorState to DataAdapter, and ServerError to ViewModel => DONE
- ALSO: added error simulation => DONE

// I WANT SYMMETRY!  I WANT TO MAKE ASSEMBLING STUFF EASY FOR THE SERVER.  <=== FUCK YOU!!!  BUILDING JSON IS TRIVIAL FOR C#
// UPDATE: everything was upside down.  This should store everything flat for ease-of-manipulation, then translate into JSON accordingly.
// THEREFORE: refactor this and eliminate the tree structure bullshit in our mock data layer.
// Another Update: 
// 1.) problems if we use SectionId -- why does this bother me?
//		A.) RetrieveByParentId has SectionId
//		B.) Not beautiful abstract
//		C.) How often will we repeat ourselves...?  In the database!  In queries!
//		D.) Moving a Category to a new section is too much work
// 2.) problems if we use ParentId... 
//		A.) Query complexity... may have to run twice
//		SELECT * FROM Category t1 WHERE t1.ParentId = "1001" AND t2.ParentId = t1.Id
//  http://mikehillyer.com/articles/managing-hierarchical-data-in-mysql/

11/26/2012
----------
5.) AJAX Hourglass
- Wire AJAX hourglass into the DataAdapter

11/28 - 11/30
-------------
- Confrontation of the asynchronous issues
- Refactoring to account for lag

12/2
----
7.) Validation
- Max Length - to HTML
- Show Alert When Empty
- FINISHED THE asynchronous programming for the flow.js library

12/5
----
- Eliminated EF Unit of Work
- Removed SaveChanges from AggregateUserRepo
- Removed SaveChanges PfMembershipProvider

12/7 to 12/8 (6 Hours)
----------------------
- Fixed Dependency Injection issues
- Re-worked the Unit of Work to enable Request-level Transaction atomicity
- Consolidated UpdateUser method to include Membership Email and Approval
- Verified in the Unit Tests
- Fix Defects in Category Editor => DONE
- Domain Object => DONE
- Entity Framework => DONE
- Refactored EVERYTHING in Aggregate and Membership Provider to use UnitOfWork to commit transactions

Resolution of Dependency Injection per Request
- Unit of Work => TODO
* http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application

- Dependency Injection Issues...
1.) How can I ensure that the MembershipProvider creates one DbContext per Request, and doesn't share across Requests
2.) http://stackoverflow.com/questions/12127000/autofac-instanceperhttprequest-vs-instanceperlifetimescope-in-asp-net-mvc-3
3.) * http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx
4.) http://stackoverflow.com/users/335467/alex-meyer-gleaves
5.) http://stackoverflow.com/questions/10027330/how-to-resolve-autofac-instanceperhttprequest => WATCH OUT!
- Transaction Object => TODO

12/8 (2??? Hours after 11pm)
-------------------
- Marked code in MembershipService which will be eliminated in refactoring

12/9 (4.0 Hours)
--------------
- Fix broken Commerce Tests => DONE
- Added UnitOfWork to ManagerController
- Added UnitOfWork Commits to Unit Tests
- Corrected issue in the Commerce Initializer App => DONE
- Confirm AggrService Trace @ Controller Level => TODO
AggrService => Tracer = {6abd51e3-d9f9-4600-8bb8-2c7c257cd20c}
PleiadesContext => ContextId = {5ca9c077-0fed-4fe2-9ed2-2fb2cd91a85a}
=> How do browsers handle caching of the Javascript Libraries...? => DONE
=> Category Editor using JKB development: MILESTONE => DONE
- Important: Create a separate Model for Editing Users => DONE
- Fix the other Admin Editing Screens, including the Add User button => DONE
- Add the window shade effect to the top Menu => DONE
- Reorganized the Backlogs =>  DONE
- Measured Test Coverage => DONE

12/12 & 12/13 (3.0 Hours)
-------------------------
- Soft Delete => DONE
- Repository => DONE
- Models for JSON DTO's => DONE
* Create => DONE

12/15 - 1 hour
--------------
- Built Controller methods

12/16 - 3 hours
---------------
- Troubleshoot routing 
- Complete End-to-End Integration
- Category Service => DONE
- Repository/Domain => JSON => ViewModel/Knockout => Template => DONE
- Controller Methods => DONE
* Edit => DONE
* Change => DONE
* DeleteConfirm => DONE
- JQuery Library for AJAX => THE MOMENT IS NOW!
- Logging Aspect => DONE

12/20 - 3 hours late night
--------------------------
* BUG: Save Category twice => FIXED
* BUG: Delete Parent Category => FIXED
* Bug fixes => IN PROGRESS
* BUG: Swap Categories => DONE!!
CRITICAL - refactoring of the Repository to handle complexity of creating JsonCategories... well done, chap!
- Added Touch to DateTime stamp
- Add new commands to the Commerce Initializer i.e. Delete all Users => DONE
- Category Editor => DONE

12/23 4.0 Hours
---------------
- Master Page with Javascript includes => DONE
- Tested everything AGAIN => DONE
- Fixed the Menu => DONE
- Ported Manager Editor to Razor => DONE
- Razor View Engine => DONE
- Bootstrap the Postback stuff => TODO
- Refactor UI to share code in Prototype => TODO

12/23 (DRUNK CODING) 4 Hours
----------------------------
- Finished fixing the Postback stuff for Admin => DONE
- Finish the Bootstrap + Razor conversion => TODO
- Fix Integration Tests => DONE
- Fix Route Unit Tests => TODO

12/26 2 Hours
-------------
- Make this Parent Category BUG => FIX
- DeleteConfirm - finish it => DONE

- REVIEW MY GITHUB HISTORY => DONE
- Clean-up my Chrome Bookmarks => DONE

- Last sweep over MakeThisParent => DONE - STICK WITH IT, FOR NOW
- Refactored Integration Tests => DONE
- Refactored Commerce Initializer Application => DONE
- Fixed Integration Tests => DONE

12/28 3.5 Hours
---------------
- Wrangling with Autofac Instance Lifetime Scope
- Fixed the Integration Tests, refactored to share code from the Commerce Initializer program

12/29 4.0 Hours
---------------
TODO: how to stop repeating Date Inserted and Date Updated => DONE - CAN'T BE DONE
- Tussled with Repository Pattern and ORM Design issues => DONE - FUCK, MAN!!!
* Create functions that populate Test data in Initializer => IN PROGRESS
* Create Integration Tests that play with the data => IN PROGRESS
* Verify proper JSON (de)serialization => IN PROGRESS
- Oh Shites! - experiencing major architectural break down with the Repositories... Please sit down and spell things out => TODO
* OK: so maybe the rule of thumb is that each AggregateRoot or class equals a single Repository
* SHIT: I've been sleeping thinking that I didn't have any beef with my Repository model... but I do!

12/30 4.5 Hours
---------------
- Divorced JsonCategoryRepo from GenericRepo <= that guy is kind of evil => DONE
- Refactored Category Integration Tests => DONE
- Closed of "bounded context" with JsonCategory and Category => DONE
// COMMENT: isn't this absurd...???  Why use a Repository like this...??? => UPDATE: AMENDED
- Eliminated many redundant Repositories => DONE
- Established the base-line Repository architecture with Json-grams => DONE
- Finished building JsonSizeRepository =>DONE
- Fluent Dependency Builder => DONE
- TODO: do we need to remove objects from hierarchy on Soft Delete?  Maybe not => TODO
* Should we create IdentityUser Integration Tests? => TODO - NOPE, DONE

TAKEAWAYS FROM REPOSITORY ISSUES
--------------------------------
- The base class as a concept is very limited.  Stop forcing yourself to inherit from it and expect things to work.  Break away from the influence.

12/31/2012 =>  1/1/2013 3.0 Hour
--------------------------------
- Post Mortem on Full-stack AJAX to SQL Dev
- Played with refactoring the Size and SizeGroup stuff
- ORM Enlightenment

1/1/2013 - 4.5 Hours
------------------
- Size Group Design and Analysis 0.5 Hours
- SizeController - 5 minutes
- size-service.js - 25 minutes
- Finished the Size Editor - another 3 Hours => GOOD JOB!!!
* Create functions that populate Test data in Initializer => DONE
* Create Integration Tests that play with the data => DONE
* Verify proper JSON (de)serialization => DONE
* Wire into Controllers => TODO
* Copy the View Model from Category for Size => DONE

1/2/2013 - 5.5 Hours
--------------------
*** MANDATE => after burndown of the goddamn backlog for Category Editor, every feature is weighed and estimated accordingly!  Make a feature Backlog. => DONE
Section Editor => DONE
- List all Sections, which includes a count of the Categories under each => DONE
- Add a new Section => DONE
- Update a Section => DONE
- Delete a Section => DONE
- Color Backend Programming => DONE
- Brand Backend Programming => DONE
- Performance - just how horrible is the EF code...? => DONE - FUCK PERFORMANCE, IT'S A SHIT MATCH

1/3/2013 - 3.0 Hours
--------------------
- Built ImageBundle, FileResource Repositories => DONE
- Research File Upload - found JQuery + Bootstrap plug-ins => DONE
- Stubbed-out Image Processor => DONE

1/4/2013 - 5.0 Hours
--------------------
- Exceptional! Finished back-end coding for Brand => DONE
- Built Brand Controller, Brand Repository =>  DONE
- Tweaked the ImageBundleRepository and so forth => DONE

1/6/2013 - 3.25 Hours
--------------------
Notes on Brand State => DONE
#1.) Adding a new Record
- The Brand data is empty
- The External Id is NOT present
#2.) Adding a new Record After File Upload
- The Brand data is empty
- The External Id is present
#3.) Editing an Existing Record
- The Brand data is populated
- The External Id is present

- https://github.com/valums/file-uploader/tree/master/server/ASP.NET%20MVC%20C%23 => INTEGRATED WITH CODEBASE

1/8/2013 1.25 Hours
-------------------
- What's the FineUploadBasic vs. Not? => DONE
- Capture the OnCompletion event and pull data from Image Bundle => DONE
- Fix the Bootstrap styling => DONE
- http://fineuploader.com/#demo =>  DONE
* Copy the script => DONE
* Test on the Test Upload page => DONE
* Backend Script / File Upload Backend => DONE

1/9/2013 ~2.0 Hours
-------------------
- Disable Uploads while in progress => DONE
- Centralize Upload Code => DONE
- Added Close Button to Upload Alert => DONE
- Finished coding the ImageBundle Repository => DONE
- Finished coding the Image Download => DONE

1/10/2013 1.5 Hours
-------------------
- Create the Thumbnail View => DONE
- Create the Click for Larger Image View => DONE
- Finished all Image Upload stuff => DONE

1/11/2013 1.5 Hours
-------------------
- Centralized CrossCuttingUI => DONE
- Fix BrandIntegrationTests => DONE
- Copied SizeEditor for Brand => DONE
- Finished Mocking Parent Interface => DONE

1/12/2013 3.5 Hours
-------------------
- MAJOR HTML correction => DONE
- Wired Brand Editor Upload => DONE
 
1/13/2013 5.5 Hours
------------------
- Fix Size to Brand on drill-down => DONE
- Cancel Button => DONE
- Add New Button => DONE
- Empty Add New Size Group Textbox => DONE
- Done with all things Brands => DONE
- Validation => DONE
- Save Button => DONE
- Brand - Delete => DONE
- Thumbnail Viewier Fix => DONE
- Fixed Brand Name Field => DONE
- Rapid, rapid Development of the Color Editor 

1/14/2013 1.0 Hour
------------------
- Require an Image Upload for Color and Brand - Server/Client => DONE
- Optimize the Lightbox to Lazy Load => DONE

1/15/2013 0.75 Hour
------------------
- Lightbox Doublehits - Optimize/Fix => DONE
- Farbtastic Color Picker => DONE

1/16/2013 1.5 Hour
------------------
- The last List - Color - Backend + UI => DONE
- Change color of the Upload Button for File => DONE
- Finish the Color Picker integration => DONE

1/17/2013 1.5 Hours
-------------------
- => Convert existing Pleiades stuff to Admin Interface/Bootstrap => DONE
- Hardcode Product Domain Modeling => DONE

1/19/2013 1.0 Hour
------------------
- Domain modelling and stubbing out Data Builders => DONE

1/20/2013 3.25 Hours
--------------------
- Product Editor work in progress - very good gains => DONE

1/22/2013 1.25 Hours
1/23/2013 1.5 Hours
-------------------
* List View => DONE
* List View Search => DONE
Product Synopsis = Id, Name, Synopsis, Sku, Main Image => DONE
=> Info - Product Name, Description, Base Sku, DELETE BUTTON => DONE
=> Brand & Category => DONE

1/24/2013 1.0 Hours
-------------------
- Architectural Review of Security stuff => DONE

1/25/2013 0.5
-------------
???

1/26/2013 3.5 Hours
-------------------
Finished Validation logic =>DONE
Finished Save Logic
- There's some edge-case bug in Color... so, test the hell out of it => DONE
=> Size Group => DRILL-DOWN STATEFUL
=> ADD BUTTON => DONE

1/27/2013 3.5 Hours
-------------------
- Colors Tab, Refactoring for Active Views, => DONE
- Double-drill-down Logic => DONE
=> SizeGroup Save => DONE
=> SizeGroup "0" versus null => DONE

1/28/2013 1.0 Hour
------------------
- Refactored Views to greatly, greatly Gliding logic => DONE


1/29/2013 1.75 Hours
-------------------
- Product Colors work in progress => DONE

1/30/2013
---------
1.0 Hours

2/1/2013 1.5 Hours
------------------
=> Colors => TODO - EXECUTE DESIGN - DONE
AddColorsToProduct DONE
DeleteColorFromProduct DONE
SelectColor DONE
BIG QUESTION => how to associate Colors to Images... easily...? => DONE

2/2/2013 1.5 Hours
------------------
- TRIPLE CHECK YOUR BACKUPS, DUDE => DONE
- Finished coding Colors

2/3/2013 3.0 Hours
------------------
- Finished major refactoring of Product Screen - which was a failure: back to hard-coding => DONE

backlog cleaning
----------------
- http://fluentvalidation.codeplex.com/ => TODO
* Fix the web.config with assembly references => IN PROGRESS
- How to deal with LastUpdated field => IN PROGRESS
- Copy jqia2.support.js functions
- EntityFramework - how to perform basic CRUD stuff - Damn Brutha! => TODO
- EntityFramework Transactions and ASP.NET MVC Concurrency => TODO
- Start adding Logging stuff - you won't be sorry! => TODO
- RESEARCH a lighter-weight ORM => TODO
- TASK => cross-browser test Animation Stuff, mayhaps introduce method chaining => PENDING EVAL
- Review order of Modal Ok/Cancel => PENDING EVAL

2/4 1.5 Hours
2/5 1.0 Hours
2/6 1.75 Hours
2/7 1.0 Hours
2/8 1.5 Hours
2/9 1.0 Hours
2/10 3.0 Hours
--------------
- Upload Validation => DONE
- Add New Image optimization to List on Save => DONE
- Save Image Order Event => DONE
- Adding a New Color should Update Sort on server => DONE
- Adding a New Image should Update Sort on server => DONE
- Delete Image => DONE
- Rebuild Schema => DONE

2/11 1.0 Hours
2/12 1.0 Hours
2/13 1.5 Hours
2/14 1.5 Hours
2/15 1.5 Hours
--------------
- Fix the Delete Color Function => DONE - BUT: FIX THE MODAL TEXT => DONE
- Fix the Order on assign to Color => DONE
- Upload Image Add To List => DONE
- Delete Image Function => DONE
- Unassigned Images => DONE
- Choose Color Drop Down => DONE
- Render Images to Colors => DONE
- Fix the Color to Image Sorting => DONE
- Delete Color Repository modification => DONE
- Server method for changing Assigned => DONE

2/16
----
- Fix the Scroll Tracker - take it to the top => DONE
- Scroll Tracking on Add => DONE
- Unassign Images Button => DONE
- Assign Images to Colors Button => DONE
- Add Copy Image Method to Repository => DONE
- Change ProductColor To Belong to Product => DONE
- Fix the Thumbnail by Sort Order => DONE
=> Screen for ordering Colors & Images => DONE
- Update Product in Search after Adding & Editing=> DONE
- Start Designing Product Screen => DONE
- Product Images and Colors IsDeleted - do we need it? => DONE
* Sku's/Stock will be wiped when we delete Colors and Sizes, right? => TRUE
* Orders will still maintain the Sku Code and Description for tracing => TRUE
* So, remove IsDeleted from ProductColors? => DONE
- Product Search Add/Delete => DONE



