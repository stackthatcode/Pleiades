
User Story #1 - Hello, There!
=============================
* User arrives at site for the first time
* User starts using the site and generating Data
* The Site solicits the User for personal data to create User Account 
* All the Data generated by User during this visit is associated with that User Account
* User allows Session to time out


User Story #2 - They're Back!  And They've Got Their Creds
==========================================================
* User revisits the website
* User authenticates using Credentials
* User is able to access/retrieve data which was created during the prior vist 
* User allows Session to time out


User Story #3 - User Returns and uses Site without Authentication
=================================================================
* User with existing User Account revists the website
* User begins generating Data w/o Authenticating
* User is prompted for credentials
* User enters credentials 
* System merges Data with User's existing Data
* User is able to access New and Old Data as one consolidated whole


User Story #4 - User Without A Face
===================================
* User visits Site and creates Data
* User allows Session to terminate
* Do we care about that User's Data?  The answer is YES!


Entities / Objects
==================
* User - Users can be anonymous / authenticated ==> there are different permissions per User Type
* User Type - Anonymous, Customer, Admin
* Session - Every Session has One User
* Data - The root entity of all data types is associated with a User
* User Account -
* Engagement...?

So... What's Merging of Data...?
================================
* Update all the Data from an Anonymous User to belong to Customer User ==> That's it!


Therefore!  A Session is a Session
==================================
* TECHNICAL Q: When exactly is a Session written to the database...?
* Shopping Carts belong in the Database - Not the Session - end of story
* WHAT TO PUT IN A SESSION: Page State


How Do You Feel?
================
* A HATE the SQL EXPRESS Session Providers...
* A also HATE the SQL EXPRESS User Providers, too...
* Worried about load balancing... plus it seems like IIS can restart itself on a dime.  Feels unstable.
* They store gobbledy-gook appearing data.  What's with serialization of objects?
* How do the User Providers respond to Users that aren't yet authenticated...?  Hmmm....?  Are they Users...?  I say YES!

* ER, #1 ==> Is the MySQL Provider any better
* ER, #2 ==> Is there an out-of-process Session thingy that uses MemcacheD combined with SQL or something...?  Hmmmm...?
* ER, #3 ==> Should work with the existing interfaces defined... they're time-proven and they're also 


Furthermore
===========
* InteractionContext still makes all the sense in teh world
* Will ALWAYS have a valid User Session -- work out the structure / mechanics via TDD
* InteractionContextManager makes sure every Context has a valid User associated thereto
* User, Common Session Variables... anything else...

