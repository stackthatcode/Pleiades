Backlog Burndown
================

8/23/2012
=========
- Add Logout Button => DONE
- Test the Security Cookie/Forms Authentication stuff => DONE

8/22/2012
=========
GREAT! => Created Unit Tests for Security Plumbing => DONE
1.) Move all Pleiades.Commerce.Web => Pleiades.Commerce.AggregateUser => DONE
2.) Delete Plieades.Commerce.Web => DONE
3.) Rename Pleiades.Commerce.Initializer => Pleiades.Commerce.IntegrationPoint => DONE

8/21/2012
---------
Too much to list since last time (AGAIN!)

- Moved Commerce.Web in Framework.Web => MEGA SUCCESS(!!!)
- LAST STEP: create interfaces for PleiadesAuthorizeRule & PostbackSecurityResponder => DONE
* Test the new Attributes w/ Filter => DONE
- http://haacked.com/archive/2011/04/25/conditional-filters.aspx => DONE
=> *** HOT ZONE *** - fix the Attribute Logic and Security should be under wraps.  Add an extra State Property for Successful Authorize => DONE - IT'S CALLED SECURITY CODE

8/12/2012
---------
* Add the Repository Shim to Global something => DONE
* Fix the HomeController, and Tests => DONE
* Fix the Login Page => DONE
* Added Pleiades.Commerce.Initializer applet => DONE
* Changed Autofac Registration process =>  DONE
* Proposed a new, correct Component Integration architecture => DONE - VERY GOOD JOB, MANG!



        // Here's the rub if we go with this design!
        //
        // 1.) We need to test Model to Context translation => 
        // http://stackoverflow.com/questions/6872447/using-rhino-mocks-how-to-check-the-value-of-a-struct-field-in-the-parameter-pass
        
        // 2.) We need to test Invalid Model returns empty View
        
        // 3.) We need to test IsExecutionStateValid == false
        
        // Separate Redirect Function -- make that testable
        // 4.) We need to test IsExecutionStateValid == true - ReturnUrl != ""
        // 5.) We need to test IsExecutionStateValid == true - ReturnUrl == ""

        // PROBLEMS - building solid, testable connection between Model and Context
        // PROBLEM - step testing feels like an extra layer of translation.  This is not about encapsulation, it's
        // .. about solid testable code, man!

        // Validation Methods
        // 1.) Metadata in UI Model
        // 2.) Imperative Validation wired to UI Model
        // 3.) Execution business logic 

8/6/2012
--------
* Bounded Context Problem => SOLVED! - VERY HAPPY WITH PROGRESSIVE RESULTS :-D

8/5/2012
--------
* Fix the Security Stuff to eliminate wierd factory => DONE! - REASON VERSUS EMOTION!!!
* TONS OF WORK!!! => refactored Commerce.Web to make Authentication logic reusable across Controllers
- Fixed AccountController => DONE - SUPERB REFACTORING
- Created Account Login Execution => DONE - AGAIN, SUPERB!!!

8/2/2012
--------
- ASP.NET MVC ROUTES - MUST MASTER => ALMOST DONE - NEED A LITTLE MORE TINKERING
* Do we want /Public/Products/List to route back to / ...? => NO 
* How do we deal with ~/ ? => DONE - 
* Create a new Area for the Default stuff => DONE

7/30/2012 
---------
* Fix Route Tests => DONE
* Design Reviews of metrotwit.com and bofu2u's product => DONE

7/15/2012
---------
- SecurityCodeFilterResponder - make an interface => DONE
- Possibly create a OwnerAuthorizationContext...? => DONE
- Design Pipeline structure that supports SimpleOwnerAuthorizationStep<AggrUserAuthContext> => DONE
- Create Pipelines with Owner Authorization for Changing Passwords, etc. =>  DONE
- Pre-Executed Step...? => DONE
- OK: how do I prevent myself from shooting myself in the foot...? => DONE
- Create test DBContext for AggregateUserRepository => DONE
- Write Create User method for AggregateUserRepository => DONE
- Write Integration Tests for the AggregateUserRepository => DONE

7/8/2012
--------
- Consolidate ISecurityContext, IIdentityRequirementsContext, IIdentityUserContext => DONE!
- Implement IAggregateUserRepository => DONE
- Delete AuthorizeFilterBase - move to Commerce.Web entirely => DONE
- Write Unit Tests for GetAggregateUserFromHttpContextStep => DONE -- ANOTHER MILESTONE!

7/4/2012 - Follow-up
--------------------
- Start using IIS for development
- Isolate the Entity Framework stuff from the Membership Provider
- Create a separate assembly for Unit Testing Helpers
- Change Test Framework to NUnit => DONE
- Unit Test AuthorizeAttributeBase => DONE
- Create a separate Utilities folder => DONE
- Isolate Web Test Utilities to their own assembly => DONE
- Separate the Standard Controls from Pleiades => DONE

7/4/2012
--------
- Refactor Integration Tests for Membership w/ live configuration (CreateUser, Retreive, Update) => DONE - MILESTONE
- Again, too much to list -- near completion of the Great Refactoring #1
- Add Code First initialization stuff => DONE
- Write Integration Tests for EFRepository, DbContext, etc. => DONE


BACKLOG
=======
- Write Unit Tests for the MembershipService and/or Provider => DONE
- Add Integration Test Fixture for the EFRepository => DONE
- Write the rapid, rapid Property Comparison tool... DO IT MAN!!! => DONE
- Create framework for automatically testing Repositories with auto-property-compare => DONE

BURNDOWN
========
- Write Unit Tests for Execution namespace => DONE
- Write Unit Tests for the IdentityUser => DONE
- AND PROBABLY => eliminate the need to have Integration Tests for all things security => DONE


6/17/2012
---------
THUS FAR: 
1.) Massive, massive overhaul of the Security Model, introduced the Abstract Framework, literally TOO MUCH to list.  Great, great, job,  main!
2.) Also finished two Javascript books and am in the process of adopting Git

- Bite the bullet -- write an adapter for the MembershipService => YES - DONE
- Decouple Membership from DomainUserService => only consume MembershipService operations => DONE
- Create a IDomainUserRepository =>  DONE
- Move the AuthorizationAttribute sequence of validation into StepComposite => DONE


5/12/2012
---------
* Fix the rest of the code after major refactoring (mainly namespaces) - DONE
* Douglas Crockford's Javascript Book - DONE
* JQuery Book - DONE
- KNEE DEEP JQuery + AJAX + JSON => Learn JQuery Animation, dude! - DONE
- JQuery AJAX -> ok, "bind" to the AJAX error - http://docs.jquery.com/Ajax_Events - DONE
URGENT ==> ** Fix the latest wierd MVC bug on Edit with empty first name ** - DONE (I THINK)

3/29/2012
---------
* JQuery Selectors - half of Chapter 2
* Two weeks - Crockford book, cover-to-cover


3/11/2012
---------
* Move to GitHub => C:\Users\Aleks\Desktop\MVC+5 SRC\GitHub => DONE


3/10/2012
---------
* VERY WELL DONE, MUCHACHO!!! - Git that muthafuckin Git!
* LEARN GIT, SON! => DONE
- http://progit.org/book/ch3-6.html => DONE
- Find a decent Git GUI / Branch Visualizer => MSYSGIT IS QUITE NICE
- Visual Studio Plug-in => Git Extensions => DONE


2/27/2012
---------
Rollup in tha club n shit, like a muthafuckin G!

SIDE PROJECT - Pleiades.Web.Security
====================================
TODO: Add Fixture for creating Test Users and leaving them  => DONE
TODO: Unit Test HttpContextUserService & AuthorizeAttributeBase => DONE
TODO: Integration Test Root User, too => DONE!

** Complete Root Admin Project - with Unit Tests, etc. - DONE
-- 	Must be ROOT to change any membership for Root - DONE


2/25/2012
---------
PLEIADES SATURDAY PURGE
=======================
TODO: Make Root User credentials immutable - DONE
TODO: Unit Test DomainUserService, esp. Root/Admin Users threshhold AND Touch function => DONE

1.) Removed extract Touch methods
2.) Massive overhaul of naming
3.) Decoupled AuthAttr from Http Context User Retrieval methods
4.) Cleaned and commented numerous Html Helpers
5.) Created separate FormsAuthenticationService
6.) Root User code clean-up
7.) Completed Separation of Membership Service from Domain Service

*** OVERALL => truly refactored and clarified a lot of the SoC, esp. with the Attribute and also made the Integration Tests cleaner.  Seriously good job!!!



** EMERGENCY - ALEKSJONES.COM => renew domain...! => DONE

1/1/2012
--------
Categories Grid Burndown ==> COMPLETE.  PHENOMENAL, MAN -- GOOD JOB!
** Position Add New Button on Page - DONE
** Enable JS Event on button via Grid object - DONE
** Create Controller method - DONE
** Render the HTML in the Table - DONE
- BUG - Fix the Paging Issue - FIXED
- BUG - Empty Description - FIXED
- JavaScript Named Parmeters - IRRELEVANT
- Add Animated "highlight" effect on Validate - DONE
- Add Add button - DONE
** Add the Mouse On and Mouse Off thingies to Textboxes...? - DONE
- Highlight newly edited row - DONE
- Selected Page - DONE
- The Error Handler - DONE
- Remove "selected" class from Paging - WHA? DONE
- Add Empty Layer (click here to add a new one) - DONE
- Manage Categories Z-Index correction - DONE
- Add Grid Order By Functions; remembers which column is Order By - DONE
** Change the Active from True/False to Yes/No - DONE
- Fixed a Sorting/Paging Bug! - DONE

12/28/2011
##########
- Add Delete button, AJAX, Controller code, etc. - DONE

12/27/2011
@@@@@@@@@@

PLEIADES - AJAX VOLLEY
----------------------
- BIGGEST QUESTION - how to Edit Grid without doing it inline...? - ANSWER, DON'T DO THAT - DONE
- Design the JQuery Edit/Add Panel - DONE
- Add hidden field with Category ID - DONE
- Create Div layer with Edit which sends AJAX back to server - DONE
- Create JQuery effect for updating a table cell inline with highlighting - DONE
- WHAT DOES THIS DO? <script type="text/javascript"> $(function () { - DONE
- HOW DOES => JavaScript handle closures...? - DONE
* Centralized Error Handling - DONE

