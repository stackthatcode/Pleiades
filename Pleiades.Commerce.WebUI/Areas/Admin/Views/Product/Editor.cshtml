@using Pleiades.Web.MvcHelpers

@section _Scripts {
    @Html.Javascript("/scripts/product-service.js")
    @Html.Javascript("/scripts/color-service.js")
    @Html.Partial("_ColorPicker")
    @Html.Partial("_FineUploader")
	@Html.Partial("_ImageBundleViewer")

    <script type="text/javascript">
		// KO enabling/disabling of server JSON        
        var ProductInfoToKnockout = function(product) {
			var output = {
				Id: ko.observable(product.Id),
				Name: ko.observable(product.Name || ""),
				SEO: ko.observable(product.SEO || ""),
				SkuCode: ko.observable(product.SkuCode || ""),
				Synopsis: ko.observable(product.Synopsis || ""),
                Description: ko.observable(product.Description || ""),
                SizeGroupId: ko.observable(product.SizeGroupId),
                SizeGroupName: ko.observable(product.SizeGroupName),
                BrandId: ko.observable(product.BrandId),
                BrandName: ko.observable(product.BrandName),
                CategoryId: ko.observable(product.CategoryId),
                CategoryName: ko.observable(product.CategoryName),
                UnitPrice: ko.observable(product.UnitPrice || 0),
                UnitCost: ko.observable(product.UnitCost || 0),                
                ImageBundleExternalId: ko.observable(product.ImageBundleExternalId),
			};
            
            // TODO: figure out how to glue this together via prototypes
            output.UnitPriceFormatted = 
                ko.computed({
                    read: function () {
                        var readValue = '$' + output.UnitPrice().toFixed(2);
                        //console.log("Reading to EditUnitPrice: " + readValue);
                        return readValue;
                    },
                    write: function (value) {
                        //console.log("Writing to EditUnitPrice: " + value);
                        // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                        value = parseFloat(value.replace(/[^\.\d]/g, ""));
                        output.UnitPrice(isNaN(value) ? 0 : value); // Write to underlying storage
                        output.UnitPrice.notifySubscribers();
                    },
                    owner: output
                });

            output.UnitCostFormatted = 
                ko.computed({
                    read: function () {
                        return '$' + output.UnitCost().toFixed(2);
                    },
                    write: function (value) {
                        // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                        value = parseFloat(value.replace(/[^\.\d]/g, ""));
                        output.UnitCost(isNaN(value) ? 0 : value); // Write to underlying storage
                        output.UnitCost.notifySubscribers();
                    },
                    owner: output
                });

            return output;
		}
        
        var ProductInfoToServerJson = function(product) {
			return {
				Id: product.Id(),
				Name: product.Name(),
                SEO: product.SEO(),
                SkuCode: product.SkuCode(),
                Synopsis: product.Synopsis(),
                Description: product.Description(),
                CategoryId: product.CategoryId(),
                BrandId: product.BrandId(),
                SizeGroupId: product.SizeGroupId(),
                UnitPrice: product.UnitPrice(),
                UnitCost: product.UnitCost(),
                ImageBundleExternalId: product.ImageBundleExternalId(),
			};
		}

        var ToMoney = function(input) {
            return "$" + input.toFixed(2);
        }
	</script>
    <script type="text/javascript">
        var ProductViewModel = function (productServiceAdapter, crossCuttingUI, parentGliderWidget, childGliderWidget) {
            var self = this;

            // asynchronous, service-bound operations            
            self.EditProduct = function (product) {
                flow.exec(
					function () {
					    self.SelectedIndex = self.SearchData.indexOf(product);
					    self.ProductServiceAdapter.Info(product.Id, this);
					},
					function (product) {
					    var knockedoutData = ProductInfoToKnockout(product);
					    self.SelectedProduct(knockedoutData);
					    self.ParentGlider.GlideToChild(this);
					},
                    function () {
                        self.InfoTabClick();
                    }
				);
            }

            self.ColorsTabClick = function () {
                flow.exec(
                    function () {
                        self.ProductServiceAdapter.Colors(self.SelectedProduct().Id(), this);
                    },
                    function (colors) {
                        self.SelectedProductColors(colors);
                        self.ActiveView({ Level: "Child", Template: "Colors" });
                    }
                );
            }

            self.InfoTabClick = function () {
                self.ActiveView({ Level: "Child", Template: "Info" });
            }

            self.ImagesTabClick = function () {
                self.ActiveView({ Level: "Child", Template: "Images" });
            }

            self.AddProduct = function () {
                flow.exec(
                    function () {
                        var knockedoutData = ProductInfoToKnockout({});
                        self.SelectedProduct(knockedoutData);
                        self.ParentGlider.GlideToChild(this);
                    },
                    function () {
                        self.InfoTabClick();
                    }
                );
            }

            self.GlideToSearchView = function () {
                var recordId = self.SelectedProduct().Id();
                flow.exec(
                    function () {
                        $("#glideToParent").hide();
                        self.ParentGlider.GlideToParent(this);
                    },
					function () {
					    self.ActiveView({ Level: "Parent", Template: "Search" });
					    self.SelectedProduct(null);
					    self.SelectedIndex = null;
					    self.CrossCuttingUI.ScrollToIdTracker(recordId);
					}
				);
            }

            self.GlideToProductView = function () {
                flow.exec(
                    function () {
                        $("#glideToParent").hide();
                        self.ChildGlider.GlideToParent(this);
                    },
					function () {
					    self.ActiveView({ Level: "Child", Template: "Colors" });
					}
				);
            }

            self.RetrieveCategoriesList = function (callback) {
                flow.exec(
                    function () {
                        self.ProductServiceAdapter.Categories(this);
                    },
                    function (data) {
                        self.CategoryArray.removeAll();
                        self.CategoryArray.push({ value: null, text: "(Select a Category)" });

                        var addCategory = function (category, indent) {
                            self.CategoryArray.push({ value: category.Id, text: indent + category.Name });
                            $.each(category.Categories, function (index, elem) { addCategory(elem, indent + '....'); });
                        }
                        $.each(data, function (index, elem) { addCategory(elem, ''); });
                        if (callback) {
                            callback();
                        }
                    }
                );
            }

            self.RetrieveBrandsList = function (callback) {
                flow.exec(
                    function () {
                        self.ProductServiceAdapter.Brands(this);
                    },
                    function (data) {
                        self.BrandArray.removeAll();
                        self.BrandArray.push({ value: null, text: "(Select a Brand)" });

                        $.each(data, function (index, elem) {
                            self.BrandArray.push({ value: elem.Id, text: elem.Name });
                        });

                        if (callback) {
                            callback();
                        }
                    }
                );
            }

            self.RetrieveSizeGroupsList = function (callback) {
                flow.exec(
                    function () {
                        self.ProductServiceAdapter.SizeGroups(this);
                    },
                    function (data) {
                        self.SizeGroupArray.removeAll();
                        self.SizeGroupArray.push({ value: null, text: "(Select a Size Group)" });

                        $.each(data, function (index, elem) {
                            self.SizeGroupArray.push({ value: elem.Id, text: elem.Name });
                        });

                        if (callback) {
                            callback();
                        }
                    }
                );
            }


            self.DeleteProductColor = function (color) {
                self.ModalViewModel({ Template: "Modal-Dialog-ProductColor", Data: color });
                $('#modal-delete').modal();
            }

            self.DeleteProductColorConfirm = function () {
                var color = self.ModalViewModel().Data;
                flow.exec(
                function () {
                    $('#modal-delete').modal('hide');
                    self.ProductServiceAdapter.DeleteProductColor(self.SelectedProduct().Id(), color.Id, this);
                },
                function (data) {
                    self.SelectedProductColors.remove(color);
                    self.ModalViewModel({ Template: null });
                });
            }

            self.DeleteProduct = function (product) {
                self.ModalViewModel({ Template: "Modal-Dialog-Product", Data: product });
                $('#modal-delete').modal();
            }

            self.DeleteProductConfirm = function () {
                var record = self.ModalViewModel().Data;
                flow.exec(
                    function () {
                        $('#modal-delete').modal('hide');
                        self.ServiceAdapter.Delete(record, this);
                    },
                    function (data) {
                        self.Data.remove(function (item) { return item.Id == record.Id; });
                        self.ModalViewModel(null);
                    });
            }

            self.SearchClick = function () {
                flow.exec(
                    function () {
                        var brandId = $("#SearchBrand").val();
                        var categoryId = $("#SearchCategory").val();
                        var searchText = $("#SearchText").val();
                        self.ProductServiceAdapter.Search(brandId, categoryId, searchText, this);
                    },
                    function (data) {
                        self.SearchData(data);
                    }
                );
            }

            self.AddColorFromList = function () {
                flow.exec(
                    function () {
                        self.ProductServiceAdapter.ColorsList(this);
                    },
                    function (data) {
                        self.ColorArray(data);
                        $.each(data, function (index, elem) { elem.Selected = ko.observable(false); });
                        self.ChildGlider.GlideToChild(this);
                    },
                    function () {
                        self.ActiveView({ Level: "Sub-Child", Template: "AddColorsFromList" });
                    }
                );
            }

            self.CreateNewColor = function () {
                flow.exec(
                    function () {
                        var input = {
                            ShowUpload: ko.observable(true),
                            ImageBundleExternalId: ko.observable(null),
                            EditName: ko.observable(null),
                            EditSkuCode: ko.observable(null),
                            EditSEO: ko.observable(null),
                        };
                        self.NewColorInput(input);
                        self.ChildGlider.GlideToChild(this);
                    },
                    function () {
                        self.ActiveView({ Level: "Sub-Child", Template: "CreateColor" });
                        var fileUploader = new CommerceFileUploader(this.CrossCuttingUI, self.OnColorUpload);
                    }
                );
            }

            self.PickColorToggle = function() {
                self.NewColorInput().ShowUpload(false);
                CreateColorPicker();
            }

            self.UploadSwatchToggle = function() {
                self.NewColorInput().ShowUpload(true);
            }

            self.OnColorUpload = function(data) {
                console.log(data);
                self.NewColorInput().ImageBundleExternalId(data.ExternalId);
            }


            self.AddColorsToProduct = function () {
                var colorIdList = [];
                $.each(self.ColorArray(), function (index, elem) {
                    if (elem.Selected()) {
                        colorIdList.push(elem.Id);
                    }
                });

                var iterator = function (callback) {
                    if (colorIdList.length == 0) {
                        flow.exec(
                            function () {
                                self.ProductServiceAdapter.Colors(self.SelectedProduct().Id(), this);
                            },
                            function (colors) {
                                self.SelectedProductColors(colors);
                                self.ChildGlider.GlideToParent(this);
                            },
                            function () {
                                self.ActiveView({ Level: "Child", Template: "Colors" });
                            }
                        );
                        return;
                    }

                    var nextColorId = colorIdList.pop();
                    self.ProductServiceAdapter.AddProductColor(self.SelectedProduct().Id(), nextColorId, iterator);
                };
                iterator();
            }

            
			self.SaveColor = function() {
			    var record = self.NewColorInput();
				flow.exec(
					function() {
						if ($.trim(record.EditName()) == "" || $.trim(record.EditSEO()) == "" || 
                            $.trim(record.EditSkuCode()) == "")
                        {
                        	$("#validation").show();
							return;
						}

                        if (record.ShowUpload() == true && record.ImageBundleExternalId() == null) {
                        	$("#validation").show();
							return;
                        }

                        if (record.ShowUpload() == false) {
                            var farbtasticColor = GetSelectedColor();                
                            var color = { Rgb: farbtasticColor, Width: "150", Height: "150" };
                            self.ProductServiceAdapter.CreateBitmap(color, this);
                        }
                        else {
                            this( { ExternalId: record.ImageBundleExternalId() });
                        }
                    },
                    function(data) {
                        console.log("Image Bundle Data: " + data);
                        record.ImageBundleExternalId(data.ExternalId);
                        return;

                        var serverRecord = ColorToServerJson(record);
						self.ProductServiceAdapter.Insert(serverRecord, this);                        
					},
					function(data) {                        
                        self.GlideToParentView();
					}
				);
			}
			

            self.SelectColor = function (data) {
                data.Selected(!data.Selected());
            }

            self.SaveClick = function () {
                var product = self.SelectedProduct();
                var errors = [];
                errors.push({ controlGroup: "#ProductName", invalid: product.Name().trim() == "" });
                errors.push({ controlGroup: "#SkuCode", invalid: product.SkuCode().trim() == "" });
                errors.push({ controlGroup: "#SEO", invalid: product.SEO().trim() == "" });
                errors.push({ controlGroup: "#Synopsis", invalid: product.Synopsis().trim() == "" });
                errors.push({ controlGroup: "#Description", invalid: product.Description().trim() == "" });
                errors.push({ controlGroup: "#Brand", invalid: product.BrandId() == null });
                errors.push({ controlGroup: "#Category", invalid: product.CategoryId() == null });
                errors.push({ controlGroup: "#SizeGroup", invalid: product.SizeGroupId() == null });

                var validationMessage = $("#validation");
                validationMessage.hide();
                $.each(errors, function (index, elem) {
                    if (elem.invalid) {
                        $(elem.controlGroup).addClass("error");
                        validationMessage.show();
                    }
                    else {
                        $(elem.controlGroup).removeClass("error");
                    }
                });

                if (validationMessage.is(":visible")) {
                    return;
                }

                flow.exec(
                    function () {
                        self.ProductServiceAdapter.Update(ProductInfoToServerJson(product), this);
                    });

                // TODO: what to do here?
                //self.SearchData.replace(self.SearchData()[self.SelectedIndex], product);
            }

            // Initialization
            self.ProductServiceAdapter = productServiceAdapter;
            self.CrossCuttingUI = crossCuttingUI;
            self.ParentGlider = parentGliderWidget;
            self.ChildGlider = childGliderWidget

            // load ko.observables into view model
            self.SizeGroupArray = ko.observableArray();
            self.BrandArray = ko.observableArray();
            self.CategoryArray = ko.observableArray();
            self.ColorArray = ko.observableArray();
            self.SearchData = ko.observableArray();

            self.SelectedProduct = ko.observable(null);
            self.SelectedProductColors = ko.observableArray();
            self.SelectedImage = ko.observableArray();

            self.NewColorInput = ko.observable(null);

            self.ActiveView = ko.observable({ Level: "Parent", Template: "Search" });
            self.ModalViewModel = ko.observable({ Template: null });

            // ko.computed's
            self.SelectedProductName = ko.computed(
                function () {
                    return self.SelectedProduct() && self.SelectedProduct().SkuCode() || "(New Product)"
                }, this);

            self.GlidingContainerStyle = ko.computed(
                function () {
                    return self.ActiveView().Level == "Parent" ? "top:180px;" : "top:165px;";
                }, this);

            // Start loading...
            var log = function (data) { console.log(data); }

            self.RetrieveCategoriesList();
            self.RetrieveBrandsList();
            self.RetrieveSizeGroupsList();
        }

        $(function () {
            var crosscuttingUI = new CrossCuttingUI("#gliding-container");
            var parentGliderWidget = new GliderWidget("#gliding-container", "#parent-editor", "#child-editor");
            var chilldGliderWidget = new GliderWidget("#gliding-container", "#child-editor", "#sub-child-editor");

            var serviceAdapter = new ProductService(crosscuttingUI.Error, crosscuttingUI.ShowLoading, crosscuttingUI.HideLoading);
            var model = new ProductViewModel(serviceAdapter, crosscuttingUI, parentGliderWidget, chilldGliderWidget);
            ko.applyBindings(model);
        });
	</script>
}	

@section _Templates {
	<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE SEARCH -->
	<script type="text/html" id="Top-Workspace-Parent">
        <div class="workspace-heading" style="height:120px;">
		    <div id="heading" class="container" data-bind="ifnot: $root.SelectedProduct()">
			    <div class="row">
				    <div class="span9">
					    <h1>Products > All</h1>
				    </div>
				    <div class="span3" style="margin-top:15px; text-align:right;">
					    <a class="btn btn-primary btn-block" data-bind="click: $root.AddProduct">Add New Product <i class="icon-arrow-right icon-white"></i></a>
				    </div>
			    </div>

                <div style="height:10px;"></div>
                
                <div class="row">
				    <div class="span3">
                        <select id="SearchCategory" data-bind="foreach: $root.CategoryArray">
                            <option data-bind="value: $data.value, text: $data.text"  />
                        </select>
                    </div>
				    <div class="span3">
                        <select id="SearchBrand" data-bind="foreach: $root.BrandArray">
                            <option data-bind="value: $data.value, text: $data.text"  />
                        </select>
                    </div>
                    <div class="span3">
                        <input id="SearchText" type="text" class="input-large" placeholder="Description, Name, Sku..." />
                    </div>
				    <div class="span3">
					    <a class="btn btn-inverse btn-block" data-bind="click: $root.SearchClick">Search <i class="icon-search icon-white"></i></a>
                    </div>
                </div>
		    </div>
        </div>
    </script>
		
	<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE PRODUCT -->
	<script type="text/html" id="Top-Workspace-Child">
        <div class="workspace-heading" style="height:105px;">
		    <div id="heading" class="container" data-bind="if: $root.SelectedProduct()">
			    <div class="row" style="position:relative;">				
				    <div class="span12">
					    <h1>Products &gt; <span data-bind="text: $root.SelectedProductName"></span></h1>
				    </div>
			    </div>
                <div class="row">
                    <div class="span2">
                        <ul class="nav nav-pills">
                            <li class="active">
				                <a id="glideToParent" data-bind="click: $root.GlideToSearchView"><i class="icon-backward icon-white"></i> Back to Search</a>
                            </li>
                        </ul
                    </div>
		        </div>
		    </div>
		</div>
    </script>

	<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE COLOR-SUBVIEW -->
	<script type="text/html" id="Top-Workspace-Sub-Child">
        <div class="workspace-heading" style="height:155px;">
		    <div class="container" data-bind="if: $root.SelectedProduct()">
			    <div class="row" style="position:relative;">				
				    <div class="span12">
					    <h1>Products &gt; <span data-bind="text: $root.SelectedProductName"></span></h1>
				    </div>
			    </div>
                <div class="row">
                    <div class="span9">
                        <ul class="nav nav-pills">
                            <li class="active" style="height:30px;">
				                <a id="glideToParent" data-bind="click: $root.GlideToProductView"><i class="icon-backward icon-white"></i> Back to Product</a>
                            </li>
                        </ul
                    </div>
		        </div>
                
                <div class="row" data-bind="if: $root.ActiveView().Template == 'AddColorsFromList'">
                    <div class="span7" style="padding-left:20px;">
                        <p class="lead">Select Colors to add to your Product</p>
                    </div>

                    <div class="span5" style="text-align:right;">
					    <a class="btn btn-inverse" href="#" data-bind="click: $root.GlideToProductView"><i class="icon-remove icon-white"></i> Cancel</a>                    
					    <a class="btn btn-primary" href="#" data-bind="click: $root.AddColorsToProduct"><i class="icon-ok icon-white"></i> Add Colors</a>
                    </div>
                </div>

                <div class="row" data-bind="if: $root.ActiveView().Template == 'CreateColor'">
                    <div class="span12" style="padding-left:20px;">
                        <p class="lead">Create a Color to add to your Product</p>
                    </div>
                </div>
		    </div>
		</div>
	</script>
	
	<!-- KNOCKOUT TEMPLATE - PARENT EDITOR (SEARCH) -->
	<script type="text/html" id="Parent-Editor">
		<div style="margin-top:20px; text-align:center;" class="alert alert-info" data-bind="visible: $data.SearchData().length == 0">
			<strong>There are no Products in your current search.  Click "Search" to run a search or click "Add New Product" to create a new one.</strong>  
		</div>
		
		<table id="parent-editor-table" class="table table-hover" data-bind="visible: $data.SearchData().length > 0">
		<tbody data-bind="foreach: $data.SearchData()">
			<tr>
			<td>
				<span class="span2">
                	<div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			        </div>
                </span>
            </td>
            <td>
				<span class="span7">
					<input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					<p>
                        <h4 data-bind="text: $data.Name" style="margin-bottom:5px;"></h4>
                        <span data-bind="text: 'Sku: ' + $data.SkuCode"></span><br />
                        <span data-bind="text: 'Brand: ' + $data.BrandName"></span><br />
                        <span data-bind="text: 'Price: ' + ToMoney($data.UnitPrice)"></span>
                    </p>
				</span>
            </td>
			<td>
				<span class="span3" style="text-align:right;">					
					<a class="btn btn-primary" style="width:70px;" href="#" data-bind="click: function() { $root.DeleteProduct($data) }"><i class="icon-trash icon-white"></i> Delete</a>
					<a class="btn btn-inverse" style="width:70px;" data-bind="click: $root.EditProduct">Edit <i class="icon-arrow-right icon-white"></i></a>
				</span>
			</td>
			</tr>
		</tbody>
		</table>
	</script>
	
	<!-- KNOCKOUT TEMPLATE - CHILD EDITOR INFO TAB -->
	<script type="text/html" id="Child-Editor-Info">
        <div style="margin-top:20px">
        <form>
            <div class="row">
                <div class="span9">
                    <ul class="nav nav-pills">
                        <li class="active">
                            <a href="#">Information</a>
                        </li>
                        <li data-bind="if: $root.SelectedProduct().Id()">
                            <a href="#" data-bind="click: $root.ColorsTabClick">Colors</a>
                        </li>
                        <li data-bind="if: $root.SelectedProduct().Id()">
                            <a href="#" data-bind="click: $root.ImagesTabClick">Images</a>
                        </li>
                    </ul>
                </div>

                <div class="span3" style="text-align:right;">
					<a class="btn btn-inverse" href="#" data-bind="click: $root.GlideToSearchView"><i class="icon-remove icon-white"></i> Cancel</a>                    
					<a class="btn btn-primary" href="#" data-bind="click: $root.SaveClick"><i class="icon-ok icon-white"></i> Save</a>
                </div>
            </div>

			<div id="validation" style="text-align:center; clear:both; display:none;" class="alert alert-error">
                <strong>Please enter all the required fields.</strong>
			</div>

            <div class="row">
                <div class="span6">
                    <div class="row">
                        <div id="ProductName" class="span6 control-group">
                            <label>Product Name<br /><input class="input-large" style="width:440px;" type="text" placeholder="Enter Product Name" data-bind="value: $data.Name" maxlength="50" />
                            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div id="SkuCode" class="span3 control-group">
                            <label>SKU Code<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Sku Code" data-bind="value: $data.SkuCode" maxlength="10" />
				            </label>
                        </div>
                        <div id="SEO" class="span3 control-group">
                            <label>SEO<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter SEO Tag" data-bind="value: $data.SEO" maxlength="50" />
				            </label>
                        </div>
                    </div>

                    <div class="row">
                        <div id="Synopsis" class="span6 control-group">
                            <label>Synopsis (short desc.)<br/>
                                <textarea id="entry" type="text" class="input-large" style="width:440px;" rows="2" 
                                    placeholder="Enter Synopsis" data-bind="value: $data.Synopsis" maxlength="200" />
                            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div id="Description" class="span6 control-group">
                            <label>Description<br/>
                                <textarea id="entry" type="text" class="input-large" style="width:440px;" rows="6" 
                                    placeholder="Enter Description" data-bind="value: $data.Description" maxlength="500" />
                            </label>
                        </div>
                    </div>
                </div>

                <div class="span3">
                    <div class="row">
                        <div class="span3 control-group">
                            <label>Unit Price<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Unit Price" data-bind="value: $data.UnitPriceFormatted" maxlength="12" />
				            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="span3 control-group">
                            <label>Unit Cost<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Unit Cost" data-bind="value: $data.UnitCostFormatted" maxlength="12" />
				            </label>
                        </div>
                    </div>
                    <div class="row">
				        <div id="Brand" class="span3 control-group">
                            <label>Brand<br />
                                <select id="SelectedBrand" data-bind="options: $root.BrandArray, optionsText: 'text', optionsValue:'value', value: $data.BrandId" />
                            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div id="Category" class="span3 control-group">
                            <label>Category<br />
                                <select id="SelectedCategory" data-bind="options: $root.CategoryArray, optionsText: 'text', optionsValue:'value', value: $data.CategoryId" />
                            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div id="SizeGroup" class="span3 control-group">
                            <label>Size Group<br />
                                <select id="SelectedSizeGroup" data-bind="options: $root.SizeGroupArray, optionsText: 'text', optionsValue:'value', value: $data.SizeGroupId" />
                            </label>
                        </div>
                    </div>
                </div>
            </div>            
        </form>
        </div>
	</script>
	
	<!-- KNOCKOUT TEMPLATE - CHILD EDITOR COLORS TAB -->
    <script type="text/html" id="Child-Editor-Colors">
    <div style="margin-top:20px">
        <form>
            <div class="row">
                <div class="span7">
                    <ul class="nav nav-pills">
                        <li>
                            <a href="#" data-bind="click: $root.InfoTabClick">Information</a>
                        </li>
                        <li class="active">
                            <a href="#">Colors</a>
                        </li>
                        <li>
                            <a href="#" data-bind="click: $root.ImagesTabClick">Images</a>
                        </li>
                    </ul>
                </div>
                <div class="span5" style="text-align:right;">
					<a class="btn btn-primary" href="#" data-bind="click: $root.AddColorFromList"><i class="icon-white icon-search"></i> Add Color from Lists</a>
					<a class="btn btn-primary" href="#" data-bind="click: $root.CreateNewColor"><i class="icon-white icon-pencil"></i> Create New Color</a>
                </div>
            </div>

		    <table id="color-table" class="table table-hover">
		    <tbody data-bind="foreach: $root.SelectedProductColors()">
			    <tr>
			    <td>
				    <span class="span2">
                	    <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			            </div>
                    </span>
                </td>
                <td>
				    <span class="span7">
					    <input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					    <p><strong data-bind="text: $data.Name"></strong> - <span data-bind="text: $data.SkuCode"></span></p>
				    </span>
                </td>
			    <td>
				    <span class="span3" style="text-align:right;">					
					    <a class="btn btn-primary" style="width:70px;" href="#" data-bind="click: function() { $root.DeleteProductColor($data) }"><i class="icon-trash icon-white"></i> Delete</a>
				    </span>
			    </td>
			    </tr>
		    </tbody>
		    </table>
        </form>
    </div>
    </script>
    
    <!-- KNOCKOUT TEMPLATE - CHILD EDITOR COLORS TAB -->
    <script type="text/html" id="Sub-Child-Editor-AddColorsFromList">
    <div>
        <form>    
		    <table id="color-table" class="table table-hover" style="margin-top:50px;">
		    <tbody data-bind="foreach: $root.ColorArray()">
			    <tr>
			    <td>
				    <span class="span2">
                	    <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			            </div>
                    </span>
                </td>
                <td>
				    <span class="span7">
					    <input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					    <p><strong data-bind="text: $data.Name"></strong> - <span data-bind="text: $data.SkuCode"></span></p>
				    </span>
                </td>
			    <td>
				    <span class="span3" style="text-align:right;">					
                        <div data-bind="if: $data.Selected() == false">
					        <a class="btn btn-primary" style="width:70px;" href="#" data-bind="click: function() { $root.SelectColor($data) }">
                                <i class="icon-plus icon-white"></i> Select</a>
                        </div>
                        <div data-bind="if: $data.Selected() == true">
                            <span class="label label-info">Selected!</span>
					        <a class="btn btn-white" style="width:70px;" href="#" data-bind="click: function() { $root.SelectColor($data) }">
                                <i class="icon-minus icon-black"></i> Remove</a>
                        </div>
				    </span>
			    </td>
			    </tr>
		    </tbody>
		    </table>
        </form>
    </div>
    </script>

    <!-- KNOCKOUT TEMPLATE - CHILD EDITOR CREATE COLOR TAB -->
    <script type="text/html" id="Sub-Child-Editor-CreateColor">
        <div style="margin-top:70px" data-bind="with: $root.NewColorInput">
        <form>
			<div id="validation" style="text-align:center; clear:both; display: none;" class="alert alert-error">
                <strong>Please enter all the required fields.</strong>
			</div>

            <div class="row">
                <div class="span3">
                    <div data-bind="if: $data.ShowUpload">
                        <ul class="nav nav-pills">
                            <li class="active">
                                <a href="#">Upload Swatch</a>
                            </li>
                            <li>
                                <a href="#" data-bind="click: $root.PickColorToggle">Pick Color</a>
                            </li>
                        </ul>

                        <label>Color Swatch</label>
                        <div style="margin-bottom:20px;" data-bind="template: { name: 'Image-Bundle-Small-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId(), LightboxSuffixId: 'Child' } }">
			            </div>
			            <div style="margin-bottom:20px; margin-top:20px;" data-bind="template: { name: 'Fine-Uploader', data: $data }">
			            </div>
                    </div>

                    <div data-bind="ifnot: $data.ShowUpload">
                        <ul class="nav nav-pills">
                            <li>
                                <a href="#" data-bind="click: $root.UploadSwatchToggle">Upload Swatch</a>
                            </li>
                            <li class="active">
                                <a href="#">Pick Color</a>
                            </li>
                        </ul>

                        <div id="color-picker" data-bind="template: { name: 'Color-Picker' }"></div>    
                    </div>
                  </div>
                <div class="span9">
                    <div class="row">
                        <div class="span3">
                            <label>Color Name<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Color Name" data-bind="value: $data.EditName" maxlength="50" />
                            </label>
                        </div>
                        <div class="span3">
                            <label>SKU Code<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Sku Code" data-bind="value: $data.EditSkuCode" maxlength="6" />
				            </label>
                        </div>
                        <div class="span3">
                            <label>SEO<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter SEO Tag" data-bind="value: $data.EditSEO" maxlength="50" />
				            </label>
                        </div>
                    </div>
                </div>
                <div class="span9" style="text-align:right;">
					<a class="btn btn-inverse" href="#" data-bind="click: $root.GlideToParentView"><i class="icon-remove icon-white"></i> Cancel</a>                    
					<a class="btn btn-primary" href="#" data-bind="click: $root.SaveColor"><i class="icon-ok icon-white"></i> Save</a>
                </div>
            </div>
            
        </form>
        </div>
	</script>


    <!-- KNOCKOUT TEMPLATE - CHILD EDITOR IMAGES TAB -->
    <script type="text/html" id="Child-Editor-Images">
    <div style="margin-top:20px">
        <form>
            <div class="row">
                <div class="span8">
                    <ul class="nav nav-pills">
                        <li>
                            <a href="#" data-bind="click: $root.InfoTabClick">Information</a>
                        </li>
                        <li>
                            <a href="#" data-bind="click: $root.ColorsTabClick">Colors</a>
                        </li>
                        <li class="active">
                            <a href="#">Images</a>
                        </li>
                    </ul>
                </div>
                <div class="span4">
					<a class="btn btn-inverse" href="#" data-bind="click: $root.GlideToSearchView"><i class="icon-remove icon-white"></i> Cancel</a>                    
					<a class="btn btn-primary" href="#" data-bind="click: $root.SaveClick"><i class="icon-ok icon-white"></i> Save</a>
                </div>
            </div>
        </form>
    </div>
    </script>

	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT -->
	<script type="text/html" id="Modal-Dialog-Product">
		<div id="modal-delete" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Delete <span data-bind="text: $root.ModalViewModel().Data.Name"></span></h3>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to Delete this Product?</p>			
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteProductConfirm"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>
    </script>

	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT COLOR -->
	<script type="text/html" id="Modal-Dialog-ProductColor">
        <div id="modal-delete" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Delete <span data-bind="text: $root.ModalViewModel().Data.Name"></span></h3>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to Delete this Color from the Product?</p>			
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteProductColorConfirm"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>
	</script>
}

@section _Body {
    <div class="workspace-heading-parent" data-bind="template: { name: 'Top-Workspace-' + $root.ActiveView().Level, data: $root }">
	</div>
	
	<div id="gliding-container" class="container" data-bind="attr: { style: $root.GlidingContainerStyle }">
		<div id="parent-editor" data-bind="if: $root.ActiveView().Level == 'Parent'">
			<div style="margin-bottom:200px;" data-bind="template: { name: 'Parent-Editor', data: $root }">
			</div>
		</div>
		
		<div id="child-editor" data-bind="if: $root.ActiveView().Level == 'Child'">
			<div style="margin-bottom:200px;" data-bind="template: { name: 'Child-Editor-' + $root.ActiveView().Template, data: $root.SelectedProduct() }">
			</div>
		</div>

        <div id="sub-child-editor" data-bind="if: $root.ActiveView().Level == 'Sub-Child'">
			<div style="margin-bottom:200px;" data-bind="template: { name: 'Sub-Child-Editor-' + $root.ActiveView().Template, data: $root.SelectedProduct() }">
			</div>
		</div>
    </div>

    <div id="modal-enclave" data-bind="if: $root.ModalViewModel().Template">
        <div data-bind="template: { name: $root.ModalViewModel().Template }">
        </div>
    </div>    
}