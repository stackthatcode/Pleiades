@using Pleiades.Web.MvcHelpers

@section _Scripts {
    @Html.Javascript("/scripts/product-service.js")
    @Html.Javascript("/jquery/jquery-ui-1.10.0.custom.min.js")
    @Html.Partial("_ColorPicker")
    @Html.Partial("_FineUploader")
	@Html.Partial("_ImageBundleViewer")

    <!-- Knockout Translation scripts -->
    <script type="text/javascript">
		// KO enabling/disabling of server JSON        
        var ProductInfoToKnockout = function(product) {
			var output = {
				Id: ko.observable(product.Id),
				Name: ko.observable(product.Name || ""),
				SEO: ko.observable(product.SEO || ""),
				SkuCode: ko.observable(product.SkuCode || ""),
				Synopsis: ko.observable(product.Synopsis || ""),
                Description: ko.observable(product.Description || ""),
                BrandId: ko.observable(product.BrandId),
                BrandName: ko.observable(product.BrandName),
                CategoryId: ko.observable(product.CategoryId),
                CategoryName: ko.observable(product.CategoryName),
                UnitPrice: ko.observable(product.UnitPrice || 0),
                UnitCost: ko.observable(product.UnitCost || 0),
                AssignImagesToColors: ko.observable(product.AssignImagesToColors),             
                ImageBundleExternalId: ko.observable(product.ImageBundleExternalId),
			};
            
            // TODO: figure out how to glue this together via prototypes
            output.UnitPriceFormatted = 
                ko.computed({
                    read: function () {
                        var readValue = '$' + output.UnitPrice().toFixed(2);
                        //console.log("Reading to EditUnitPrice: " + readValue);
                        return readValue;
                    },
                    write: function (value) {
                        //console.log("Writing to EditUnitPrice: " + value);
                        // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                        value = parseFloat(value.replace(/[^\.\d]/g, ""));
                        output.UnitPrice(isNaN(value) ? 0 : value); // Write to underlying storage
                        output.UnitPrice.notifySubscribers();
                    },
                    owner: output
                });

            output.UnitCostFormatted = 
                ko.computed({
                    read: function () {
                        return '$' + output.UnitCost().toFixed(2);
                    },
                    write: function (value) {
                        // Strip out unwanted characters, parse as float, then write the raw data back to the underlying "price" observable
                        value = parseFloat(value.replace(/[^\.\d]/g, ""));
                        output.UnitCost(isNaN(value) ? 0 : value); // Write to underlying storage
                        output.UnitCost.notifySubscribers();
                    },
                    owner: output
                });

            return output;
		}
        
        var ProductInfoToServerJson = function(product) {
			return {
				Id: product.Id(),
				Name: product.Name(),
                SEO: product.SEO(),
                SkuCode: product.SkuCode(),
                Synopsis: product.Synopsis(),
                Description: product.Description(),
                CategoryId: product.CategoryId(),
                BrandId: product.BrandId(),
                UnitPrice: product.UnitPrice(),
                UnitCost: product.UnitCost(),
                ImageBundleExternalId: product.ImageBundleExternalId(),
                AssignImagesToColors: product.AssignImagesToColors(),
			};
		}
	</script>    
    <!-- Images View Model -->
    <script type="text/javascript">
        var AddImageFunctions = function (rootModel) {
            var self = rootModel;

            self.SelectedColorsWithImages = ko.observableArray();
            self.SelectedProductImages = ko.observableArray();
            self.SelectedProductColorForImage = ko.observable();             
            self.NewImageInput = ko.observable();

            self.ProductColorWithImagesById = function(id) {
                for (i = 0; i < self.SelectedColorsWithImages().length; i++) {
                    var color = self.SelectedColorsWithImages()[i];
                    if (color.Id == id) {
                        return color;
                    }
                }
            }

            self.ImagesTabClick = function () {                
                if (self.SelectedProduct().AssignImagesToColors()) {
                    flow.exec(
                        function() { 
                            self.ProductService.Colors(self.SelectedProduct().Id(), this);
                        },
                        function (colorJson) {
                            $.each(colorJson, function(index, elem) { 
                                elem.Images = ko.observableArray();
                            });

                            self.SelectedColorsWithImages(colorJson);

                            var unassignedColor = { Id: 0, Name: "Unassigned", Images: ko.observableArray() };
                            self.SelectedColorsWithImages().unshift(unassignedColor);
                            self.ProductService.Images(self.SelectedProduct().Id(), this);
                        },
                        function (imagesJson) {                            
                            $.each(imagesJson, function(index, elem) {
                                color = self.ProductColorWithImagesById(elem.ProductColorId);
                                color.Images.push(elem);
                            });

                            self.RemoveAssignedColorAsNeeded();
                            self.ActiveView({ Level: "Child", Template: "Images" });
                            self.MakeImagesSortable();
                        }
                    );
                } else {
                    flow.exec(
                        function() { 
                            self.ProductService.Images(self.SelectedProduct().Id(), this);
                        },
                        function (images) {
                            self.SelectedProductImages(images);
                            self.ActiveView({ Level: "Child", Template: "Images" });
                            self.MakeImagesSortable();
                        }
                    );
                }
            }

            self.RemoveAssignedColorAsNeeded = function() {
                var index = self.SelectedColorsWithImages().arrayFirstIndexOf(function(x) { return x.Id == 0; });
                if (index == -1) {
                    return;
                }
                var unassignedColor = self.SelectedColorsWithImages()[index];
                if (!unassignedColor.Images().length) {
                    self.SelectedColorsWithImages.remove(unassignedColor);
                }
            }

            self.MakeImagesSortable = function () {
                $(".colorDrop").droppable({
                    drop: function( event, ui ) {
                        var colorDropElem = $(event.srcElement).closest("table.colorDrop");
                        if (colorDropElem.length == 0) {
                            console.log("missed drop!");
                            console.log(event.srcElement);
                            return;
                        }                        
                        originalColorId = colorDropElem.attr("id").replace('color', '');
                        var newColorId = event.target.id.replace("color", "");
                        var imageId = $(event.srcElement).closest("li").attr("id").replace("sorted", "");
                        console.log("originalColorId: " + originalColorId + " " + " newColorId: " + newColorId + " imageId: " + imageId);
                        self.UpdateImageToColorAssignment(originalColorId, newColorId, imageId);
                    }
                });

                $.each($(".sortable"), function(index, elem) {
                    $(elem).sortable({
                        placeholder: "ui-state-highlight",
                        update: function() { 
                            self.UpdateImageSortOrder(elem) 
                        },
                        distance: 5,
                    }).disableSelection();
                });
            }

            self.UpdateImageToColorAssignment = function(originalColorId, newColorId, imageId) { 
                if (originalColorId == newColorId) {
                    return;
                }
                
                flow.exec(
                    function() {
                        self.ProductService.ChangeImageColor(self.SelectedProduct().Id(), imageId, newColorId, this);
                    },
                    function() {
                        var newColor = self.ProductColorWithImagesById(newColorId);
                        var originalColor = self.ProductColorWithImagesById(originalColorId);
                        var index = originalColor.Images().arrayFirstIndexOf(function(x) { return x.Id == imageId; });
                        var image = originalColor.Images()[index];
                        originalColor.Images.remove(image);
                        newColor.Images.push(image);
                        self.RemoveAssignedColorAsNeeded()
                    }
                );
            }
            
            self.UpdateImageSortOrder = function (element) {
                var sortOutput = [];
                var sortedElements = $(element).find    ("li");
                $.each(sortedElements, function (index, elem) { 
                    sortOutput.push($(elem).attr('id').replace('sorted', '')); 
                });

                var sortedIds = sortOutput.join(",");
                console.log("DOM Ids: " + sortedIds);
                self.ProductService.UpdateImageOrder(self.SelectedProduct().Id(), sortedIds);

                // Update the Knockout model
                var myColorId = $(element).closest("table.colorDrop").attr("id").replace('color', '');
                var color = self.ProductColorWithImagesById(myColorId);
                
                var newImageArray = [];
                $.each(sortOutput, function (index, elem) {
                    var index = color.Images().arrayFirstIndexOf(function(x) { return x.Id == elem; });
                    var image = color.Images()[index];
                    newImageArray.push(image);
                });

                color.Images.removeAll();
                color.Images(newImageArray);
            };

            self.GlideBackToImages = function (callback) {
                flow.exec(
                    function () {
                        $("#glideToParent").hide();
                        self.ChildGlider.GlideToParent(this);
                    },
					function () {
					    self.ActiveView({ Level: "Child", Template: "Images" });
                        self.MakeImagesSortable();
                        if (callback) {
                            callback();
                        }
					}
				);
            }

            self.DeleteProductImage = function(image) {
                flow.exec(
                    function () {
                        self.ProductService.DeleteProductImage(self.SelectedProduct().Id(), image.Id, this);
                    },
                    function (data) {
                        console.log(image);
                        if (self.SelectedProduct().AssignImagesToColors()) {
                            var color = self.ProductColorWithImagesById(image.ProductColorId);
                            color.Images.remove(image);
                        } else {
                            self.SelectedProductImages.remove(image);
                        }
                    }
                );
            };

            self.AddNewImageForColor = function(data) {
                self.SelectedProductColorForImage(data);
                self.SlideToImageUpload();
            };

            self.AddNewImage = function () {
                self.SelectedProductColorForImage(null);
                self.SlideToImageUpload();
            };

            self.SlideToImageUpload = function() {
                flow.exec(
                    function () {
                        var input = {
                            ImageBundleExternalId: ko.observable(null),
                            Description: ko.observable(null),
                        };
                        self.NewImageInput(input);
                        self.ChildGlider.GlideToChild(this);
                    },
                    function () {
                        self.ActiveView({ Level: "Sub-Child", Template: "AddImage" });
                        var fileUploader = new CommerceFileUploader(this.CommonUI, self.OnImageUpload);
                    }
                );
            }

            self.SaveImage = function () {
                var newImage = self.NewImageInput();
                if (!newImage.ImageBundleExternalId()) {
                    $("#validation").show();
                    return;
                }

                var input = {
                    ImageBundleExternalId: newImage.ImageBundleExternalId(),
                    Description: newImage.Description(),
                };

                if (self.SelectedProductColorForImage()) {
                    input.ProductColorId = self.SelectedProductColorForImage().Id;
                }

                flow.exec(
                    function() {
                        self.ProductService.AddProductImage(self.SelectedProduct().Id(), input, this);
                    },
                    function(data) {
                        // Move it into the color
                        var newId = data.Id;
                        if (self.SelectedProductColorForImage()) {
                            self.SelectedProductColorForImage().Images.push(data);
                        } else {
                            self.SelectedProductImages().push(data);
                        }
                        self.GlideBackToImages(function() {
                            self.CommonUI.ScrollToTracker("sorted" + newId);
                        });
                    }
                );
            }
            
            self.OnImageUpload = function(data) {
                console.log(data);
                self.NewImageInput().ImageBundleExternalId(data.ExternalId);
            }

            self.AssignImagesToColorClick = function() {
                flow.exec(
                    function () {
                        var id = self.SelectedProduct().Id();
                        self.ProductService.AssignImagesToColor(id, this);                        
                    },
                    function () { 
                        self.SelectedColorsWithImages.removeAll();
                        self.SelectedProductImages.removeAll();
                        self.SelectedProduct().AssignImagesToColors(true);
                        self.ImagesTabClick();
                    }
                );
            };
            
            self.UnassignImagesFromColorClick = function() {
                flow.exec(
                    function () {
                        var id = self.SelectedProduct().Id();
                        self.ProductService.UnassignImagesFromColor(id, this);
                    },
                    function () { 
                        self.SelectedColorsWithImages.removeAll();
                        self.SelectedProductImages.removeAll();
                        self.SelectedProduct().AssignImagesToColors(false);
                        self.ImagesTabClick();
                    }
                );
            };
        }
    </script>
    <!-- Color View Model -->
    <script type="text/javascript">
        var AddColorFunctions = function (rootModel) {
            var self = rootModel;
            self.SelectedProductColors = ko.observableArray();
            self.NewColorInput = ko.observable(null);
            self.ColorArray = ko.observableArray();
            
            self.SlideToColorList = function () {
                flow.exec(
                    function () {
                        self.ProductService.ColorsList(this);
                    },
                    function (data) {
                        self.ColorArray(data);
                        $.each(data, function (index, elem) { elem.Selected = ko.observable(false); });
                        self.ChildGlider.GlideToChild(this);
                    },
                    function () {
                        self.ActiveView({ Level: "Sub-Child", Template: "AddColorsFromList" });
                    }
                );
            }

            self.SlideToCreateNewColor = function () {
                flow.exec(
                    function () {
                        var input = {
                            ShowUpload: ko.observable(true),
                            ImageBundleExternalId: ko.observable(null),
                            EditName: ko.observable(null),
                            EditSkuCode: ko.observable(null),
                            EditSEO: ko.observable(null),
                        };
                        self.NewColorInput(input);
                        self.ChildGlider.GlideToChild(this);
                    },
                    function () {
                        self.ActiveView({ Level: "Sub-Child", Template: "CreateColor" });
                        var fileUploader = new CommerceFileUploader(this.CommonUI, self.OnColorUpload);
                    }
                );
            }
            
            self.PickColorToggle = function() {
                self.NewColorInput().ShowUpload(false);
                CreateColorPicker();
            }

            self.UploadSwatchToggle = function() {
                self.NewColorInput().ShowUpload(true);
            }

            self.OnColorUpload = function(data) {
                console.log(data);
                self.NewColorInput().ImageBundleExternalId(data.ExternalId);
            }

            self.AddColorsToProductClick = function () {
                self.ColorInventoryCheck(self.AddColorsToProductAction);
            }

            self.AddColorsToProductAction = function () {
                $('#modal-dialog').modal('hide');
                
                var colorIdList = [];
                $.each(self.ColorArray(), function (index, elem) {
                    if (elem.Selected()) {
                        colorIdList.push(elem.Id);
                    }
                });

                var iterator = function () {
                    if (colorIdList.length == 0) {
                        self.GlideBackToColorsTabWithRefresh();
                        return;
                    }

                    var nextColorId = colorIdList.pop();
                    self.ProductService.AddProductColor(self.SelectedProduct().Id(), nextColorId, iterator);
                };
                iterator();
            }
            
            // If there is Inventory, and this is the first Color, it will wipe the Inventory
            self.ColorInventoryCheck = function(action) {
                flow.exec(
                    function() {
                         self.ProductService.InventoryTotal(self.SelectedProduct().Id(), this);
                    },
                    function(inventoryTotal) {
                        if (self.SelectedProductColors().length == 0 && inventoryTotal.Total > 0) {
                            self.ShowAddColorsInventoryDialog(action);
                        } else {
                            action();
                        }
                    }
                );
            };
            
            self.ShowAddColorsInventoryDialog = function (action) {
                self.ModalViewModel({ Action: action, Template: "Modal-Dialog-ProductColorInventory" });
                $('#modal-dialog').modal('show');
            }

            self.SaveColorClick = function () {
                var colorInput = self.NewColorInput();
                if ($.trim(colorInput.EditName()) == "" || $.trim(colorInput.EditSEO()) == "" || 
                    $.trim(colorInput.EditSkuCode()) == "")
                {
                    $("#validation").show();
					return;
				}

                if (colorInput.ShowUpload() == true && colorInput.ImageBundleExternalId() == null) {
                    $("#validation").show();
					return;
                }

                self.ColorInventoryCheck(self.SaveColorAction);
            }

			self.SaveColorAction = function() {
			    $('#modal-dialog').modal('hide');
				var colorInput = self.NewColorInput();
                flow.exec(
					function() {                        
                        if (colorInput.ShowUpload() == false) {
                            var farbtasticColor = GetSelectedColor();                
                            var createColorJson = { Rgb: farbtasticColor, Width: "150", Height: "150" };
                            self.ProductService.CreateBitmap(createColorJson, this);
                        }
                        else {
                            this( { ExternalId: colorInput.ImageBundleExternalId() });
                        }
                    },
                    function(data) {
                        console.log("Image Bundle Data: " + data);
                        colorInput.ImageBundleExternalId(data.ExternalId);

                        // Next, create a Color
                        var serverRecord = {
                            Name: colorInput.EditName(),
                            SkuCode: colorInput.EditSkuCode(),
                            SEO: colorInput.EditSEO(),
                            ImageBundleExternalId: data.ExternalId, 
                        };

						self.ProductService.AddColorToColorList(serverRecord, this);                        
					},
					function(data) {
                        self.ProductService.AddProductColor(self.SelectedProduct().Id(), data.Id, this);
                    },
					function() {
                        self.GlideBackToColorsTabWithRefresh();
                    }
				);
			}			

            self.SelectColor = function (data) {
                data.Selected(!data.Selected());
            }
            
            self.DeleteProductColor = function (color) {
                self.ModalViewModel({ Template: "Modal-Dialog-ProductColor", Data: color });
                $('#modal-delete').modal();
            }

            self.DeleteProductColorConfirm = function () {
                var color = self.ModalViewModel().Data;
                flow.exec(
                    function () {
                        $('#modal-delete').modal('hide');
                        self.ProductService.DeleteProductColor(self.SelectedProduct().Id(), color.Id, this);
                    },
                    function (data) {
                        self.SelectedProductColors.remove(color);
                        self.ModalViewModel({ Template: null });
                    }
                );
            }
            
            self.ColorsTabClick = function () {
                flow.exec(
                    function () {
                        self.ProductService.Colors(self.SelectedProduct().Id(), this);
                    },
                    function (colors) {
                        self.SelectedProductColors(colors);
                        self.ActiveView({ Level: "Child", Template: "Colors" });
                        self.MakeColorsSortable();
                    }
                );
            }

            self.MakeColorsSortable = function () {
                $(".sortable").sortable({
                    placeholder: "ui-state-highlight",
                    update: self.UpdateColorSortOrder,
                    delay: 300
                });
                $(".sortable").disableSelection();
            }

            self.UpdateColorSortOrder = function () {
                var sortOutput = [];
                $.each($("#colors > div"), function (index, elem) { 
                    sortOutput.push($(elem).attr('id').replace('sorted', '')); 
                });
                var sortedIds = sortOutput.join(",");
                self.ProductService.UpdateColorOrder(self.SelectedProduct().Id(), sortedIds);
            };

            

            self.GlideBackToColorsTabWithRefresh = function(callback) {
                flow.exec(
                    function () {
                        self.ProductService.Colors(self.SelectedProduct().Id(), this);
                    },
                    function (colors) {
                        self.SelectedProductColors(colors);
                        self.ChildGlider.GlideToParent(this);
                    },
                    function () {
                        self.ActiveView({ Level: "Child", Template: "Colors" });
                        self.MakeColorsSortable();
                        if (callback) {
                            callback();
                        }
                    }
                );
            }
            
            self.GlideBackToColors = function () {
                flow.exec(
                    function () {
                        $("#glideToParent").hide();
                        self.ChildGlider.GlideToParent(this);
                    },
					function () {
					    self.ActiveView({ Level: "Child", Template: "Colors" });
                        self.MakeColorsSortable();
					}
				);
            }
        }
	</script>
    <!-- Size View Model -->
    <script type="text/javascript">
        var AddSizeFunctions = function (rootModel) {
            var self = rootModel;
            self.SelectedProductSizes = ko.observableArray();
            self.SizeReferenceData = ko.observableArray();
            self.NewSizeInput = ko.observable(null);
            
            self.AddSizeFromList = function () {
                flow.exec(
                    function () {
                        self.ProductService.SizeGroups(this);
                    },
                    function (data) {
                        self.SizeReferenceData(data);
                        
                        $.each(data, function (index, elem) { 
                            $.each(elem.Sizes, function (index, subElem) {
                                subElem.Selected = ko.observable(false); 
                            });
                        });
                        self.ChildGlider.GlideToChild(this);
                    },
                    function () {
                        self.ActiveView({ Level: "Sub-Child", Template: "AddSizesFromList" });

                    }
                );
            }

            self.CreateNewSize = function () {
                var input = {
                    EditAbbreviation: ko.observable(null),
                    EditName: ko.observable(null),
                    EditSkuCode: ko.observable(null),
                };
                self.NewSizeInput(input);                
            }
            
            self.CancelCreateNewSize = function () {
                self.NewSizeInput(null);
            }
            
            self.GlideBackToSizesTabWithRefresh = function(callback) {
                flow.exec(
                    function () {
                        self.ProductService.Sizes(self.SelectedProduct().Id(), this);
                    },
                    function (sizes) {
                        self.SelectedProductSizes(sizes);
                        self.ChildGlider.GlideToParent(this);
                    },
                    function () {
                        self.ActiveView({ Level: "Child", Template: "Sizes" });
                        self.MakeSizesSortable();
                        if (callback) {
                            callback();
                        }
                    }
                );
            }
            
            self.GlideBackToSizes = function () {
                flow.exec(
                    function () {
                        $("#glideToParent").hide();
                        self.ChildGlider.GlideToParent(this);
                    },
					function () {
					    self.ActiveView({ Level: "Child", Template: "Sizes" });
                        self.MakeColorsSortable();
					}
				);
            }
                        
            // If there is Inventory, and this is the first Size, it will wipe the Inventory
            self.SizeInventoryCheck = function(action) {
                flow.exec(
                    function() {
                         self.ProductService.InventoryTotal(self.SelectedProduct().Id(), this);
                    },
                    function(inventoryTotal) {
                        if (self.SelectedProductSizes().length == 0 && inventoryTotal.Total > 0) {
                            self.ShowAddSizesInventoryDialog(action);
                        } else {
                            action();
                        }
                    }
                );
            };
            
            self.ShowAddSizesInventoryDialog = function (action) {
                self.ModalViewModel({ Action: action, Template: "Modal-Dialog-ProductSizeInventory" });
                $('#modal-dialog').modal('show');
            }
            
            self.AddSizesToProductClick = function () {
                self.SizeInventoryCheck(self.AddSizesToProductAction);
            }

            self.AddSizesToProductAction = function () {   
                $('#modal-dialog').modal('hide');             
                var sizeIdList = [];
                $.each(self.SizeReferenceData(), function (index, elem) {
                    $.each(elem.Sizes, function (index, subElem) {
                        if (subElem.Selected()) {
                            sizeIdList.push(subElem.Id);
                        }
                    });
                });

                var callback = (self.SelectedProductSizes().length == 0) ? self.ShowAddSizesDialog : null;
                
                var iterator = function () {
                    if (sizeIdList.length == 0) {
                        self.GlideBackToSizesTabWithRefresh(callback);
                        return;
                    }

                    var nextSizeId = sizeIdList.shift();
                    self.ProductService.AddProductSize(self.SelectedProduct().Id(), nextSizeId, iterator);
                };
                iterator();
            }

            self.DeleteProductSize = function (size) {
                self.ModalViewModel({ Template: "Modal-Dialog-ProductSize", Data: size });
                $('#modal-delete').modal();
            }

            self.DeleteProductSizeConfirm = function () {
                var size = self.ModalViewModel().Data;
                flow.exec(
                    function () {
                        $('#modal-delete').modal('hide');
                        self.ProductService.DeleteProductSize(self.SelectedProduct().Id(), size.Id, this);
                    },
                    function () {
                        self.SelectedProductSizes.remove(size);
                        self.ModalViewModel({ Template: null });
                    }
                );
            }
            
            self.SizesTabClick = function () {
                flow.exec(
                    function () {
                        self.ProductService.Sizes(self.SelectedProduct().Id(), this);
                    },
                    function (sizes) {
                        self.SelectedProductSizes(sizes);
                        self.ActiveView({ Level: "Child", Template: "Sizes" });
                        self.MakeSizesSortable();
                    }
                );
            }

            self.MakeSizesSortable = function () {
                $(".sortable").sortable({
                    placeholder: "ui-state-highlight",
                    update: self.UpdateSizeSortOrder,
                    delay: 300
                });
                $(".sortable").disableSelection();
            }

            self.UpdateSizeSortOrder = function () {
                var sortOutput = [];
                $.each($("#sizes > div"), function (index, elem) { 
                    sortOutput.push($(elem).attr('id').replace('sorted', '')); 
                });
                var sortedIds = sortOutput.join(",");
                self.ProductService.UpdateSizeOrder(self.SelectedProduct().Id(), sortedIds);
            };
        }
	</script>
    <!-- List Model -->
    <script type="text/javascript">
        var AddListModel = function (rootModel) {
            var self = rootModel;
            self.BrandArray = ko.observableArray();
            self.CategoryArray = ko.observableArray();
            
            self.RetrieveCategoriesList = function (callback) {
                flow.exec(
                    function () {
                        self.ProductService.Categories(this);
                    },
                    function (data) {
                        self.CategoryArray.removeAll();
                        self.CategoryArray.push({ value: null, text: "(Select a Category)" });

                        var addCategory = function (category, indent) {
                            self.CategoryArray.push({ value: category.Id, text: indent + category.Name });
                            $.each(category.Categories, function (index, elem) { addCategory(elem, indent + '....'); });
                        }
                        $.each(data, function (index, elem) { addCategory(elem, ''); });
                        if (callback) {
                            callback();
                        }
                    }
                );
            }

            self.RetrieveBrandsList = function (callback) {
                flow.exec(
                    function () {
                        self.ProductService.Brands(this);
                    },
                    function (data) {
                        self.BrandArray.removeAll();
                        self.BrandArray.push({ value: null, text: "(Select a Brand)" });

                        $.each(data, function (index, elem) {
                            self.BrandArray.push({ value: elem.Id, text: elem.Name });
                        });

                        if (callback) {
                            callback();
                        }
                    }
                );
            }

        }
    </script>
    <!-- Search View Model -->
    <script type="text/javascript">
        var AddSearchFunctions = function (rootModel) {
            var self = rootModel;

            // asynchronous, service-bound operations            
            self.EditProduct = function (product) {
                flow.exec(
					function () {
					    self.SelectedIndex = self.SearchData.indexOf(product);
					    self.ProductService.Info(product.Id, this);
					},
					function (product) {
					    var knockedoutData = ProductInfoToKnockout(product);
					    self.SelectedProduct(knockedoutData);
					    self.ParentGlider.GlideToChild(this);
					},
                    function () {
                        self.InfoTabClick();
                    }
				);
            }

            self.AddProduct = function () {
                flow.exec(
                    function () {
                        var knockedoutData = ProductInfoToKnockout({});
                        self.SelectedProduct(knockedoutData);
                        self.ParentGlider.GlideToChild(this);
                    },
                    function () {
                        self.InfoTabClick();
                    }
                );
            }

            self.SearchClick = function () {
                flow.exec(
                    function () {
                        var brandId = $("#SearchBrand").val();
                        var categoryId = $("#SearchCategory").val();
                        var searchText = $("#SearchText").val();
                        self.ProductService.Search(brandId, categoryId, searchText, this);
                    },
                    function (data) {
                        self.SearchData(data);
                    }
                );
            }

            self.InfoTabClick = function () {
                self.ActiveView({ Level: "Child", Template: "Info" });
            }

            self.GlideToSearchView = function () {
                var recordId = self.SelectedProduct().Id();
                flow.exec(
                    function () {
                        $("#glideToParent").hide();
                        if (recordId) {
                            self.ProductService.Info(recordId, this);
                        } else {
                            this();
                        }
                    },
                    function (data) {
                        if (data) {
                            var index = self.SearchData().arrayFirstIndexOf(function (x) { return x.Id == recordId; });
                            if (index == -1) {
                                self.SearchData.unshift(data);
                            } else {
                                self.SearchData.replace(self.SearchData()[index], data);
                            }
                        }
                        self.ParentGlider.GlideToParent(this);
                    },
					function () {
					    self.ActiveView({ Level: "Parent", Template: "Search" });
					    self.SelectedProduct(null);
					    self.SelectedIndex = null;
					    self.CommonUI.ScrollToIdTracker(recordId);
					}
				);
            }

            self.DeleteProduct = function (product) {
                self.ModalViewModel({ Template: "Modal-Dialog-Product", Data: product });
                $('#modal-delete').modal();
            }

            self.DeleteProductConfirm = function () {
                var record = self.ModalViewModel().Data;
                flow.exec(
                    function () {
                        $('#modal-delete').modal('hide');
                        self.ProductService.Delete(record.Id, this);
                    },
                    function (data) {
                        self.SearchData.remove(record); //function (item) { return item.Id == record.Id; });
                        self.ModalViewModel({ Data: null, Template: null });
                    });
            }

            self.SaveClick = function () {
                var product = self.SelectedProduct();
                var errors = [];
                errors.push({ controlGroup: "#ProductName", invalid: product.Name().trim() == "" });
                errors.push({ controlGroup: "#SkuCode", invalid: product.SkuCode().trim() == "" });
                errors.push({ controlGroup: "#SEO", invalid: product.SEO().trim() == "" });
                errors.push({ controlGroup: "#Synopsis", invalid: product.Synopsis().trim() == "" });
                errors.push({ controlGroup: "#Description", invalid: product.Description().trim() == "" });
                errors.push({ controlGroup: "#Brand", invalid: product.BrandId() == null });
                errors.push({ controlGroup: "#Category", invalid: product.CategoryId() == null });

                var validationMessage = $("#validation");
                validationMessage.hide();
                $.each(errors, function (index, elem) {
                    if (elem.invalid) {
                        $(elem.controlGroup).addClass("error");
                        validationMessage.show();
                    }
                    else {
                        $(elem.controlGroup).removeClass("error");
                    }
                });

                if (validationMessage.is(":visible")) {
                    return;
                }

                flow.exec(
                    function () {
                        self.ProductService.Save(ProductInfoToServerJson(product), this);
                    },
                    function (product) {
                        var knockedoutData = ProductInfoToKnockout(product);
                        self.SelectedProduct(knockedoutData);
                    }
                );
            }

            return self;
        }
    </script> 
    <!-- Inventory View Model -->
    <script type="text/javascript">
        var AddInventoryFunctions = function (rootModel) {
            var self = rootModel;

            self.SelectedProductInventory = ko.observableArray();
            self.SelectedSku = ko.observable(null);

            self.InventoryTabClick = function () {
                flow.exec(
                    function () {
                        self.ProductService.Inventory(self.SelectedProduct().Id(), this);
                    },
                    function (inventory) {
                        self.SelectedProductInventory(inventory);
                        self.ActiveView({ Level: "Child", Template: "Inventory" });
                    }
                );
            }

            self.InventoryEditClick = function (data) {
                self.SelectedSku(data);
            }

            self.InventoryCancelClick = function (data) {
                self.SelectedSku(null);
            }

            self.InventorySaveClick = function (data) {
                self.SelectedSku(null);
            }
        }
    </script>
    <!-- Root View Model -->
    <script type="text/javascript">
        var RootModel = function () {
            var self = this;

            self.ActiveView = ko.observable({ Level: "Parent", Template: "Search" });
            self.ModalViewModel = ko.observable({ Data: null, Template: null });

            self.CommonUI = new CommonUI("#gliding-container");
            self.ParentGlider = new GliderWidget("#gliding-container", "#parent-editor", "#child-editor");
            self.ChildGlider = new GliderWidget("#gliding-container", "#child-editor", "#sub-child-editor");
            self.ProductService = new ProductService(self.CommonUI.Error, self.CommonUI.ShowLoading, self.CommonUI.HideLoading);

            AddSearchFunctions(self);
            AddListModel(self);
            AddColorFunctions(self);
            AddImageFunctions(self);
            AddSizeFunctions(self);
            AddInventoryFunctions(self);

            self.RetrieveCategoriesList();
            self.RetrieveBrandsList();
            self.SearchData = ko.observableArray();

            // Move these to the Product View Model
            self.SelectedProduct = ko.observable(null);
            self.SelectedProductName = ko.computed(
                function () {
                    return self.SelectedProduct() && self.SelectedProduct().Name() && self.SelectedProduct().Name().koTrunc(50, true) || "(New Product)"
                }, this);
        }

        var rootModel;
        $(function () {
            rootModel = new RootModel();
            ko.applyBindings(rootModel);
        });
    </script>
}

@section _Templates {
	<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE SEARCH -->
	<script type="text/html" id="Top-Workspace-Parent">
        <div class="workspace-heading" style="height:125px;">
		    <div id="heading" class="container">
			    <div class="row">
				    <div class="span9">
					    <h1>Products > Search</h1>
				    </div>
				    <div class="span3" style="margin-top:15px; text-align:right;">
					    <a class="btn btn-primary btn-block" data-bind="click: $root.AddProduct">Add New Product <i class="icon-arrow-right icon-white"></i></a>
				    </div>
			    </div>

                <div style="height:20px;"></div>
                
                <div class="row">
				    <div class="span3">
                        <select id="SearchCategory" data-bind="foreach: $data.CategoryArray">
                            <option data-bind="value: $data.value, text: $data.text"  />
                        </select>
                    </div>
				    <div class="span3">
                        <select id="SearchBrand" data-bind="foreach: $data.BrandArray">
                            <option data-bind="value: $data.value, text: $data.text"  />
                        </select>
                    </div>
                    <div class="span3">
                        <input id="SearchText" type="text" class="input-large" placeholder="Description, Name, Sku..." />
                    </div>
				    <div class="span3">
					    <a class="btn btn-inverse btn-block" data-bind="click: $data.SearchClick">Search <i class="icon-search icon-white"></i></a>
                    </div>
                </div>
		    </div>
        </div>
    </script>
	<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE PRODUCT -->
	<script type="text/html" id="Top-Workspace-Child">
        <div class="workspace-heading" style="height:125px;">
		    <div id="heading" class="container" data-bind="if: $root.SelectedProduct()">
			    <div class="row" style="position:relative;">				
				    <div class="span12">
					    <h1>Products &gt; <span data-bind="text: $root.SelectedProductName"></span></h1>
				    </div>
			    </div>
                
                <div style="height:20px;"></div>
                
                <div class="row">
                    <div class="span7" style="height:48px;">
                        <ul class="nav nav-pills">
                            <li style="width:140px;">
				                <a id="glideToParent" class="backbutton" data-bind="click: $root.GlideToSearchView">&laquo; Back to Search</a>
                                &nbsp;
                            </li>
                            
                            <li data-bind="if: $root.ActiveView().Template == 'Info'" class="active">
                                <a href="#">Info</a>
                            </li>
                            <li data-bind="if: $root.ActiveView().Template != 'Info'">
                                <a href="#" data-bind="click: $root.InfoTabClick">Info</a>
                            </li>

                            <!-- ko if: $root.SelectedProduct().Id() -->
                            <li data-bind="if: $root.ActiveView().Template == 'Colors'" class="active">
                                <a href="#">Colors</a>
                            </li>
                            <li data-bind="if: $root.ActiveView().Template != 'Colors'">
                                <a href="#" data-bind="click: $root.ColorsTabClick">Colors</a>
                            </li>

                            <li data-bind="if: $root.ActiveView().Template == 'Images'" class="active">
                                <a href="#">Images</a>
                            </li>
                            <li data-bind="if: $root.ActiveView().Template != 'Images'">
                                <a href="#" data-bind="click: $root.ImagesTabClick">Images</a>
                            </li>
                                                        
                            <li data-bind="if: $root.ActiveView().Template == 'Sizes'" class="active">
                                <a href="#">Sizes</a>
                            </li>
                            <li data-bind="if: $root.ActiveView().Template != 'Sizes'">
                                <a href="#" data-bind="click: $root.SizesTabClick">Sizes</a>
                            </li>

                            <li data-bind="if: $root.ActiveView().Template == 'Inventory'" class="active">
                                <a href="#">Inventory</a>
                            </li>
                            <li data-bind="if: $root.ActiveView().Template != 'Inventory'">
                                <a href="#" data-bind="click: $root.InventoryTabClick">Inventory</a>
                            </li>
                            <!-- /ko -->
                        </ul>
                    </div>

                    <div class="span5" style="text-align:right;" data-bind="if: $root.ActiveView().Template == 'Info'">
					    <a class="btn btn-inverse" href="#" data-bind="click: $root.GlideToSearchView"><i class="icon-remove icon-white"></i> Cancel</a>                    
					    <a class="btn btn-primary" href="#" data-bind="click: $root.SaveClick"><i class="icon-ok icon-white"></i> Save</a>
                    </div>

                    <div class="span5" style="text-align:right;" data-bind="if: $root.ActiveView().Template == 'Colors'">
					    <a class="btn btn-primary" href="#" data-bind="click: $root.SlideToColorList"><i class="icon-white icon-search"></i> Add Color from Lists</a>
					    <a class="btn btn-primary" href="#" data-bind="click: $root.SlideToCreateNewColor"><i class="icon-white icon-pencil"></i> Create New Color</a>
                    </div>

                    <div class="span5" style="text-align:right;" data-bind="if: $root.ActiveView().Template == 'Images'">				        
                        <!-- ko ifnot: $root.SelectedProduct().AssignImagesToColors() -->
				        <a class="btn btn-primary" href="#" data-bind="click: $root.AddNewImage"><i class="icon-plus icon-white"></i> Add Image</a>
                        <a class="btn btn-primary" href="#" data-bind="click: $root.AssignImagesToColorClick"><i class="icon-white icon-share"></i> Assign Images To Colors</a>
                        <!-- /ko -->

                        <!-- ko if: $root.SelectedProduct().AssignImagesToColors() -->
				        <a class="btn btn-primary" href="#" data-bind="click: $root.UnassignImagesFromColorClick"><i class="icon-white icon-ban-circle"></i> Don't Assign Images To Colors</a>
                        <!-- /ko -->
                    </div>
                    
                    <div class="span5" style="text-align:right;" data-bind="if: $root.ActiveView().Template == 'Sizes'">
					    <a class="btn btn-primary" href="#" data-bind="click: $root.AddSizeFromList"><i class="icon-white icon-search"></i> Add Size from Lists</a>
                    </div>
		        </div>
		    </div>
		</div>
    </script>
	<!-- KNOCKOUT TEMPLATE - TOP WORKSPACE COLOR-SUBVIEW -->
	<script type="text/html" id="Top-Workspace-Sub-Child">
        <div class="workspace-heading" style="height:125px;">
		    <div class="container" data-bind="if: $root.SelectedProduct()">
			    <div class="row" style="position:relative;">				
				    <div class="span12">
					    <h1>Products &gt; <span data-bind="text: $root.SelectedProductName"></span></h1>
				    </div>
			    </div>
                
                <div style="height:20px;"></div>

                <!-- ko if: $root.ActiveView().Template == 'AddImage' -->
                <div class="row">
                    <div class="span2">
                        <ul class="nav nav-pills">
                            <li style="width:140px;">
				                <a id="glideToParent" data-bind="click: $root.GlideBackToImages">&laquo; Back to Product</a>
                                &nbsp;
                            </li>
                        </ul>
                    </div>
                    <div class="span7" style="padding-left:20px;">
                        <p class="lead" style="color:#999;">Upload an Image of your Product</p>
                    </div>
                </div>
                <!-- /ko -->

                <!-- ko if: $root.ActiveView().Template == 'AddColorsFromList' -->
                <div class="row">
                     <div class="span2">
                        <ul class="nav nav-pills">
                            <li style="width:140px;">
				                <a id="glideToParent" data-bind="click: $root.GlideBackToColors">&laquo; Back to Product</a>
                                &nbsp;
                            </li>
                        </ul>
                    </div>
                    <div class="span5">
                        <p class="lead" style="color:#999;">Select Colors to add to your Product</p>
                    </div>
                    <div class="span5" style="text-align:right;">
					    <a class="btn btn-inverse" href="#" data-bind="click: $root.GlideBackToColors"><i class="icon-remove icon-white"></i> Cancel</a>                    
					    <a class="btn btn-primary" href="#" data-bind="click: $root.AddColorsToProductClick"><i class="icon-ok icon-white"></i> Add Colors</a>
                    </div>
                </div>
                <!-- /ko -->

                <!-- ko if: $root.ActiveView().Template == 'AddSizesFromList' -->
                <div class="row">
                     <div class="span2">
                        <ul class="nav nav-pills">
                            <li style="width:140px;">
				                <a id="glideToParent" data-bind="click: $root.GlideBackToSizes">&laquo; Back to Product</a>
                                &nbsp;
                            </li>
                        </ul>
                    </div>
                    <div class="span5">
                        <p class="lead" style="color:#999;">Select Sizes to add to your Product</p>
                    </div>
                    <div class="span5" style="text-align:right;">
					    <a class="btn btn-inverse" href="#" data-bind="click: $root.GlideBackToSizes"><i class="icon-remove icon-white"></i> Cancel</a>                    
					    <a class="btn btn-primary" href="#" data-bind="click: $root.AddSizesToProductClick"><i class="icon-ok icon-white"></i> Add Sizes</a>
                    </div>
                </div>
                <!-- /ko -->


                <!-- ko if: $root.ActiveView().Template == 'CreateColor' -->
                <div class="row">
                    <div class="span2">
                        <ul class="nav nav-pills">
                            <li style="width:140px;">
				                <a id="glideToParent" data-bind="click: $root.GlideBackToColors">&laquo; Back to Product</a>
                                &nbsp;
                            </li>
                        </ul>
                    </div>                    
                    <div class="span5">
                        <p class="lead" style="color:#999;">Create a Color to add to your Product</p>
                    </div>
                </div>
                <!-- /ko -->

		    </div>
		</div>
	</script>
    
    <!-- KNOCKOUT TEMPLATE - PARENT EDITOR SEARCH -->
	<script type="text/html" id="Parent-Editor-Search">
		<div style="margin-top:30px; text-align:center;" class="alert alert-info" data-bind="visible: $root.SearchData().length == 0">
			<strong>There are no Products in your current search.  Click "Search" to run a search or click "Add New Product" to create a new one.</strong>  
		</div>
		
		<table id="parent-editor-table" class="table table-hover" data-bind="visible: $root.SearchData().length > 0">
		<tbody data-bind="foreach: $root.SearchData()">
			<tr>
			<td>
				<span class="span2">
                	<div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			        </div>
                </span>
            </td>
            <td>
				<span class="span7">
					<input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					<p>
                        <h4 data-bind="text: $data.Name" style="margin-bottom:5px;"></h4>
                        <span data-bind="text: 'Sku: ' + $data.SkuCode"></span><br />
                        <span data-bind="text: 'Brand: ' + $data.BrandName"></span><br />
                        <span data-bind="text: 'Price: ' + ToMoney($data.UnitPrice)"></span>
                    </p>
				</span>
            </td>
			<td>
				<span class="span3" style="text-align:right;">					
					<a class="btn btn-primary" style="width:70px;" href="#" data-bind="click: function() { $parent.DeleteProduct($data) }"><i class="icon-trash icon-white"></i> Delete</a>
					<a class="btn btn-inverse" style="width:70px;" data-bind="click: $parent.EditProduct">Edit <i class="icon-arrow-right icon-white"></i></a>
				</span>
			</td>
			</tr>
		</tbody>
		</table>
	</script>
	
    <!-- KNOCKOUT TEMPLATE - CHILD EDITOR INFO TAB -->
	<script type="text/html" id="Child-Editor-Info">
        <div style="margin-top:20px;" data-bind="with: $root.SelectedProduct()">
        <form>
			<div id="validation" style="text-align:center; clear:both; display:none;" class="alert alert-error">
                <strong>Please enter all the required fields.</strong>
			</div>

            <div class="row">
                <div class="span6">
                    <div class="row">
                        <div id="ProductName" class="span6 control-group">
                            <label>Product Name<br /><input class="input-large" style="width:440px;" type="text" placeholder="Enter Product Name" data-bind="value: $data.Name" maxlength="50" />
                            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div id="SkuCode" class="span3 control-group">
                            <label>SKU Code<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Sku Code" data-bind="value: $data.SkuCode" maxlength="10" />
				            </label>
                        </div>
                        <div id="SEO" class="span3 control-group">
                            <label>SEO<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter SEO Tag" data-bind="value: $data.SEO" maxlength="50" />
				            </label>
                        </div>
                    </div>

                    <div class="row">
                        <div id="Synopsis" class="span6 control-group">
                            <label>Synopsis (short desc.)<br/>
                                <textarea id="entry" type="text" class="input-large" style="width:440px;" rows="2" 
                                    placeholder="Enter Synopsis" data-bind="value: $data.Synopsis" maxlength="200" />
                            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div id="Description" class="span6 control-group">
                            <label>Description<br/>
                                <textarea id="entry" type="text" class="input-large" style="width:440px;" rows="6" 
                                    placeholder="Enter Description" data-bind="value: $data.Description" maxlength="500" />
                            </label>
                        </div>
                    </div>
                </div>

                <div class="span3">
                    <div class="row">
                        <div class="span3 control-group">
                            <label>Unit Price<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Unit Price" data-bind="value: $data.UnitPriceFormatted" maxlength="12" />
				            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="span3 control-group">
                            <label>Unit Cost<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Unit Cost" data-bind="value: $data.UnitCostFormatted" maxlength="12" />
				            </label>
                        </div>
                    </div>
                    <div class="row">
				        <div id="Brand" class="span3 control-group">
                            <label>Brand<br />
                                <select id="SelectedBrand" data-bind="options: $root.BrandArray, optionsText: 'text', optionsValue:'value', value: $data.BrandId" />
                            </label>
                        </div>
                    </div>
                    <div class="row">
                        <div id="Category" class="span3 control-group">
                            <label>Category<br />
                                <select id="SelectedCategory" data-bind="options: $root.CategoryArray, optionsText: 'text', optionsValue:'value', value: $data.CategoryId" />
                            </label>
                        </div>
                    </div>
                </div>
            </div>            
        </form>
        </div>
	</script>

	<!-- KNOCKOUT TEMPLATE - CHILD EDITOR COLORS TAB -->
    <script type="text/html" id="Child-Editor-Colors">
    <div style="margin-top:0px;">
        <form>
            <div style="margin-top:30px; text-align:center;" class="alert alert-info" data-bind="visible: $root.SelectedProductColors().length == 0">
			    <strong>There are no Colors for this Product.  Add a Color from the existing list, or Create a new one.</strong>  
		    </div>
		    
            <div id="colors" class="sortable" data-bind="foreach: $root.SelectedProductColors()">
                <div class="draggable" data-bind="attr: { id: 'sorted' + $data.Id }">
		        <table class="table table-hover" style="margin-bottom:0px;">
		            <tbody>
			            <tr>
			            <td>
				            <span class="span2">
                	            <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			                    </div>
                            </span>
                        </td>
                        <td>
				            <span class="span5">
					            <input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					            <p><strong data-bind="text: $data.Name"></strong> - <span data-bind="text: $data.SkuCode"></span></p>
				            </span>
                        </td>
			            <td>
				            <span class="span5" style="text-align:right;">
                                <a href="#" class="btn btn-inverse disabled"><i class="icon-screenshot icon-white"></i> Drag Me!</a>
					            <a class="btn btn-primary" style="width:70px;" href="#" data-bind="click: function() { $root.DeleteProductColor($data) }"><i class="icon-trash icon-white"></i> Delete</a>
				            </span>
			            </td>
			            </tr>
		            </tbody>
		        </table>
                </div>
            </div>
        </form>
    </div>
    </script>
    <!-- KNOCKOUT TEMPLATE - CHILD EDITOR COLORS TAB - ADD FROM LIST SUB -->
    <script type="text/html" id="Sub-Child-Editor-AddColorsFromList">
    <div>
        <form>
            <div style="margin-top:30px; text-align:center;" class="alert alert-info" data-bind="visible: $root.ColorArray().length == 0">
			    <strong>There are no pre-defined Colors.  Go to Lists &gt; Color to add pre-defined Colors.</strong>  
		    </div>

		    <table id="color-table" class="table table-hover">
		    <tbody data-bind="foreach: $root.ColorArray()">
			    <tr>
			    <td>
				    <span class="span2">
                	    <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			            </div>
                    </span>
                </td>
                <td>
				    <span class="span7">
					    <input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					    <p><strong data-bind="text: $data.Name"></strong> - <span data-bind="text: $data.SkuCode"></span></p>
				    </span>
                </td>
			    <td>
				    <span class="span3" style="text-align:right;">					
                        <div data-bind="if: $data.Selected() == false">
					        <a class="btn btn-primary" style="width:70px;" href="#" data-bind="click: function() { $root.SelectColor($data) }">
                                <i class="icon-plus icon-white"></i> Select</a>
                        </div>
                        <div data-bind="if: $data.Selected() == true">
                            <span class="label label-info">Selected!</span>
					        <a class="btn btn-white" style="width:70px;" href="#" data-bind="click: function() { $root.SelectColor($data) }">
                                <i class="icon-minus icon-black"></i> Remove</a>
                        </div>
				    </span>
			    </td>
			    </tr>
		    </tbody>
		    </table>
        </form>
    </div>
    </script>
    <!-- KNOCKOUT TEMPLATE - CHILD EDITOR COLORS TAB - CREATE SUB -->
    <script type="text/html" id="Sub-Child-Editor-CreateColor">
        <div data-bind="with: $root.NewColorInput">
        <form>
            <div style="height:20px;"></div>

			<div id="validation" style="text-align:center; clear:both; display: none;" class="alert alert-error">
                <strong>Please enter all the required fields.</strong>
			</div>

            <div class="row">
                <div class="span3">
                    <div data-bind="if: $data.ShowUpload">
                        <ul class="nav nav-pills">
                            <li class="active">
                                <a href="#">Upload Swatch</a>
                            </li>
                            <li>
                                <a href="#" data-bind="click: $root.PickColorToggle">Pick Color</a>
                            </li>
                        </ul>

                        <label>Color Swatch</label>
                        <div style="margin-bottom:20px;" data-bind="template: { name: 'Image-Bundle-Small-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId(), LightboxSuffixId: 'Child' } }">
			            </div>
			            <div style="margin-bottom:20px; margin-top:20px;" data-bind="template: { name: 'Fine-Uploader', data: $data }">
			            </div>
                    </div>

                    <div data-bind="ifnot: $data.ShowUpload">
                        <ul class="nav nav-pills">
                            <li>
                                <a href="#" data-bind="click: $root.UploadSwatchToggle">Upload Swatch</a>
                            </li>
                            <li class="active">
                                <a href="#">Pick Color</a>
                            </li>
                        </ul>

                        <div id="color-picker" data-bind="template: { name: 'Color-Picker' }"></div>    
                    </div>
                  </div>
                <div class="span9">
                    <div class="row">
                        <div class="span3">
                            <label>Color Name<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Color Name" data-bind="value: $data.EditName" maxlength="50" />
                            </label>
                        </div>
                        <div class="span3">
                            <label>SKU Code<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter Sku Code" data-bind="value: $data.EditSkuCode" maxlength="6" />
				            </label>
                        </div>
                        <div class="span3">
                            <label>SEO<br /><input class="input-large" style="width:200px;" type="text" placeholder="Enter SEO Tag" data-bind="value: $data.EditSEO" maxlength="50" />
				            </label>
                        </div>
                    </div>
                </div>
                <div class="span9" style="text-align:right;">
					<a class="btn btn-inverse" href="#" data-bind="click: $root.GlideBackToColors"><i class="icon-remove icon-white"></i> Cancel</a>                    
					<a class="btn btn-primary" href="#" data-bind="click: $root.SaveColorClick"><i class="icon-ok icon-white"></i> Save</a>
                </div>
            </div>
            
        </form>
        </div>
	</script>
    
	<!-- KNOCKOUT TEMPLATE - CHILD EDITOR SIZES TAB -->
    <script type="text/html" id="Child-Editor-Sizes">
    <div style="margin-top:0px;">
        <form>
            <div style="margin-top:30px; text-align:center;" class="alert alert-info" data-bind="visible: $root.SelectedProductSizes().length == 0">
			    <strong>There are no Sizes for this Product.  Add a Size from the existing list.</strong>  
		    </div>

            <div id="sizes" class="sortable" data-bind="foreach: $root.SelectedProductSizes()">
                <div class="draggable" data-bind="attr: { id: 'sorted' + $data.Id }">
		        <table class="table table-hover" style="margin-bottom:0px;">
		            <tbody>
			            <tr>
			            <td>
				            <span class="span7">
					            <input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					            <h4><span data-bind="text: $data.Name"></span></h4>
                                <p>Abbreviation: <span data-bind="text: $data.Abbr"></span>                                
                                - Sku Code: <span data-bind="text: $data.SkuCode"></span>
                                </p>
				            </span>
                        </td>
			            <td>
				            <span class="span5" style="text-align:right;">
                                <a href="#" class="btn btn-inverse disabled"><i class="icon-screenshot icon-white"></i> Drag Me!</a>
					            <a class="btn btn-primary" style="width:70px;" href="#" 
                                    data-bind="click: function() { $root.DeleteProductSize($data) }"><i class="icon-trash icon-white"></i> Delete</a>
				            </span>
			            </td>
			            </tr>
		            </tbody>
		        </table>
                </div>
            </div>
        </form>
    </div>
    </script>
	<!-- KNOCKOUT TEMPLATE - CHILD EDITOR SIZES - ADD SIZE SUB -->
    <script type="text/html" id="Sub-Child-Editor-AddSizesFromList">
        <form>
            <div style="margin-top:30px; text-align:center;" class="alert alert-info" data-bind="visible: $root.SizeReferenceData().length == 0">
			    <strong>There are no Size Groups.  Go to Lists &gt; Sizes to add pre-defined Sizes.</strong>  
		    </div>
		    
		    <table class="table table-hover" data-bind="visible: $root.SizeReferenceData().length > 0">
		    <tbody data-bind="foreach: $root.SizeReferenceData()">
			    <tr>
                    <td colspan="2">
				        <span class="span12">
					        <input type="hidden" data-bind="attr: { id: 'tracker' + $data.Id }" />
					        <h4 data-bind="text: $data.Name"></h4>			    
				        </span>
                    </td>
                </tr>
                <!-- ko foreach: $data.Sizes-->
                <tr>
                    <td>
				        <span class="span8" style="padding-left:40px;">
						   <h4>&raquo; <span data-bind="text: Description"></span></h4>
                           <span>Abbreviation:</span> <span data-bind="text: Name"></span> - 
                           <span>Sku Code:</span> <span data-bind="text: SkuCode"></span>
				        </span>
                    </td>
                    
                    <td>
                       <span class="span4" style="text-align:right;">					
                        <div data-bind="if: $data.Selected() == false">
					        <a class="btn btn-primary" style="width:70px;" href="#" data-bind="click: function() { $root.SelectColor($data) }">
                                <i class="icon-plus icon-white"></i> Select</a>
                        </div>
                        <div data-bind="if: $data.Selected() == true">
                            <span class="label label-info">Selected!</span>
					        <a class="btn btn-white" style="width:70px;" href="#" data-bind="click: function() { $root.SelectColor($data) }">
                                <i class="icon-minus icon-black"></i> Remove</a>
                        </div>
				    </span>
                    </td>
                </tr>
                <!-- /ko -->
            </tbody>
            </table>
        </form>
	</script>

    <!-- KNOCKOUT TEMPLATE - CHILD EDITOR IMAGES TAB -->
    <script type="text/html" id="Child-Editor-Images">
    <div data-bind="if: $root.SelectedProduct().AssignImagesToColors">
        <!-- ko foreach: $root.SelectedColorsWithImages() -->
        <div>
        <table class="table-hover colorDrop" data-bind="attr: { id: 'color' + $data.Id }">
            <tr>
                <td valign="top" style="padding-top:20px;">
                    <div style="width:712px;">
                        <div data-bind="ifnot: $data.Images().length">
                            <h2 style="text-align:center; padding-top:50px; color:#CCC;">No Images For This Color</h2>
                        </div>

                        <ul class="sortable" data-bind="attr: { id: 'images' + $data.Id }, foreach: $data.Images()">
                            <li data-bind="attr: { id: 'sorted' + $data.Id }">
                                <div style="width:160px; padding-bottom:5px;" 
                                    data-bind="template: { name: 'Image-Bundle-Small-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
                                </div>
                                <a href="#" style="width:55px;" class="btn btn-inverse btn-small disabled"><i class="icon-screenshot icon-white"></i> Drag!</a>
                                <a class="btn btn-primary btn-small" style="width:55px;" href="#" data-bind="click: function() { $root.DeleteProductImage($data) }"><i class="icon-trash icon-white"></i> Delete</a>			
                            </li>
                        </ul>
                    </div>
                </td>
                <td valign="top" style="width:220px; text-align:left; vertical-align:top; padding-top:20px; padding-right:20px; height:200px;">
                    <div data-bind="if: $data.Name == 'Unassigned'">
				        <p><strong>No Color</strong></p>
                        <h5>Drag Images from this Region to assign them to a Color and make them visible.</h5>
                    </div>
                    <div data-bind="ifnot: $data.Name == 'Unassigned'">
                        <div style="width:80px; margin-bottom:5px;" data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			            </div>
				        <p>
                            <strong data-bind="text: $data.Name"></strong > - <span data-bind="text: $data.SkuCode"></span>
                        </p>
                    </div>
                    <div data-bind="ifnot: $data.Name == 'Unassigned'">           
                        <a class="btn btn-primary" href="#" data-bind="click: $root.AddNewImageForColor"><i class="icon-plus icon-white"></i> Add Image</a>
                    </div>
                    <div style="clear:both; height:30px;"></div>
                </td>
            </tr>
        </table>
        </div>
        <!-- /ko -->

        <div style="display:block; margin-bottom:200px; clear:both;">
        </div>
    </div>

    <div data-bind="ifnot: $root.SelectedProduct().AssignImagesToColors" style="margin-top:20px;">
        <ul class="sortable" data-bind="foreach: $root.SelectedProductImages()">
            <li data-bind="attr: { id: 'sorted' + $data.Id }">
                <div style="width:160px; padding-bottom:5px;" data-bind="template: { name: 'Image-Bundle-Small-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
                </div>
                <a href="#" style="width:55px;" class="btn btn-inverse btn-small disabled"><i class="icon-screenshot icon-white"></i> Drag!</a>
                <a class="btn btn-primary btn-small" style="width:55px;" href="#" data-bind="click: function() { $root.DeleteProductImage($data) }"><i class="icon-trash icon-white"></i> Delete</a>			
            </li>
        </ul>
        <div style="display:block; margin-bottom:200px; clear:both;">
        </div>
    </div>
    </script>
    <!-- KNOCKOUT TEMPLATE - CHILD EDITOR IMAGES - ADD IMAGE SUB-->
    <script type="text/html" id="Sub-Child-Editor-AddImage">
        <div style="height:20px;"></div>

        <div data-bind="with: $root.NewImageInput">
        <form>
			<div id="validation" style="text-align:center; clear:both; display: none;" class="alert alert-error">
                <strong>Please Upload an Image.</strong>
			</div>

            <div class="row">
                <div class="span3">
                    <div style="margin-bottom:20px;" data-bind="template: { name: 'Image-Bundle-Small-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId(), LightboxSuffixId: 'Child' } }">
			        </div>
			        <div style="margin-bottom:20px; margin-top:20px;" data-bind="template: { name: 'Fine-Uploader', data: $data }">
			        </div>
                </div>
                <div class="span9">
                    <div class="row">
                        <div class="span6">
                            <label>Image Description<br /><input class="input-large" style="width:300px;" type="text" placeholder="Enter Image Description" data-bind="value: $data.Description" maxlength="100" />
                            </label>
                        </div>
                        <div class="span3">
					        <a class="btn btn-inverse" href="#" data-bind="click: $root.GlideBackToImages"><i class="icon-remove icon-white"></i> Cancel</a>                    
					        <a class="btn btn-primary" href="#" data-bind="click: $root.SaveImage"><i class="icon-ok icon-white"></i> Save</a>
                        </div>
                    </div>
                    <div class="row" data-bind="if: $root.SelectedProductColorForImage()">
                        <div class="span6">
                        </div>
                        <div class="span3">
                            <!-- ko if:  $root.SelectedProductColorForImage().Id -->
                                <label>Assigned Color<br />
                                <div style="width:80px; margin-bottom:5px;" 
                                    data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $root.SelectedProductColorForImage().ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			                    </div>
				                <p>
                                    <strong data-bind="text: $root.SelectedProductColorForImage().Name"></strong > - 
                                    <span data-bind="text: $root.SelectedProductColorForImage().SkuCode"></span>
                                </p>
                                </label>
                            <!-- /ko -->
                            <!-- ko ifnot:  $root.SelectedProductColorForImage().Id -->
                                <label>Assigned Color<br />
                                <p>
                                    <strong>No Color Assigned</strong>
                                </p>
                                </label>
                            <!-- /ko -->
                        </div>
                    </div>
                </div>
            </div>            
        </form>
        </div>
	</script>

    <!-- KNOCKOUT TEMPLATE - INVENTORY -->
	<script type="text/html" id="Child-Editor-Inventory">
        <div id="inventory" data-bind="foreach: $root.SelectedProductInventory()">
		    <table class="table table-hover" style="margin-bottom:0px;" data-bind="if: $data == $root.SelectedSku()">
		        <tbody>
			        <tr>
			        <td valign="top">
				        <span class="span4">
                            <h4 style="float:left; height:24px;">Sku Code </h4><input class="input-large" style="width:180px; margin-top:4px; margin-left:5px;" type="text" placeholder="Enter Sku Code" data-bind="value: $data.SkuCode" maxlength="20" />
                            <p style="color:#999; font-size:11px; line-height:15px; clear:both;">Original Sku Code: <span data-bind="text: $data.OriginalSkuCode"></span><br/>
                                Name: <span data-bind="text: $data.Name"></span></p>
				        </span>
                    </td>
			        <td style="vertical-align:top;">
				        <span class="span5">
					        <h4 style="height:24px; float:left;">In Stock </h4><input class="input-large" style="width:50px; margin:4px 0px 0px 5px;" type="text" placeholder="Enter Sku Code" data-bind="value: $data.TotalInventory" maxlength="5" />
                            <div style="clear:both;"></div>
                            <span style="color:#999; font-weight:bold;">Reserved: <span data-bind="text: $data.ReservedInventory"></span></span>
				        </span>
                    </td>
			        <td>
				        <span class="span3" style="text-align:right;">
                            <a class="btn btn-inverse" style="width:70px;" data-bind="click: $root.InventoryCancelClick" href="#"><i class="icon-remove icon-white"></i> Cancel</a>
                            <a class="btn btn-primary" style="width:70px;" data-bind="click: $root.InventorySaveClick" href="#"><i class="icon-ok icon-white"></i> Save</a>
				        </span>
			        </td>
			        </tr>
		        </tbody>
		    </table>

		    <table class="table table-hover" style="margin-bottom:0px;" data-bind="click: $root.InventoryEditClick, ifnot: $data == $root.SelectedSku()">
		        <tbody>
			        <tr>
			        <td valign="top">
				        <span class="span4">
					        <h4 style="height:24px;">Sku Code: <span data-bind="text: $data.SkuCode"></span></h4>
                            <p style="color:#999; font-size:11px; line-height:15px; clear:both;">Original Sku Code: <span data-bind="text: $data.OriginalSkuCode"></span><br/>
                                Name: <span data-bind="text: $data.Name"></span></p>
				        </span>
                    </td>
			        <td style="vertical-align:top">
				        <span class="span5">
					        <h4 style="height:24px;">In Stock: <span data-bind="text: $data.TotalInventory"></span></h4>
                            <span style="color:#999; font-weight:bold;">Reserved: <span data-bind="text: $data.ReservedInventory"></span></span>
				        </span>
                    </td>
			        <td>
				        <span class="span3" style="text-align:right;">Touch to Edit</span>
			        </td>
			        </tr>
		        </tbody>
		    </table>
        </div>
    </script>

	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT -->
	<script type="text/html" id="Modal-Dialog-Product">
		<div id="modal-delete" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Delete <span data-bind="text: $root.ModalViewModel().Data.Name"></span></h3>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to Delete this Product?</p>			
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteProductConfirm"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>
    </script>
	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT COLOR -->
	<script type="text/html" id="Modal-Dialog-ProductColor">
        <div id="modal-delete" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Delete <span data-bind="text: $root.ModalViewModel().Data.Name"></span></h3>
			</div>
			<div class="modal-body">
				<p>
                    <strong>Are you sure you want to Delete this Color from the Product?</strong>
                </p>			
				<p>
				    Any Inventory associated with this Color will be Deleted.
                </p>			
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteProductColorConfirm"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>
	</script>
	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT COLOR -->
	<script type="text/html" id="Modal-Dialog-ProductSize">
        <div id="modal-delete" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Delete <span data-bind="text: $root.ModalViewModel().Data.Name"></span></h3>
			</div>
			<div class="modal-body">
				<p>
                    <strong>Are you sure you want to Delete this Size from the Product?</strong>
                </p>			
				<p>
				    Any Inventory associated with this Size will be Deleted.
                </p>			
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteProductSizeConfirm"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>
	</script>
	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT ADD SIZE -->
	<script type="text/html" id="Modal-Dialog-ProductSizeInventory">
        <div id="modal-dialog" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Add Sizes to Product</h3>
			</div>
			<div class="modal-body">
				<p><strong>You will now be tracking Sizes in Inventory.</strong></p>
                <p>Old Inventory without Size will be destroyed.  Please update your Inventory</p>
			</div>
			<div class="modal-footer">    
                <a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.ModalViewModel().Action"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>
	</script>
	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG PRODUCT ADD COLOR -->
	<script type="text/html" id="Modal-Dialog-ProductColorInventory">
        <div id="modal-dialog" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Add Color to Product</h3>
			</div>
			<div class="modal-body">
				<p><strong>You will now be tracking Colors in Inventory.</strong></p>
                <p>Old Inventory without Colors will be destroyed.  Please update your Inventory.</p>
			</div>
			<div class="modal-footer">
                <a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.ModalViewModel().Action"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>
	</script>
}

@section _Body {
    <div class="workspace-heading-parent" data-bind="template: { name: 'Top-Workspace-' + $root.ActiveView().Level }">
	</div>
    
	<div id="gliding-container" class="container" style="top:185px;">
    	<div id="parent-editor" data-bind="if: $root.ActiveView().Level == 'Parent'">
			<div style="margin-bottom:100px;" data-bind="template: { name: 'Parent-Editor-' + $root.ActiveView().Template }">
			</div>
		</div>		
		<div id="child-editor" data-bind="if: $root.ActiveView().Level == 'Child'">
			<div style="margin-bottom:100px;" data-bind="template: { name: 'Child-Editor-' + $root.ActiveView().Template  }">
			</div>
		</div>
        <div id="sub-child-editor" data-bind="if: $root.ActiveView().Level == 'Sub-Child'">
			<div style="margin-bottom:100px;" data-bind="template: { name: 'Sub-Child-Editor-' + $root.ActiveView().Template }">
			</div>
		</div>
    </div>

    <div id="modal-enclave" data-bind="if: $root.ModalViewModel().Template">
        <div data-bind="template: { name: $root.ModalViewModel().Template }">
        </div>
    </div>    
}