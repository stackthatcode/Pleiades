@using Pleiades.Web.MvcHelpers

@section _Scripts {   
	@Html.Partial("_ImageBundleViewer")
    
    <script type="text/javascript">
		// KO enabling/disabling of server JSON
        var SectionToKnockout = function(section) {
			return {
				Id: ko.observable(section.Id),
            };
        }

		var SectionToServerJson = function(section) {
			return {
			    Id: section.Id(),
			};
		};
    </script>
    <!-- Endless Glider -->
    <script type="text/javascript">
        var EndlessGlider = function (container, divId1, divId2) {
            var self = this;

            self.Glider1 = new GliderWidget(container, divId1, divId2);
            self.Glider2 = new GliderWidget(container, divId2, divId1);

            self.WorkspaceTemplate = ko.observable(null);
            self.EditorTemplate1 = ko.observable(null);
            self.EditorTemplate2 = ko.observable(null);
            self.ActiveEditor = null;

            self.Init = function (workspaceTemplate, editorTemplate) {
                self.ActiveEditor = 1;
                self.WorkspaceTemplate(workspaceTemplate);
                self.EditorTemplate1(editorTemplate);
                $("#divId2").hide();
            }

            self.GlideToRight = function (workspaceTemplate, editorTemplate) {
                self.Glide(workspaceTemplate, editorTemplate, "RIGHT");
            }

            self.GlideToLeft = function (workspaceTemplate, editorTemplate) {
                self.Glide(workspaceTemplate, editorTemplate, "LEFT");
            }

            self.Glide = function (workspaceTemplate, editorTemplate, direction) {
                var activeGlider = self.ActiveEditor == 1 ? self.Glider1 : self.Glider2;
                var nextEditorTemplate = self.ActiveEditor == 1 ? self.EditorTemplate2 : self.EditorTemplate1;

                flow.exec(
                    function () {
                        if (direction == "LEFT") {
                            activeGlider.GlideToParent(this);
                        } else {
                            activeGlider.GlideToChild(this);
                        }
                    },
                    function () {
                        self.ActiveEditor = self.ActiveEditor == 1 ? 2 : 1;
                        nextEditorTemplate(editorTemplate);
                        self.WorkspaceTemplate(workspaceTemplate);
                    }
                );
            }
        }
    </script>
    <!-- Select Products Functions -->
	<script type="text/javascript">
        var AddSelectProductsFunctions = function (model) {
            var self = model;

            self.NextSteps1 = function() {
                self.GlideRight("ReviewProducts");
            }
        }
    </script>
    <!-- Review Products Functions -->
	<script type="text/javascript">
	    var AddReviewProductsFunctions = function (model) {
	        var self = model;

	        self.NextSteps2 = function () {
	            self.GlideRight("SelectProducts");
            }
        }
    </script>
    <!-- List Model Functions -->
    <script type="text/javascript">
        var AddListFunctions = function (model) {
            var self = model;
            self.BrandArray = ko.observableArray();
            self.CategoryArray = ko.observableArray();

            self.RetrieveCategoriesList = function (callback) {
                flow.exec(
                    function () {
                        self.Service.AjaxGet("/Admin/Product/Categories", this);
                    },
                    function (data) {
                        self.CategoryArray.removeAll();
                        self.CategoryArray.push({ value: null, text: "(Select a Category)" });

                        var addCategory = function (category, indent) {
                            self.CategoryArray.push({ value: category.Id, text: indent + category.Name });
                            $.each(category.Categories, function (index, elem) { addCategory(elem, indent + '....'); });
                        }
                        $.each(data, function (index, elem) { addCategory(elem, ''); });
                        if (callback) {
                            callback();
                        }
                    }
                );
            }

            self.RetrieveBrandsList = function (callback) {
                flow.exec(
                    function () {
                        self.Service.AjaxGet("/Admin/Product/Brands", this);
                    },
                    function (data) {
                        self.BrandArray.removeAll();
                        self.BrandArray.push({ value: null, text: "(Select a Brand)" });

                        $.each(data, function (index, elem) {
                            self.BrandArray.push({ value: elem.Id, text: elem.Name });
                        });

                        if (callback) {
                            callback();
                        }
                    }
                );
            }

        }
    </script>
    <!-- Search Functions -->
	<script type="text/javascript">
	    var AddSearchFunctions = function (model) {
	        self = model;

	        self.QuantityArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

	        self.SearchClick = function () {
	            flow.exec(
                    function () {
                        var brandId = $("#SearchBrand").val();
                        var categoryId = $("#SearchCategory").val();
                        var searchText = $("#SearchText").val();
                        self.Service.AjaxGet("/Admin/Product/Search" +
                            "?brandId=" + brandId + "&categoryId=" + categoryId + "&searchText=" + searchText, this);
                    },
                    function (data) {
                        $.each(data, function (index, elem) {
                            elem.ExpandInventory = ko.observable(false);
                            elem.Inventory = ko.observableArray(null);
                            elem.Quantity = ko.observable(1);
                        });
                        self.SearchData(data);
                    }
                );
	        }

	        self.ShowInventory = function (data) {
	            flow.exec(
                    function () {
                        self.Service.AjaxGet("/Admin/Product/Inventory/" + data.Id, this);
                    },
                    function (inventory) {
                        data.ExpandInventory(true);
                        data.Inventory(inventory);
                    }
                );
	        }

	        self.HideInventory = function (data) {
	            data.ExpandInventory(false);
	        }

	    }
    </script>
    <!-- View Model Functions -->
	<script type="text/javascript">
	    var CreateOrderViewModel = function() {
	        var self = this;

            // Model
			self.Input = ko.observable(null);
			self.SearchData = ko.observableArray();

			// View concerns
			var commonUI = new CommonUI();
			self.Service = new AjaxService(commonUI.Error, commonUI.ShowLoading, commonUI.HideLoading);
			self.ModalViewModel = ko.observable({ Template: null, Data: null });

            // Glider functions
			var glider = new EndlessGlider("#gliding-container", "#glider1", "#glider2");
            glider.Init("Top-Workspace-SelectProducts", "Main-Editor-SelectProducts");
            self.EndlessGlider = glider;

            self.GlideLeft = function(template) {
                 self.EndlessGlider.GlideToLefts("Top-Workspace-" + template, "Main-Editor-" + template);
            }

            self.GlideRight = function (template) {
                 self.EndlessGlider.GlideToRight("Top-Workspace-" + template, "Main-Editor-" + template);
            }
        }
    </script>
    <!-- Root View Model Functions -->
	<script type="text/javascript">
	    $(function () {
	        var model = new CreateOrderViewModel();
	        AddSelectProductsFunctions(model);
	        AddReviewProductsFunctions(model);
	        AddListFunctions(model);
	        AddSearchFunctions(model);
	        ko.applyBindings(model);
	        flow.exec(
                function () {
                    model.RetrieveCategoriesList(this);
                },
                function () {
                    model.RetrieveBrandsList(this);
                }
            );
	    });
	</script>
}

@section _Templates {
    <style>
        table.skutable tbody tr td:nth-child(1)
        {
            width:200px;
        }
        table.skutable tbody tr td:nth-child(2)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(3)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(4)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(5)
        {
            width:150px;
            text-align: right;
        }
    </style>
	<!-- KNOCKOUT TEMPLATES - Select Products -->
	<script type="text/html" id="Top-Workspace-SelectProducts">
        <div class="workspace-heading" style="height:125px;">
		    <div id="heading" class="container">
                <div class="row">
				    <div class="span8">
					    <h1>Create Order &gt; Select Products</h1>
				    </div>
				    <div class="span4" style="margin-top:15px; text-align:right;">
					    <a class="btn btn-inverse" style="width:100px;" data-bind="click: $root.ShowCart">Show Cart <i class="icon-shopping-cart icon-white"></i></a>
					    <a class="btn btn-primary" style="width:100px;" data-bind="click: $root.NextSteps1">Next <i class="icon-arrow-right icon-white"></i></a>
				    </div>
			    </div>

                <div style="height:20px;"></div>
                
                <div class="row">
				    <div class="span3">
                        <select id="SearchCategory" data-bind="foreach: $data.CategoryArray">
                            <option data-bind="value: $data.value, text: $data.text"  />
                        </select>
                    </div>
				    <div class="span3">
                        <select id="SearchBrand" data-bind="foreach: $data.BrandArray">
                            <option data-bind="value: $data.value, text: $data.text"  />
                        </select>
                    </div>
                    <div class="span3">
                        <input id="SearchText" type="text" class="input-large" placeholder="Description, Name, Sku..." />
                    </div>
				    <div class="span3">
					    <a class="btn btn-inverse btn-block" data-bind="click: $data.SearchClick">Search <i class="icon-search icon-white"></i></a>
                    </div>
                </div>
		    </div>
        </div>
	</script>
	<script type="text/html" id="Main-Editor-SelectProducts">
        <div style="margin-top:20px; margin-bottom:200px;">
            <div style="margin-top:50px; text-align:center;" class="alert alert-info" data-bind="visible: $root.SearchData().length == 0">
			    <strong>There are no Products in your current search.  Click "Search" to run a search or click "Add New Product" to create a new one.</strong>  
		    </div>
		    
		    <table id="parent-editor-table" class="table" data-bind="visible: $root.SearchData().length > 0">
		    <tbody data-bind="foreach: $root.SearchData()">
			    <tr>
			    <td style="vertical-align:top;">
				    <div style="width:100px">
                	    <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			            </div>
                    </div>
                </td>
                <td style="vertical-align:top; padding-top:20px;">
                    <div style="width:808px;">
                        <div style="width:604px;float:left;">
					        <p>
                                <h4 data-bind="text: $data.Name" style="margin-bottom:5px;"></h4>
                                <span style="margin-right:10px;" data-bind="text: 'Brand: ' + $data.BrandName"></span>
                                <span style="margin-right:10px;" data-bind="text: 'Cost: ' + ToMoney($data.UnitPrice)"></span>
                                <span data-bind="text: 'Price: ' + ToMoney($data.UnitPrice)"></span>
                            </p>
                        </div>
                        <div style="width:204px;float:left; text-align:right;">
					        <div data-bind="ifnot: $data.ExpandInventory">
                                <a class="btn btn-white" href="#" data-bind="click: function() { $root.ShowInventory($data) }">
                                <i class="icon-chevron-up icon-black"></i> Show Inventory</a>
                            </div>

					        <div data-bind="if: $data.ExpandInventory">
                                <a class="btn btn-white" href="#" data-bind="click: function() { $root.HideInventory($data) }">
                                <i class="icon-chevron-down icon-black"></i> Hide Inventory</a>
                            </div>
                        </div>
                    </div>

                    <div data-bind="if: $data.ExpandInventory">
                        <table class="skutable table-striped table-hover table-condensed">
                        <thead>
                            <th>Sku Code</th>
                            <th style="text-align:right;">Reserved</th>
                            <th style="text-align:right;">In Stock</th>
                            <th style="text-align:right;">Quantity</th>
                            <th style="text-align:right;">Add to Cart</th>
                        </thead>
                        <tbody data-bind="foreach: $data.Inventory">
                        <tr>
                            <td><span data-bind="text: $data.SkuCode"></span></td>
                            <td><span data-bind="text: $data.ReservedInventory"></span></td>
                            <td><span data-bind="text: $data.TotalInventory"></span></td>
                            <td><select style="width:125px; margin-bottom:0px;" data-bind='options: $root.QuantityArray, optionsCaption: "How many...", value: TotalInventory'></select></td>
                            <td><a href="#" style="color:#333;"><i class="icon-shopping-cart icon-blue"></i> Add to Cart</a></td>
                        </tr>
                        </tbody>
                        </table>
                    </div>
			    </td>
			    </tr>
		    </tbody>
		    </table>
        </div>
	</script>
	
	<!-- KNOCKOUT TEMPLATES - Review Products -->
	<script type="text/html" id="Top-Workspace-ReviewProducts">
		<div id="heading" class="container">
            <div class="row">
				<div class="span10">
					<h1>Create Order &gt; Review Products</h1>
				</div>
				<div class="span2" style="margin-top:15px; text-align:right;">
					<a class="btn btn-primary btn-block" data-bind="click: $root.NextSteps2">Next <i class="icon-arrow-right icon-white"></i></a>
				</div>
			</div>
		</div>
	</script>
	<script type="text/html" id="Main-Editor-ReviewProducts">
        <div style="margin-top:20px; margin-bottom:200px;">
            <h1>Editor #2 - Review Products</h1>

		    <table class="table table-hover">
			    <tbody data-bind="">
			    </tbody>
		    </table>
        </div>
	</script>

	<!-- KNOCKOUT TEMPLATE - MODAL DIALOG -->
	<script type="text/html" id="Modal-Dialog">
		<div id="modal-delete" class="modal hide fade" data-bind="if: $root.SelectedRecord()">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3>Delete <span data-bind="text: $root.SelectedRecord().Name()"></span></h3>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to Delete this Section?</p>			
				<p><strong>Warning: all <span data-bind="text: $root.SelectedRecord().NumberOfCategories()"></span> Categories and Sub-Categories will be Deleted, too.</strong></p>
			</div>
			<div class="modal-footer">
				<a href="#" class="btn btn-inverse" data-dismiss="modal"><i class="icon-remove icon-white"></i> Cancel</a>
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $root.DeleteConfirm"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>		
	</script>
}

@section _Body {
    <div class="workspace-heading-parent">
		<div class="workspace-heading" data-bind="template: { name: $root.EndlessGlider.WorkspaceTemplate() }">
        </div>
	</div>
	<div id="gliding-container" class="container">
		<div id="glider1" class="glider" data-bind="template: { name: $root.EndlessGlider.EditorTemplate1() }"></div>		
		<div id="glider2" class="glider" data-bind="template: { name: $root.EndlessGlider.EditorTemplate2() }"></div>
    </div>
    <div id="modal-enclave" data-bind="template: { name: $root.ModalViewModel().Template }"></div>    
}