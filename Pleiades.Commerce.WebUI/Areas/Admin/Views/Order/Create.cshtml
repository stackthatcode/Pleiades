@using Pleiades.Web.MvcHelpers

@section _Scripts {   
	@Html.Javascript("/aquery/aQuery-1.0-min.js")
    @Html.Partial("_ImageBundleViewer")    
    <!-- Endless Glider -->
    <script type="text/javascript">
        var EndlessGlider = function (container, divId1, divId2) {
            var self = this;
            
            self.WorkspaceTemplate = ko.observable(null);
            self.EditorTemplate1 = ko.observable(null);
            self.EditorTemplate2 = ko.observable(null);
            self.ActiveEditor = null;

            self.Init = function (workspaceTemplate, editorTemplate) {
                self.ActiveEditor = 1;
                self.WorkspaceTemplate(workspaceTemplate);
                self.EditorTemplate1(editorTemplate);
                $(divId2).hide();
            }

            self.GlideToRight = function (workspaceTemplate, editorTemplate) {
                self.Glide(workspaceTemplate, editorTemplate, "RIGHT");
            }

            self.GlideToLeft = function (workspaceTemplate, editorTemplate) {
                self.Glide(workspaceTemplate, editorTemplate, "LEFT");
            }

            self.Glide = function (workspaceTemplate, editorTemplate, direction, callback) {
                var prevDiv, nextDiv, nextEditorTemplate;
                if (self.ActiveEditor == 1) {
                    prevDiv = divId1;
                    nextDiv = divId2;
                    nextEditorTemplate = self.EditorTemplate2;
                } else {
                    prevDiv = divId2;
                    nextDiv = divId1;
                    nextEditorTemplate = self.EditorTemplate1;
                }

                var glideLeftFunction = function (callback) {
                    $(nextDiv).css({ display: "block", left: "-940px", top: "0px"  });
		
	                $(prevDiv).animate({ 
                            left: "+=940" 
		                }, 
		                { 	
			                complete: function() { $(prevDiv).css({ display: "none" }); },
			                duration: 250, 
		                }
	                );
	                $(nextDiv).animate({ 	
			                left: "+=940" 
		                }, 
		                { 	
			                complete:callback,
			                duration: 250,
		                }
	                );
                }
                
                var glideRightFunction = function (callback) {
                    $(nextDiv).css({ display: "block", left: "+940px", top: "0px"  });
		
	                $(prevDiv).animate({ 
                            left: "-=940" 
		                }, 
		                { 	
			                complete: function() { $(prevDiv).css({ display: "none" }); },
			                duration: 250, 
		                }
	                );
	                $(nextDiv).animate({ 	
			                left: "-=940" 
		                }, 
		                {
			                complete: callback,
			                duration: 250,
		                }
	                );
                }

                flow.exec(
                    function () {
                        nextEditorTemplate(editorTemplate);
                        if (direction == "LEFT") {
                            glideLeftFunction(this);
                        } else {
                            glideRightFunction(this);
                        }
                    },
                    function () {
                        self.ActiveEditor = self.ActiveEditor == 1 ? 2 : 1;

                        self.WorkspaceTemplate(workspaceTemplate);
                    }
                );
            }
        }
    </script>
    <!-- List Model Functions -->
    <script type="text/javascript">
        var AddListFunctions = function (model) {
            var self = model;
            self.BrandArray = ko.observableArray();
            self.CategoryArray = ko.observableArray();

            self.RetrieveCategoriesList = function (callback) {
                flow.exec(
                    function () {
                        self.Service.AjaxGet("/Admin/Product/Categories", this);
                    },
                    function (data) {
                        self.CategoryArray.removeAll();
                        self.CategoryArray.push({ value: null, text: "(Select a Category)" });

                        var addCategory = function (category, indent) {
                            self.CategoryArray.push({ value: category.Id, text: indent + category.Name });
                            $.each(category.Categories, function (index, elem) { addCategory(elem, indent + '....'); });
                        }
                        $.each(data, function (index, elem) { addCategory(elem, ''); });
                        if (callback) {
                            callback();
                        }
                    }
                );
            }

            self.RetrieveBrandsList = function (callback) {
                flow.exec(
                    function () {
                        self.Service.AjaxGet("/Admin/Product/Brands", this);
                    },
                    function (data) {
                        self.BrandArray.removeAll();
                        self.BrandArray.push({ value: null, text: "(Select a Brand)" });

                        $.each(data, function (index, elem) {
                            self.BrandArray.push({ value: elem.Id, text: elem.Name });
                        });

                        if (callback) {
                            callback();
                        }
                    }
                );
            }
        }
    </script>
    <!-- Search Functions -->
	<script type="text/javascript">
	    var AddSearchFunctions = function (model) {
	        self = model;

	        self.SearchData = ko.observableArray();
	        self.QuantityArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	        self.CartItems = ko.observableArray();

	        self.NumberOfCartItems = ko.computed(function () {
	            var quantity = 0;
	            $.each(self.CartItems(), function (index, elem) {
	                quantity = quantity + elem.Quantity();
	            });
	            return quantity;
	        });

	        self.ViewCart = function () {
	            if (self.CartItems().length == 0) {
	                self.ShowModal("Notification", "The Shopping Cart is Empty", "Add Items to the Order");
	            } else {
	                $("btn-view-cart").hide();
	                $.each(self.SearchData(), function (index, elem) {
	                    elem.ExpandInventory(false);
	                    elem.Inventory.removeAll();
	                });
	                self.GlideRight("ReviewProducts");
	            }
	        }

	        self.SearchClick = function (callback) {
	            flow.exec(
                    function () {
                        var brandId = $("#SearchBrand").val();
                        var categoryId = $("#SearchCategory").val();
                        var searchText = $("#SearchText").val();
                        self.Service.AjaxGet("/Admin/Product/Search" +
                            "?brandId=" + brandId + "&categoryId=" + categoryId + "&searchText=" + searchText, this);
                    },
                    function (data) {
                        $.each(data, function (index, elem) {
                            elem.ExpandInventory = ko.observable(false);
                            elem.Inventory = ko.observableArray([]);
                        });
                        self.SearchData(data);
                        if (callback) {
                            callback();
                        }
                    }
                );
	        }

	        self.CartItemBySkuCode = function (skucode) {
	            return self.CartItems().firstOrNull(function (x) { return x.Sku().SkuCode == skucode; });
	        };

	        self.AddToCart = function (inventoryItem, product) {
	            if (!inventoryItem.SelectedQuantity()) {
	                return;
	            }

	            if (self.CartItems().length == 20) {
	                self.ShowModal("Notification", "The Shopping Cart is Full", "You can only add 20 distinct Skus per Order");
	            }

	            var itemInCart = self.CartItemBySkuCode(inventoryItem.SkuCode);
	            if (itemInCart) {
	                if (itemInCart.Quantity() + inventoryItem.SelectedQuantity() > inventoryItem.Available) {
	                    self.ShowModal("Notification", "Stock Availability", "Adding are only " + inventoryItem.Available + " of that item available for purchase");
	                    return;
	                }

	                itemInCart.Quantity(itemInCart.Quantity() + inventoryItem.SelectedQuantity());
	                self.GenerateQuantityOptions(inventoryItem);
	            } else {
	                if (self.CartItems.length == 100) {
	                    self.ShowModal("Notification", "Maximum Number of Distinct Items", "You can only add 99 of the same Sku per Order");
	                    return;
	                }

	                var cartItem = {
	                    Quantity: ko.observable(inventoryItem.SelectedQuantity()),
	                    Sku: ko.observable(inventoryItem),
	                    Product: product
	                };
	                self.CartItems.push(cartItem);
	                self.GenerateQuantityOptions(inventoryItem);
	            }

	            $("#AddFeedback").show();
	            $("#AddFeedback").fadeOut({ duration: 1000 });
	            inventoryItem.SelectedQuantity(null);
	        }

	        self.ShowInventory = function (data) {
	            flow.exec(
                    function () {
                        self.Service.AjaxGet("/Admin/Product/Inventory/" + data.Id, this);
                    },
                    function (inventory) {
                        data.ExpandInventory(true);

                        $.each(inventory, function (index, inventoryItem) {
                            inventoryItem.SelectedQuantity = ko.observable(0);
                            inventoryItem.ComputedAvailable = ko.computed(
                                function () {
                                    var cartItem = self.CartItemBySkuCode(inventoryItem.SkuCode);
                                    if (cartItem) {
                                        return inventoryItem.Available - cartItem.Quantity();
                                    } else {
                                        return inventoryItem.Available;
                                    }
                                }
                            );
                            inventoryItem.QuantityOptions = ko.observableArray();
                            self.GenerateQuantityOptions(inventoryItem);
                            data.Inventory.push(inventoryItem);
                        });
                    }
                );
	        }

	        self.GenerateQuantityOptions = function (inventoryItem) {
	            inventoryItem.QuantityOptions.removeAll();
	            for (var quantity = 1; quantity <= inventoryItem.ComputedAvailable(); quantity++) {
	                inventoryItem.QuantityOptions.push(quantity);
	            }
	        }

	        self.HideInventory = function (data) {
	            data.ExpandInventory(false);
	            data.Inventory.removeAll();
	        }
	    }
    </script>    
    <!-- Review Products Functions -->
	<script type="text/javascript">
	    var AddReviewProductsFunctions = function (model) {
	        var self = model;

	        self.SelectedCartItem = ko.observable(null);

	        self.FindInventory = function (color, size) {
	            var item = self.SelectedAllInventory.firstOrNull(function (elem) {
	                console.log(elem.Color);
	                console.log(elem.Size);
	            });
	        }

	        self.BackToProductSearch = function () {
	            self.CartItemCancel();
	            $("[name='glideToSearch']").hide();
	            self.GlideLeft("SelectProducts");
	        }

	        self.CartItemClick = function (cartItem) {
                var selectedCartItem = {
                    CartItem: ko.observable(cartItem),
                    Colors: ko.observableArray(),
                    Sizes: ko.observableArray(),
                    Inventory: ko.observableArray(),

                    EditQuantity: ko.observable(),
                    EditColor: ko.observable(),
                    EditSize: ko.observable(),
                    EditSku: ko.observable(),
                };

	            flow.exec(
                    function () {
                        self.CartItemCancel();
                        self.Service.AjaxGet("/Admin/Product/Inventory/" + cartItem.Product.Id + "?regenerate=false", this);
                    },
                    function (inventory) {
                        selectedCartItem.Inventory(inventory);
                        var editSku = selectedCartItem.Inventory().firstOrNull(
                            function(x) { return x.SkuCode == cartItem.Sku().SkuCode; }
                        );
                        selectedCartItem.EditSku(editSku);
                        selectedCartItem.EditQuantity = ko.observable(cartItem.Quantity());

                        if (editSku.Available == 0) {
                            self.ShowModal("Notification",  "Item Out-Of-Stock", 
                                "Item: " + editSku.SkuCode + " is no longer in stock", 
                                function() {
                                    self.CartItems.remove(cartItem);
                                });
                            return;
                        }
                        if (editSku.Available < cartItem.Quantity()) {
                            cartItem.Quantity(editSku.Available);
                            self.ShowModal("Notification",  
                                "Reduction in Stock", "Due to changes in available stock items were removed from Cart", this);
                            return;
                        }

                        self.SelectedCartItem(selectedCartItem);

                        if (cartItem.Sku().Color) {
                            self.Service.AjaxGet("/Admin/Product/Colors/" + cartItem.Product.Id, this);
                        } else {
                            this([]);
                        }
                    },
                    function (colors) {
                        selectedCartItem.Colors(colors);
                        var editColor = selectedCartItem.Colors().firstOrNull(
                            function(x) { return x.Id == cartItem.Sku().Color.Id; }
                        );
                        selectedCartItem.EditColor(editColor);

                        if (cartItem.Sku().Size) {
                            self.Service.AjaxGet("/Admin/Product/Sizes/" + cartItem.Product.Id, this);
                        }
                        // else, terminate
                    },
                    function (sizes) {
                        // Experiment
                        var inventory = self.SelectedCartItem().Inventory();
                        var color = self.SelectedCartItem().EditColor();
                        
                        var filteredSizes = self.FilterSizeByColorAndAvaililty(inventory, sizes, color);
                        selectedCartItem.Sizes(filteredSizes);

                        var editSize = selectedCartItem.Sizes().firstOrNull(
                            function(x) { return x.Id == cartItem.Sku().Size.Id; }
                        );
                        selectedCartItem.EditSize(editSize);
                    }
                );
	        }

            self.FilterSizeByColorAndAvaililty = function(inventory, sizes, selectedColor) {
                var output = [];
                $.each(sizes, function (index, size) {
                    var sku = self.FilterSkuByColorAndSize(inventory, selectedColor, size);
                    if (sku[0].Available > 0) {
                        output.push(size);
                    }
                });
                return output;
            }

            self.FilterSkuByColorAndSize = function(inventory, color, size) {
                if (color && size) {
                    return AQ(inventory)
                        .where(function(x) { return x.Color.Id == color.Id && x.Size.Id == size.Id; })
                        .toArray();
                }
                if (color) {
                    return AQ(inventory)
                        .where(function(x) { return x.Color.Id == color.Id; })
                        .toArray();                    
                }
                if (size) {
                    return AQ(inventory)
                        .where(function(x) { return x.Size.Id == size.Id; })
                        .toArray();                    
                }
                return inventory;
            }
                        
	        self.ColorSelectorClass = function (color) {                
	            return (color && self.SelectedCartItem().EditColor() && color.Id == self.SelectedCartItem().EditColor().Id) ? 
                    "color-chooser selected" : 
                    "color-chooser not-selected";
	        }

	        self.SizeSelectorClass = function (size) {
	            return (size && self.SelectedCartItem().EditSize() && size.Id == self.SelectedCartItem().EditSize().Id) ? 
                    "label label-info" : 
                    "label";
	        }

	        self.ColorSelectorClick = function (color) {
	            self.SelectedCartItem().EditColor(color);
                if (self.SelectedCartItem().Sizes().length) {
                    
                }
	        }
            
	        self.SizeSelectorClick = function (size) {
	            self.SelectedCartItem().EditSize(size);
	        }

            self.SelectedCartItemQuantity = ko.computed(function() {
//	        self.GenerateQuantityOptions = function (inventoryItem) {
//	            inventoryItem.QuantityOptions.removeAll();
//	            for (var quantity = 1; quantity <= inventoryItem.ComputedAvailable(); quantity++) {
//	                inventoryItem.QuantityOptions.push(quantity);
//	            }
//	        }
            });

	        self.CartItemCancel = function () {
	            self.SelectedCartItem(null);
	        }

	        self.CartItemDelete = function (data) {
	            self.CartItems.remove(data);
	        }

	        self.CartItemOk = function () {
	            self.SelectedCartItem(null);
	        }

	        self.PerpetualGlideTest = function () {
	            $("[name='glideToSearch']").hide();
	            self.GlideRight("SelectProducts");
	        }
	    }
    </script>
    <!-- View Model Functions -->
	<script type="text/javascript">
	    var CreateOrderViewModel = function () {
	        var self = this;

	        // Service + Cross-cutting Stuff
	        var commonUI = new CommonUI();
	        self.Service = new AjaxService(commonUI.Error, commonUI.ShowLoading, commonUI.HideLoading);

	        // Modal state + functions
	        self.ModalViewModel = ko.observable({ Template: null, Data: null });

	        self.ShowModal = function (template, header, body, callback) {
	            self.ModalViewModel({
	                Template: "Modal-Dialog-" + template,
	                Data: {
	                    Header: header,
	                    Body: body,
	                    OkButton: function () {
	                        self.HideModal();
	                        if (callback) {
	                            callback();
	                        }
	                    }
	                }
	            });
	            $('#modal-dialog').modal('show');
	        };

	        self.HideModal = function () {
	            $('#modal-dialog').modal('hide');
	        }

	        // Glider functions
	        var glider = new EndlessGlider("#gliding-container", "#glider1", "#glider2");
	        glider.Init("Top-Workspace-SelectProducts", "Main-Editor-SelectProducts");
	        self.EndlessGlider = glider;

	        self.GlideLeft = function (template) {
	            self.EndlessGlider.GlideToLeft("Top-Workspace-" + template, "Main-Editor-" + template);
	        }

	        self.GlideRight = function (template) {
	            self.EndlessGlider.GlideToRight("Top-Workspace-" + template, "Main-Editor-" + template);
	        }
	    }
    </script>
    <!-- document.ready() Functions -->
	<script type="text/javascript">
	    $(function () {
	        var model = new CreateOrderViewModel();
	        AddListFunctions(model);
	        AddSearchFunctions(model);
	        AddReviewProductsFunctions(model);
	        ko.applyBindings(model);

	        flow.exec(
                function () {
                    model.RetrieveCategoriesList(this);
                },
                function () {
                    model.RetrieveBrandsList(this);
                }
            );

	        window.Automation = function () {
	            flow.exec(
                    function () {
                        model.SearchClick(this);
                    },
                    function () {
                        model.ShowInventory(model.SearchData()[0]);
                        window.setTimeout(this, 1000);
                    },
                    function () {
                        var product = model.SearchData()[0];
                        var inventory = product.Inventory();
                        var sku = inventory[3];
                        sku.SelectedQuantity(2);
                        model.AddToCart(sku, product);
                        //this();
                    },
                    function () {
                        model.ShowInventory(model.SearchData()[0]);
                        window.setTimeout(this, 1000);
                    },
                    function () {
                        var product = model.SearchData()[0];
                        var inventory = product.Inventory();
                        var item = inventory[1];
                        item.SelectedQuantity(2);
                        model.AddToCart(item, product);
                    }
                );
	        }
	    });
	</script>
}

@section _Templates {
    <style>
        table.skutable tbody tr td:nth-child(1)
        {
            width:200px;
        }
        table.skutable tbody tr td:nth-child(2)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(3)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(4)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(5)
        {
            width:150px;
            text-align: right;
        }        
        table.editcart tr td
        {
            border-top: none; 
        }
        div.color-chooser
        {
            float:left; 
            margin-right:10px; 
            height:37px; 
            padding:3px; 
            width:37px; 
            text-align:center; 
            overflow:hidden;
        }
        .selected
        {
            border: 2px solid #F00;
        }
        .not-selected
        {
            border: 2px solid #EEE;
        }
    </style>	
    <!-- KNOCKOUT TEMPLATES - Select Products -->
	<script type="text/html" id="Top-Workspace-SelectProducts">
        <div class="workspace-heading" style="height:125px;">
		    <div id="heading" class="container">
                <div class="row">
				    <div class="span7">
					    <h1>Create Order &gt; Add Items</h1>
				    </div>
                    <div class="span2" style="margin-top:20px; text-align:right;">
                        <div id="AddFeedback" style="display:none;">
                            <span class="label label-info"> <i class="icon-star icon-white"></i>Item Added! &nbsp;</span>
                        </div>
                    </div>
				    <div class="span3" style="margin-top:15px; text-align:right;">
					    <a id="btn-view-cart" class="btn btn-primary" style="width:190px;" data-bind="click: $root.ViewCart">
                            <i class="icon-shopping-cart icon-white"></i> View Cart (<span data-bind="text: $root.NumberOfCartItems"></span> Items) &nbsp;
                            <i class="icon-arrow-right icon-white"></i></a>
				    </div>
			    </div>

                <div style="height:20px;"></div>
                
                <div class="row">
				    <div class="span3">
                        <select id="SearchCategory" data-bind="foreach: $data.CategoryArray">
                            <option data-bind="value: $data.value, text: $data.text"  />
                        </select>
                    </div>
				    <div class="span3">
                        <select id="SearchBrand" data-bind="foreach: $data.BrandArray">
                            <option data-bind="value: $data.value, text: $data.text"  />
                        </select>
                    </div>
                    <div class="span3">
                        <input id="SearchText" type="text" class="input-large" placeholder="Description, Name, Sku..." />
                    </div>
				    <div class="span3">
					    <a class="btn btn-inverse btn-block" data-bind="click: function() { $data.SearchClick(); }">Search <i class="icon-search icon-white"></i></a>
                    </div>
                </div>
		    </div>
        </div>
	</script>
	<script type="text/html" id="Main-Editor-SelectProducts">
        <div style="margin-top:20px; margin-bottom:200px;">
            <div style="margin-top:50px; text-align:center;" class="alert alert-info" data-bind="visible: $root.SearchData().length == 0">
			    <strong>There are no Products in your current search.  Click "Search" to run a search or click "Add New Product" to create a new one.</strong>  
		    </div>
		    
		    <table id="parent-editor-table" class="table" data-bind="visible: $root.SearchData().length > 0">
		    <tbody data-bind="foreach: $root.SearchData()">
			    <tr>
			    <td style="vertical-align:top;">
				    <div style="width:100px">
                	    <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ExternalResourceId: $data.ImageBundleExternalId, LightboxSuffixId: 'Parent' } }">
			            </div>
                    </div>
                </td>

                <td style="vertical-align:top; padding-top:20px;">
                    <div style="width:808px;">
                        <div style="width:604px;float:left;">
					        <p>
                                <h4 data-bind="text: $data.Name" style="margin-bottom:5px;"></h4>
                                <span style="margin-right:10px;" data-bind="text: 'Brand: ' + $data.BrandName"></span>
                                <span style="margin-right:10px;" data-bind="text: 'Cost: ' + ToMoney($data.UnitPrice)"></span>
                                <span data-bind="text: 'Price: ' + ToMoney($data.UnitPrice)"></span>
                            </p>
                        </div>

                        <div style="width:204px;float:left; text-align:right;">
					        <div data-bind="ifnot: $data.ExpandInventory">
                                <a name="btn-expand-inventory" class="btn btn-white" href="#" data-bind="click: function() { $root.ShowInventory($data) }">
                                <i class="icon-chevron-up icon-black"></i> Show Inventory</a>
                            </div>

					        <div data-bind="if: $data.ExpandInventory">
                                <a class="btn btn-white" href="#" data-bind="click: function() { $root.HideInventory($data) }">
                                <i class="icon-chevron-down icon-black"></i> Hide Inventory</a>
                            </div>
                        </div>
                    </div>

                    <div name="expanded-inventory" data-bind="if: $data.ExpandInventory">
                        <table style="width:800px;" class="skutable table-striped table-hover table-condensed">
                        <thead>
                            <th>Sku Code</th>
                            <th style="text-align:right;">Reserved</th>
                            <th style="text-align:right;">In Stock</th>
                            <th style="text-align:right;">Available</th>
                            <th style="text-align:right;">Quantity</th>
                            <th style="text-align:right;">Add to Cart</th>
                        </thead>
                        <tbody data-bind="foreach: $data.Inventory">
                        <tr style="height:40px;">
                            <td style="width:200px;"><span data-bind="text: $data.SkuCode"></span></td>
                            <td style="width:100px;"><span data-bind="text: $data.Reserved"></span></td>
                            <td style="width:100px;"><span data-bind="text: $data.InStock"></span></td>
                            <td style="width:100px;"><span data-bind="text: $data.ComputedAvailable"></span></td>
                            <td style="width:150px;">
                                <div data-bind="if: $data.QuantityOptions().length">
                                    <select name="quantity-select" style="width:125px; margin-bottom:0px;" 
                                        data-bind='options: $data.QuantityOptions, optionsCaption: "How many...", value: $data.SelectedQuantity'>
                                    </select>
                                </div>
                                <div data-bind="ifnot: $data.QuantityOptions().length">
                                    <span style="margin-right:10px;">N/A</span>
                                </div>
                            </td>
                            <td style="width:100px; text-align:right;"><a name="add-to-cart" href="#" data-bind="click: function() { $root.AddToCart($data, $parent); }" style="color:#333;"><i class="icon-shopping-cart icon-blue"></i> Add to Cart</a></td>
                        </tr>
                        </tbody>
                        </table>
                    </div>
			    </td>
			    </tr>
		    </tbody>
		    </table>
        </div>
	</script>	
	<!-- KNOCKOUT TEMPLATES - Review Products -->
	<script type="text/html" id="Top-Workspace-ReviewProducts">
		<div id="heading" class="container">
            <div class="row">
				<div class="span9">
					<h1>Create Order &gt; Review Cart</h1>
				</div>
				<div class="span3" style="margin-top:15px; text-align:right;">
                    <div data-bind="if: $root.CartItems().length">
                        <a id="btn-view-cart" class="btn btn-primary" style="width:190px;" data-bind="click: $root.PerpetualGlideTest">
                            Add Shipping Address <i class="icon-arrow-right icon-white"></i>
                        </a>
                    </div>
				</div>
			</div>

            <div class="row">
                <div class="span7" style="height:48px;">
                    <ul class="nav nav-pills">
                        <li style="width:200px;">
				            <a name="glideToSearch" href="#" class="backbutton" data-bind="click: $root.BackToProductSearch">&laquo; Add Items To Cart</a>
                            &nbsp;
                        </li>
                    </ul
                </div>
            </div>
		</div>
	</script>
	<script type="text/html" id="Main-Editor-ReviewProducts">
        <div style="margin-bottom:200px;">
            <div style="margin-top:30px; text-align:center;" class="alert alert-info" data-bind="visible: $root.CartItems().length == 0">
			    <strong>There are no Items in your Cart.  Click "Add Items to Cart".</strong>  
		    </div>

		    <table class="table table-hover">
			    <tbody data-bind="foreach: $root.CartItems">
                    <tr data-bind="ifnot: $root.SelectedCartItem() &&  $root.SelectedCartItem().CartItem() == $data, click: $root.CartItemClick">
                        <td style="width:100px">
                	        <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ImageBundle: $data.Sku().ImageBundle, LightboxSuffixId: 'Review' } }">
			                </div>
                        </td>

                        <td style="width:800px;">
                            <div style="width:250px; vertical-align:top; float:left;">
                                <strong data-bind="text: $data.Product.Name"></strong><br/>
                                <span>Sku Code: </span> <span data-bind="text: $data.Sku().SkuCode"></span><br/>
                                <span data-bind="if: $data.Sku().Color">Color: <span data-bind="text: $data.Sku().Color.Name"></span></span><br/>
                                <span data-bind="if: $data.Sku().Size">Size: <span data-bind="text: $data.Sku().Size.Name"></span></span><br/>
                            </div>
                            <div style="width:150px; vertical-align:top; float:left; text-align:left;">
                                <br />
                                <span>Unit Price:</span> <span data-bind="text: ToMoney($data.Product.UnitPrice)"></span>
                            </div>
                            <div style="width:100px; vertical-align:top; float:left; text-align:right;">
                                <br />
                                <span>Quantity:</span> <span data-bind="text: $data.Quantity"></span>
                            </div>
                            <div style="width:300px; text-align:right; float:left; padding-top:30px;">
                                <a class="btn btn-primary" style="width:75px;" href="#"><i class="icon-pencil icon-white"></i> Edit</a>
                            </div>
                        </td>
                    </tr>
                    
                    <tr data-bind="if: $root.SelectedCartItem() && $root.SelectedCartItem().CartItem() == $data">
                        <td style="width:100px; vertical-align:top;">
                            <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ImageBundle: $root.SelectedCartItem().EditSku().ImageBundle, LightboxSuffixId: 'Review' } }">
			                </div>
                        </td>
                        <td style="width:800px;">
                            <div style="width:800px;">
                                <div style="width:250px; vertical-align:top; float:left;">
                                    <strong data-bind="text: $data.Product.Name"></strong><br/>                                    
                                    <span>Sku Code: </span> <span data-bind="text: $root.SelectedCartItem().EditSku().SkuCode"></span><br/>
                                </div>
                                <div style="width:150px; vertical-align:top; float:left; text-align:left;">
                                    <br />
                                    <span>Unit Price:</span> <span data-bind="text: ToMoney($root.SelectedCartItem().CartItem().Product.UnitPrice)"></span>
                                </div>

                                <div style="width:100px; vertical-align:top; float:left; padding-top:15px; text-align:right;">
                                    <select name="quantity-select" style="width:90px; margin-bottom:0px;" data-bind='options: $root.QuantityArray, optionsCaption: "How many...", value: $data.EditQuantity'></select>                             
                                </div>

                                <div style="width:300px; text-align:right; float:left; padding-top:30px;">
                                    <a class="btn btn-primary" href="#" data-bind="click: $root.CartItemOk"><i class="icon-ok icon-white"></i> Ok</a>
					                <a class="btn btn-primary" href="#" data-bind="click: $root.CartItemDelete"><i class="icon-trash icon-white"></i> Delete</a>
					                <a class="btn btn-inverse" href="#" data-bind="click: $root.CartItemCancel"><i class="icon-remove icon-white"></i> Cancel</a>
                                </div>
                            </div>

                            <div style="clear:both; width:800px;">
                                <div data-bind="if: $root.SelectedCartItem().Colors().length > 0" style="width:800px; padding-top:20px; padding-bottom:20px;">
                                    <strong>Select a Color</strong>
                                    
                                    <a href="#">
                                    <div style="margin-top:10px;" data-bind="foreach:  $root.SelectedCartItem().Colors()">
                                        <div data-bind="click: $root.ColorSelectorClick, attr: { 'class' : $root.ColorSelectorClass($data) }">
                                            <img data-bind="attr: { src: BundleViewer.ImageBundleDownloadUrl({ ExternalResourceId: $data.ImageBundleExternalId }, 'thumbnail') }" />
			                            </div>
                                    </div>
                                    </a>
                                </div>

                                <div data-bind="if: $root.SelectedCartItem().Sizes().length > 0" style="width:800px; clear:both; padding-top:20px; padding-bottom:20px;">
                                    <strong>Select a Size</strong>
                                    
                                    <div style="margin-top:10px;" data-bind="foreach: $root.SelectedCartItem().Sizes()">
                                        <span data-bind="click: $root.SizeSelectorClick, attr: { 'class' : $root.SizeSelectorClass($data) }, text: $data.Abbr + ' - ' + $data.Name"
                                            class="label"></span>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
			    </tbody>
		    </table>
        </div>
	</script>
	<!-- KNOCKOUT TEMPLATE - Modal Dialogs -->
	<script type="text/html" id="Modal-Dialog-Notification">
		<div id="modal-dialog" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3><span data-bind="text: $data.Header"></span></h3>
			</div>
			<div class="modal-body">
				<p><span data-bind="text: $data.Body"></span></p>
			</div>
			<div class="modal-footer">
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $data.OkButton"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>		
	</script>
}

@section _Body {
    <div class="workspace-heading-parent">
		<div class="workspace-heading" data-bind="template: { name: $root.EndlessGlider.WorkspaceTemplate() }">
        </div>
	</div>
	<div id="gliding-container" class="container">
		<div id="glider1" class="glider" data-bind="template: { name: $root.EndlessGlider.EditorTemplate1() }"></div>		
		<div id="glider2" class="glider" data-bind="template: { name: $root.EndlessGlider.EditorTemplate2() }"></div>
    </div>
    <div id="modal-enclave" 
        data-bind="template: { name: $root.ModalViewModel().Template, data: $root.ModalViewModel().Data }">
    </div>    
}
