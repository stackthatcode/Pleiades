@using Pleiades.Web.MvcHelpers

@section _Scripts {   
	@Html.Javascript("/aquery/aQuery-1.0-min.js")
    @Html.Partial("_ImageBundleViewer")   
    @Html.Partial("_SelectProducts") 
    @Html.Partial("_ReviewOrder") 

    <!-- Endless Glider -->
    <script type="text/javascript">
        var EndlessGlider = function (container, divId1, divId2) {
            var self = this;
            
            self.WorkspaceTemplate = ko.observable(null);
            self.EditorTemplate1 = ko.observable(null);
            self.EditorTemplate2 = ko.observable(null);
            self.ActiveEditor = null;

            self.Init = function (workspaceTemplate, editorTemplate) {
                self.ActiveEditor = 1;
                self.WorkspaceTemplate(workspaceTemplate);
                self.EditorTemplate1(editorTemplate);
                $(divId2).hide();
            }

            self.GlideToRight = function (workspaceTemplate, editorTemplate) {
                self.Glide(workspaceTemplate, editorTemplate, "RIGHT");
            }

            self.GlideToLeft = function (workspaceTemplate, editorTemplate) {
                self.Glide(workspaceTemplate, editorTemplate, "LEFT");
            }

            self.Glide = function (workspaceTemplate, editorTemplate, direction, callback) {
                var prevDiv, nextDiv, nextEditorTemplate;
                if (self.ActiveEditor == 1) {
                    prevDiv = divId1;
                    nextDiv = divId2;
                    nextEditorTemplate = self.EditorTemplate2;
                } else {
                    prevDiv = divId2;
                    nextDiv = divId1;
                    nextEditorTemplate = self.EditorTemplate1;
                }

                var glideLeftFunction = function (callback) {
                    $(nextDiv).css({ display: "block", left: "-940px", top: "0px"  });
		
	                $(prevDiv).animate({ 
                            left: "+=940" 
		                }, 
		                { 	
			                complete: function() { $(prevDiv).css({ display: "none" }); },
			                duration: 250, 
		                }
	                );
	                $(nextDiv).animate({ 	
			                left: "+=940" 
		                }, 
		                { 	
			                complete:callback,
			                duration: 250,
		                }
	                );
                }
                
                var glideRightFunction = function (callback) {
                    $(nextDiv).css({ display: "block", left: "+940px", top: "0px"  });
		
	                $(prevDiv).animate({ 
                            left: "-=940" 
		                }, 
		                { 	
			                complete: function() { $(prevDiv).css({ display: "none" }); },
			                duration: 250, 
		                }
	                );
	                $(nextDiv).animate({ 	
			                left: "-=940" 
		                }, 
		                {
			                complete: callback,
			                duration: 250,
		                }
	                );
                }

                flow.exec(
                    function () {
                        nextEditorTemplate(editorTemplate);
                        if (direction == "LEFT") {
                            glideLeftFunction(this);
                        } else {
                            glideRightFunction(this);
                        }
                    },
                    function () {
                        self.ActiveEditor = self.ActiveEditor == 1 ? 2 : 1;

                        self.WorkspaceTemplate(workspaceTemplate);
                    }
                );
            }
        }
    </script>    
    <!-- View Model Functions -->
	<script type="text/javascript">
	    var CreateOrderViewModel = function () {
	        var self = this;

	        // Service + Cross-cutting Stuff
	        var commonUI = new CommonUI();
	        self.Service = new AjaxService(commonUI.Error, commonUI.ShowLoading, commonUI.HideLoading);

	        // Modal state + functions
	        self.ModalViewModel = ko.observable({ Template: null, Data: null });

	        self.ShowModal = function (template, header, body, callback) {
	            self.ModalViewModel({
	                Template: "Modal-Dialog-" + template,
	                Data: {
	                    Header: header,
	                    Body: body,
	                    OkButton: function () {
	                        self.HideModal();
	                        if (callback) {
	                            callback();
	                        }
	                    }
	                }
	            });
	            $('#modal-dialog').modal('show');
	        };

	        self.HideModal = function () {
	            $('#modal-dialog').modal('hide');
	        }

	        // Glider functions
	        var glider = new EndlessGlider("#gliding-container", "#glider1", "#glider2");
	        glider.Init("Top-Workspace-SelectProducts", "Main-Editor-SelectProducts");
	        self.EndlessGlider = glider;

	        self.GlideLeft = function (template) {
	            self.EndlessGlider.GlideToLeft("Top-Workspace-" + template, "Main-Editor-" + template);
	        }

	        self.GlideRight = function (template) {
	            self.EndlessGlider.GlideToRight("Top-Workspace-" + template, "Main-Editor-" + template);
	        }
	    }
    </script>
    <!-- document.ready() Functions -->
	<script type="text/javascript">
	    $(function () {
	        var model = new CreateOrderViewModel();
	        AddListFunctions(model);
	        AddSearchFunctions(model);
	        AddReviewProductsFunctions(model);
	        ko.applyBindings(model);

	        flow.exec(
                function () {
                    model.RetrieveCategoriesList(this);
                },
                function () {
                    model.RetrieveBrandsList(this);
                }
            );

	        window.Automation = function () {
	            flow.exec(
                    function () {
                        model.SearchClick(this);
                    },
                    function () {
                        model.ShowInventory(model.SearchData()[0]);
                        window.setTimeout(this, 1000);
                    },
                    function () {
                        var product = model.SearchData()[0];
                        var inventory = product.Inventory();
                        var sku = inventory[3];
                        sku.SelectedQuantity(2);
                        model.AddToCart(sku, product);
                        //this();
                    },
                    function () {
                        model.ShowInventory(model.SearchData()[0]);
                        window.setTimeout(this, 1000);
                    },
                    function () {
                        var product = model.SearchData()[0];
                        var inventory = product.Inventory();
                        var item = inventory[1];
                        item.SelectedQuantity(2);
                        model.AddToCart(item, product);
                    }
                );
	        }
	    });
	</script>
}

@section _Templates {
    <style>
        table.skutable tbody tr td:nth-child(1)
        {
            width:200px;
        }
        table.skutable tbody tr td:nth-child(2)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(3)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(4)
        {
            width:150px;
            text-align: right;
        }
        table.skutable tbody tr td:nth-child(5)
        {
            width:150px;
            text-align: right;
        }        
        table.editcart tr td
        {
            border-top: none; 
        }
        div.color-chooser
        {
            margin-right:10px; 
            height:37px; 
            padding:3px; 
            width:37px; 
            text-align:center; 
            overflow:hidden;
            cursor: pointer;
        }
        .selected
        {
            border: 2px solid #F00;
        }
        .not-selected
        {
            border: 2px solid #EEE;
        }
        .label
        {
            cursor: pointer;
        }
    </style>

	<!-- KNOCKOUT TEMPLATE - Modal Dialogs -->
	<script type="text/html" id="Modal-Dialog-Notification">
		<div id="modal-dialog" class="modal hide fade">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
				<h3><span data-bind="text: $data.Header"></span></h3>
			</div>
			<div class="modal-body">
				<p><span data-bind="text: $data.Body"></span></p>
			</div>
			<div class="modal-footer">
				<a href="#" id="modal-action" class="btn btn-primary" data-bind="click: $data.OkButton"><i class="icon-ok icon-white"></i> Ok</a>
			</div>
		</div>		
	</script>
}

@section _Body {
    <div class="workspace-heading-parent">
		<div class="workspace-heading" data-bind="template: { name: $root.EndlessGlider.WorkspaceTemplate() }">
        </div>
	</div>
	<div id="gliding-container" class="container">
		<div id="glider1" class="glider" data-bind="template: { name: $root.EndlessGlider.EditorTemplate1() }"></div>		
		<div id="glider2" class="glider" data-bind="template: { name: $root.EndlessGlider.EditorTemplate2() }"></div>
    </div>
    <div id="modal-enclave" 
        data-bind="template: { name: $root.ModalViewModel().Template, data: $root.ModalViewModel().Data }">
    </div>    
}
