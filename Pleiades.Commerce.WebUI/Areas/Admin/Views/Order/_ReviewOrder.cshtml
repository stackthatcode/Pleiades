<!-- Review Products Functions -->
<script type="text/javascript">
    var PushMkt = PushMkt || {};

    PushMkt.AddReviewProductsFunctions = function (model) {
        var self = model;

        self.SelectedCartItem = ko.observable(null);

        self.BackToProductSearch = function () {
            self.CartItemCancel();
            $("[name='glideToSearch']").hide();
            self.GlideLeft("SelectProducts");
        }

        self.CartItemClick = function (cartItem) {
            console.log(cartItem);

            var selectedCartItem = new PushMkt.SelectedCartItem(cartItem, self.Cart());
            var currentSku = cartItem.Sku();

            flow.exec(
                function () {
                    self.CartItemCancel();
                    self.Service.AjaxGet("/Admin/Product/Inventory/" + cartItem.Product.Id + "?regenerate=false", this);
                },
                function (inventory) {
                    selectedCartItem.Inventory(inventory);
                    var quantityInCart = self.Cart().QuantityBySkuCode(currentSku.SkuCode);
                    var editSku = AQ(inventory)
                        .firstOrDefault(function (x) { return x.SkuCode == currentSku.SkuCode; });

                    // refresh
                    selectedCartItem.CartItem().Sku(editSku);
                    selectedCartItem.Sku(editSku);

                    // ### inventory corrections ### //                    
                    if (editSku == null || editSku.Available == 0) {
                        self.ShowModal(
                            "Notification",
                            "Item Out-Of-Stock",
                            "Item: " + editSku.SkuCode + " is no longer in stock. Sorry!",
                            function () {
                                self.Cart().RemoveBySkuCode(editSku.SkuCode);
                            });
                        return;
                    }

                    if (editSku.Available < quantityInCart) {
                        cartItem.Quantity(editSku.Available);
                        self.ShowModal(
                            "Notification",
                            "Items Out-Of-Stock",
                            "Due to changes in available stock, items were removed from Cart",
                            this);
                        return;
                    }
                    this();
                },
                function () {
                    if (selectedCartItem.HasColor()) {
                        self.Service.AjaxGet("/Admin/Product/Colors/" + cartItem.Product.Id, this);
                    } else {
                        this([]);
                    }
                },
                function (colors) {
                    selectedCartItem.Colors(colors);
                    if (selectedCartItem.HasSize()) {
                        self.Service.AjaxGet("/Admin/Product/Sizes/" + cartItem.Product.Id, this);
                    } else {
                        this([]);
                    }
                },
                function (sizes) {
                    selectedCartItem.Sizes(sizes);

                    var editSize = selectedCartItem.Sizes().firstOrNull(
                        function (x) { return x.Id == selectedCartItem.Sku().Size.Id; }
                    );
                    var editColor = selectedCartItem.Colors().firstOrNull(
                        function (x) { return x.Id == selectedCartItem.Sku().Color.Id; }
                    );

                    selectedCartItem.EditColor(editColor);
                    selectedCartItem.UpdateFilteredSizes();
                    selectedCartItem.EditSize(editSize);
                    selectedCartItem.UpdateQuantityOptions();
                    selectedCartItem.EditQuantity(cartItem.Quantity());

                    self.SelectedCartItem(selectedCartItem);
                }
            );
        }

        self.ColorSelectorClick = function (color) {
            self.SelectedCartItem().EditColor(color);
            if (self.SelectedCartItem().HasSize()) {
                self.SelectedCartItem().UpdateFilteredSizes();
            }
            self.SelectedCartItem().EditSize(null);
            self.SelectedCartItem().UpdateQuantityOptions();
        }

        self.SizeSelectorClick = function (size) {
            self.SelectedCartItem().EditSize(size);
            self.SelectedCartItem().UpdateQuantityOptions();
        }

        self.ColorSelectorClass = function (color) {
            return (color && self.SelectedCartItem().EditColor() && color.Id == self.SelectedCartItem().EditColor().Id) ?
                "color-chooser selected" :
                "color-chooser not-selected";
        }

        self.SizeSelectorClass = function (size) {
            return (size && self.SelectedCartItem().EditSize() && size.Id == self.SelectedCartItem().EditSize().Id) ?
                "label label-info" :
                "label";
        }

        self.CartItemCancel = function () {
            self.SelectedCartItem(null);
        }

        self.CartItemDelete = function (data) {
            self.Cart().Items.remove(data);
        }

        self.CartItemOk = function () {
            if (!self.SelectedCartItem().HasValidSelection() || !self.SelectedCartItem().EditQuantity()) {
                $("#quantity-validation").show();
                return;
            }

            self.SelectedCartItem().AcceptChanges();
            self.SelectedCartItem(null);
        }

        self.PerpetualGlideTest = function () {
            $("[name='glideToSearch']").hide();
            self.GlideRight("SelectProducts");
        }
    }
</script>
<!-- KNOCKOUT TEMPLATES - Review Products -->
<script type="text/html" id="Top-Workspace-ReviewProducts">
	<div id="heading" class="container">
        <div class="row">
			<div class="span9">
				<h1>Create Order &gt; Review Cart</h1>
			</div>
			<div class="span3" style="margin-top:15px; text-align:right;">
                <div data-bind="if: $root.Cart().TotalQuantity()">
                    <a id="btn-view-cart" class="btn btn-primary" style="width:190px;" data-bind="click: $root.PerpetualGlideTest">
                        <i class="icon-plane icon-white"></i> Add Shipping <i class="icon-arrow-right icon-white"></i>
                    </a>
                </div>
			</div>
		</div>

        <div class="row">
            <div class="span7" style="height:48px;">
                <ul class="nav nav-pills">
                    <li style="width:160px;">
				        <a name="glideToSearch" href="#" class="backbutton" data-bind="click: $root.BackToProductSearch">&laquo; Add Items To Cart</a>
                        &nbsp;
                    </li>
                </ul
            </div>
        </div>
	</div>
</script>
<script type="text/html" id="Main-Editor-ReviewProducts">
    <div style="margin-bottom:200px;">
        <div style="margin-top:30px; text-align:center;" class="alert alert-info" data-bind="visible: $root.Cart().TotalQuantity() == 0">
			<strong>There are no Items in your Cart.  Click "Add Items to Cart".</strong>  
		</div>

		<table class="table table-hover">
			<tbody data-bind="foreach: $root.Cart().Items">
                <tr data-bind="ifnot: $root.SelectedCartItem() &&  $root.SelectedCartItem().CartItem() == $data, click: $root.CartItemClick">
                    <td style="width:100px">
                	    <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ImageBundle: $data.Sku().ImageBundle, LightboxSuffixId: 'Review' } }">
			            </div>
                    </td>

                    <td style="width:800px;">
                        <div style="width:250px; vertical-align:top; float:left;">
                            <strong data-bind="text: $data.Product.Name"></strong><br/>
                            <span>Sku Code: </span> <span data-bind="text: $data.Sku().SkuCode"></span><br/>
                            <span data-bind="if: $data.Sku().Color">Color: <span data-bind="text: $data.Sku().Color.Name"></span></span><br/>
                            <span data-bind="if: $data.Sku().Size">Size: <span data-bind="text: $data.Sku().Size.Name"></span></span><br/>
                        </div>
                        <div style="width:150px; vertical-align:top; float:left; text-align:left;">
                            <br />
                            <span>Unit Price:</span> <span data-bind="text: ToMoney($data.Product.UnitPrice)"></span>
                        </div>
                        <div style="width:100px; vertical-align:top; float:left; text-align:right;">
                            <br />
                            <span>Quantity:</span> <span data-bind="text: $data.Quantity"></span>
                        </div>
                        <div style="width:300px; text-align:right; float:left; padding-top:30px;">
                            <a class="btn btn-primary" style="width:75px;" href="#"><i class="icon-pencil icon-white"></i> Edit</a>
                        </div>
                    </td>
                </tr>
                    
                <tr data-bind="if: $root.SelectedCartItem() && $root.SelectedCartItem().CartItem() == $data">
                    <td style="width:100px; vertical-align:top;" data-bind="if: $root.SelectedCartItem().Image()">
                        <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ImageBundle: $root.SelectedCartItem().Image(), LightboxSuffixId: 'Review' } }">
			            </div>
                    </td>
                    <td style="width:800px;">                        
                        <div style="width:800px;">
                            <div style="width:250px; vertical-align:top; float:left;">
                                <strong data-bind="text: $data.Product.Name"></strong><br/>                                    
                                <span>Sku Code: </span> <span data-bind="text: $root.SelectedCartItem().Sku().SkuCode"></span><br/>
                            </div>
                            <div style="width:150px; vertical-align:top; float:left; text-align:left;">
                                <br />
                                <span>Unit Price:</span> <span data-bind="text: ToMoney($root.SelectedCartItem().CartItem().Product.UnitPrice)"></span>
                            </div>

                            <div style="width:100px; vertical-align:top; float:left; padding-top:15px; text-align:right;">
                            </div>

                            <div style="width:300px; text-align:right; float:left; padding-top:30px;">
                                <a class="btn btn-primary" href="#" data-bind="click: $root.CartItemOk"><i class="icon-ok icon-white"></i> Ok</a>
					            <a class="btn btn-primary" href="#" data-bind="click: $root.CartItemDelete"><i class="icon-trash icon-white"></i> Delete</a>
					            <a class="btn btn-inverse" href="#" data-bind="click: $root.CartItemCancel"><i class="icon-remove icon-white"></i> Cancel</a>
                            </div>
                        </div>


                        <div style="clear:both; heigth:10px; width:800px;"></div>

                        <div id="quantity-validation" style="margin-top:20px; text-align:center; clear:both; display:none;" class="alert alert-info">
			                    <strong>Please make all your selections before hitting OK.</strong>  
		                </div>
		                
                        <div style="width:800px;">
                            <div data-bind="if: $root.SelectedCartItem().HasColor()" style="width:150px; float:left;">
                                <strong>Select a Color</strong>
                                <div data-bind="foreach:  $root.SelectedCartItem().Colors()">
                                    <div style="padding-top:10px; clear:both;">
                                        <div style="float:left;" data-bind="click: $root.ColorSelectorClick, attr: { 'class' : $root.ColorSelectorClass($data) }">
                                            <img data-bind="attr: { src: BundleViewer.ImageBundleDownloadUrl({ ImageBundleExternalId: $data.ImageBundleExternalId }, 'thumbnail') }" />
			                            </div>
                                        <div style="float:left; padding-top:10px; display:block;" data-bind="text: $data.Name"></div>
                                    </div>
                                </div>
                            </div>

                            <div data-bind="if: $root.SelectedCartItem().HasSize()" style="width:200px; float:left;">
                                <div data-bind="if: $root.SelectedCartItem().FilteredSizes().length">
                                    <strong>Select a Size</strong>
                                
                                    <div style="margin-top:10px;" data-bind="foreach: $root.SelectedCartItem().FilteredSizes()">
                                        <div data-bind="click: $root.SizeSelectorClick, attr: { 'class' : $root.SizeSelectorClass($data) }, text: $data.Abbr + ' - ' + $data.Name"
                                            class="label" style="clear:both; padding:5px; margin-bottom:10px; width:150px;"></div>
                                    </div>
                                </div>
                                <div data-bind="ifnot: $root.SelectedCartItem().FilteredSizes().length">
                                    <strong>Select a Size</strong>
                                    <p style="margin-top:10px;"><i class="icon icon-ban-circle"></i> Out-of-Stock</p>
                                </div>
                            </div>

                            <div data-bind="if: $root.SelectedCartItem().HasValidSelection()" style="float:left;">
                                <strong>How Many?</strong>
                                
                                <div style="clear:both;"> 
                                    <select name="quantity-select" style="width:120px; margin-top:10px;" 
                                        data-bind="options: $root.SelectedCartItem().QuantityOptions, optionsText: 'text', optionsValue: 'value', optionsCaption: 'How many...', value: $root.SelectedCartItem().EditQuantity"></select>
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
			</tbody>
		</table>

        
		<table class="table table-hover">
			<tbody>
                <tr>
                    <td style="width:100px">
                    </td>
                    <td style="width:800px">
                        <h1>Subtotal <span data-bind="text: $root.Cart().SubTotal"></span><h1> 
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</script>