<!-- Review Products Functions -->
<script type="text/javascript">
	var AddReviewProductsFunctions = function (model) {
	    var self = model;

	    self.SelectedCartItem = ko.observable(null);
        
	    self.BackToProductSearch = function () {
	        self.CartItemCancel();
	        $("[name='glideToSearch']").hide();
	        self.GlideLeft("SelectProducts");
	    }

	    self.SelectedCartItemFactory = function (cartItem) {
            var selectedCartItem = {
                CartItem: ko.observable(cartItem),
                Colors: ko.observableArray(),
                Sizes: ko.observableArray(),
                FilteredSizes: ko.observableArray(),
                Inventory: ko.observableArray(),
                Quantity: ko.observableArray(),
	            
                EditColor: ko.observable(),
                EditSize: ko.observable(),
                EditSku: ko.observable(),
                EditQuantity: ko.observable(),
            };

            selectedCartItem.Image = ko.computed(
                function() { 
                    if (selectedCartItem.Colors()) {
                        if (!selectedCartItem.EditColor()) {
                            return null;
                        } else {
                            var sku = self.FilterSkuByColorAndSize(
                                selectedCartItem.Inventory(), selectedCartItem.EditColor(), null)[0];
                    
                            return sku.ImageBundle;
                        }
                    } else {
                        var sku = selectedCartItem.Inventory()[0];
                        return sku.ImageBundle;
                    }
                });
            
            return selectedCartItem;
        }

	    self.CartItemClick = function (cartItem) {
            var selectedCartItem = self.CartItemFactory(cartItem);
                    
	        flow.exec(
                function () {
                    self.CartItemCancel();
                    self.Service.AjaxGet("/Admin/Product/Inventory/" + cartItem.Product.Id + "?regenerate=false", this);
                },
                function (inventory) {
                    selectedCartItem.Inventory(inventory);
                    var editSku = selectedCartItem.Inventory().firstOrNull(
                        function(x) { return x.SkuCode == cartItem.Sku().SkuCode; }
                    );
                        
                    console.log(inventory);

                    // *** Real-time Inventory Corrections *** //
                    if (editSku == null || editSku.Available == 0) {
                        self.ShowModal("Notification",  "Item Out-Of-Stock", "Item: " + editSku.SkuCode + " is no longer in stock", 
                            function() {
                                self.CartItems.remove(cartItem);
                            });
                        return;
                    }

                    // TODO: gotta fix this
                    if (editSku.Available < cartItem.Quantity()) {
                        cartItem.Quantity(editSku.Available);
                        self.ShowModal("Notification",  
                            "Reduction in Stock", "Due to changes in available stock items were removed from Cart", this);
                        return;
                    }

                    selectedCartItem.EditSku(editSku);
                    selectedCartItem.EditQuantity = ko.observable(cartItem.Quantity());
                    self.SelectedCartItem(selectedCartItem);

                    if (cartItem.Sku().Color) {
                        self.Service.AjaxGet("/Admin/Product/Colors/" + cartItem.Product.Id, this);
                    } else {
                        this([]);
                    }
                },
                function (colors) {
                    selectedCartItem.Colors(colors);
                    
                    console.log(colors);

                    if (cartItem.Sku().Size) {
                        self.Service.AjaxGet("/Admin/Product/Sizes/" + cartItem.Product.Id, this);
                    } else {
                        this([]);
                    }
                },
                function (sizes) {
                    selectedCartItem.Sizes(sizes);

                    var editSize = selectedCartItem.Sizes().firstOrNull(
                        function(x) { return x.Id == cartItem.Sku().Size.Id; }
                    );
                    var editColor = selectedCartItem.Colors().firstOrNull(
                        function(x) { return x.Id == cartItem.Sku().Color.Id; }
                    );
                    selectedCartItem.EditColor(editColor);
                    self.UpdateCartItemFilteredSizes();

                    selectedCartItem.EditSize(editSize);

                },
                function () {
                    
                }
            );
	    }

        self.UpdateCartItemFilteredSizes = function() {
            var inventory = self.SelectedCartItem().Inventory();
            var color = self.SelectedCartItem().EditColor();
            var sizes = self.SelectedCartItem().Sizes();
            var filteredSizes = self.FilterSizeByColorAndAvaililty(inventory, sizes, color);
            self.SelectedCartItem().FilteredSizes(filteredSizes);
        }

        self.UpdateCartItemEditQuantity = function() {
//            if (!self.SelectedCartItem().EditSku()) {
//                self.SelectedCartItem().Quantity([]);
//            } else { 
//                self.Available
//            }

//            if (selected.Colors && selected.Sizes) 
//            {
//                if (!selected.EditSize()) {
//                    return ko.observable([]);
//                } else {
//                    
//                }
//            }
//            if (selected.Colors) {
//            }
//            if (selected.Sizes) {
//            }

//            var sku = self.SelectedCartItem().EditSku()            
        }

        
        self.SelectedCartItemQuantity = ko.computed(function() {
//	        self.GenerateQuantityOptions = function (inventoryItem) {
//	            inventoryItem.QuantityOptions.removeAll();
//	            for (var quantity = 1; quantity <= inventoryItem.ComputedAvailable(); quantity++) {
//	                inventoryItem.QuantityOptions.push(quantity);
//	            }
//	        }
        });

        self.FilterSizeByColorAndAvaililty = function(inventory, sizes, selectedColor) {
            var output = [];
            $.each(sizes, function (index, size) {
                var sku = self.FilterSkuByColorAndSize(inventory, selectedColor, size);
                if (sku[0].Available > 0) {
                    output.push(size);
                }
            });
            return output;
        }

        self.FilterSkuByColorAndSize = function(inventory, color, size) {
            if (color && size) {
                return AQ(inventory)
                    .where(function(x) { return x.Color.Id == color.Id && x.Size.Id == size.Id; })
                    .toArray();
            }
            if (color) {
                return AQ(inventory)
                    .where(function(x) { return x.Color.Id == color.Id; })
                    .toArray();                    
            }
            if (size) {
                return AQ(inventory)
                    .where(function(x) { return x.Size.Id == size.Id; })
                    .toArray();                    
            }
            return inventory;
        }
        
	    self.ColorSelectorClass = function (color) {                
	        return (color && self.SelectedCartItem().EditColor() && color.Id == self.SelectedCartItem().EditColor().Id) ? 
                "color-chooser selected" : 
                "color-chooser not-selected";
	    }

	    self.SizeSelectorClass = function (size) {
	        return (size && self.SelectedCartItem().EditSize() && size.Id == self.SelectedCartItem().EditSize().Id) ? 
                "label label-info" : 
                "label";
	    }

	    self.ColorSelectorClick = function (color) {
	        self.SelectedCartItem().EditColor(color);
            if (self.SelectedCartItem().Sizes().length) {
                self.UpdateCartItemFilteredSizes();
            }
	    }

	    self.SizeSelectorClick = function (size) {
	        self.SelectedCartItem().EditSize(size);
	    }

	    self.CartItemCancel = function () {
	        self.SelectedCartItem(null);
	    }

	    self.CartItemDelete = function (data) {
	        self.CartItems.remove(data);
	    }

	    self.CartItemOk = function () {
	        self.SelectedCartItem(null);
	    }

	    self.PerpetualGlideTest = function () {
	        $("[name='glideToSearch']").hide();
	        self.GlideRight("SelectProducts");
	    }
	}
</script>
    <!-- KNOCKOUT TEMPLATES - Review Products -->
<script type="text/html" id="Top-Workspace-ReviewProducts">
	<div id="heading" class="container">
        <div class="row">
			<div class="span9">
				<h1>Create Order &gt; Review Cart</h1>
			</div>
			<div class="span3" style="margin-top:15px; text-align:right;">
                <div data-bind="if: $root.CartItems().length">
                    <a id="btn-view-cart" class="btn btn-primary" style="width:190px;" data-bind="click: $root.PerpetualGlideTest">
                        Add Shipping Address <i class="icon-arrow-right icon-white"></i>
                    </a>
                </div>
			</div>
		</div>

        <div class="row">
            <div class="span7" style="height:48px;">
                <ul class="nav nav-pills">
                    <li style="width:200px;">
				        <a name="glideToSearch" href="#" class="backbutton" data-bind="click: $root.BackToProductSearch">&laquo; Add Items To Cart</a>
                        &nbsp;
                    </li>
                </ul
            </div>
        </div>
	</div>
</script>
<script type="text/html" id="Main-Editor-ReviewProducts">
    <div style="margin-bottom:200px;">
        <div style="margin-top:30px; text-align:center;" class="alert alert-info" data-bind="visible: $root.CartItems().length == 0">
			<strong>There are no Items in your Cart.  Click "Add Items to Cart".</strong>  
		</div>

		<table class="table table-hover">
			<tbody data-bind="foreach: $root.CartItems">
                <tr data-bind="ifnot: $root.SelectedCartItem() &&  $root.SelectedCartItem().CartItem() == $data, click: $root.CartItemClick">
                    <td style="width:100px">
                	    <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ImageBundle: $data.Sku().ImageBundle, LightboxSuffixId: 'Review' } }">
			            </div>
                    </td>

                    <td style="width:800px;">
                        <div style="width:250px; vertical-align:top; float:left;">
                            <strong data-bind="text: $data.Product.Name"></strong><br/>
                            <span>Sku Code: </span> <span data-bind="text: $data.Sku().SkuCode"></span><br/>
                            <span data-bind="if: $data.Sku().Color">Color: <span data-bind="text: $data.Sku().Color.Name"></span></span><br/>
                            <span data-bind="if: $data.Sku().Size">Size: <span data-bind="text: $data.Sku().Size.Name"></span></span><br/>
                        </div>
                        <div style="width:150px; vertical-align:top; float:left; text-align:left;">
                            <br />
                            <span>Unit Price:</span> <span data-bind="text: ToMoney($data.Product.UnitPrice)"></span>
                        </div>
                        <div style="width:100px; vertical-align:top; float:left; text-align:right;">
                            <br />
                            <span>Quantity:</span> <span data-bind="text: $data.Quantity"></span>
                        </div>
                        <div style="width:300px; text-align:right; float:left; padding-top:30px;">
                            <a class="btn btn-primary" style="width:75px;" href="#"><i class="icon-pencil icon-white"></i> Edit</a>
                        </div>
                    </td>
                </tr>
                    
                <tr data-bind="if: $root.SelectedCartItem() && $root.SelectedCartItem().CartItem() == $data">
                    <td style="width:100px; vertical-align:top;" data-bind="if: $root.SelectedCartItem().Image()">
                        <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ImageBundle: $root.SelectedCartItem().Image(), LightboxSuffixId: 'Review' } }">
			            </div>
                    </td>
                    <td style="width:800px;">
                        <div style="width:800px;">
                            <div style="width:250px; vertical-align:top; float:left;">
                                <strong data-bind="text: $data.Product.Name"></strong><br/>                                    
                                <span>Sku Code: </span> <span data-bind="text: $root.SelectedCartItem().EditSku().SkuCode"></span><br/>
                            </div>
                            <div style="width:150px; vertical-align:top; float:left; text-align:left;">
                                <br />
                                <span>Unit Price:</span> <span data-bind="text: ToMoney($root.SelectedCartItem().CartItem().Product.UnitPrice)"></span>
                            </div>

                            <div style="width:100px; vertical-align:top; float:left; padding-top:15px; text-align:right;">
                            </div>

                            <div style="width:300px; text-align:right; float:left; padding-top:30px;">
                                <a class="btn btn-primary" href="#" data-bind="click: $root.CartItemOk"><i class="icon-ok icon-white"></i> Ok</a>
					            <a class="btn btn-primary" href="#" data-bind="click: $root.CartItemDelete"><i class="icon-trash icon-white"></i> Delete</a>
					            <a class="btn btn-inverse" href="#" data-bind="click: $root.CartItemCancel"><i class="icon-remove icon-white"></i> Cancel</a>
                            </div>
                        </div>

                        <div style="clear:both; heigth:10px; width:800px;"></div>

                        <div style="width:800px;">
                            <div data-bind="if: $root.SelectedCartItem().Colors().length > 0" style="width:150px; float:left;">
                                <strong>Select a Color</strong>
                                <div data-bind="foreach:  $root.SelectedCartItem().Colors()">
                                    <div style="padding-top:10px; clear:both;">
                                        <div style="float:left;" data-bind="click: $root.ColorSelectorClick, attr: { 'class' : $root.ColorSelectorClass($data) }">
                                            <img data-bind="attr: { src: BundleViewer.ImageBundleDownloadUrl({ ExternalResourceId: $data.ImageBundleExternalId }, 'thumbnail') }" />
			                            </div>
                                        <div style="float:left; padding-top:10px; display:block;" data-bind="text: $data.Name"></div>
                                    </div>
                                </div>
                            </div>

                            <div data-bind="if: $root.SelectedCartItem().FilteredSizes().length > 0" style="width:200px; float:left;">
                                <strong>Select a Size</strong>
                                
                                <div style="margin-top:10px;" data-bind="foreach: $root.SelectedCartItem().FilteredSizes()">
                                    <div data-bind="click: $root.SizeSelectorClick, attr: { 'class' : $root.SizeSelectorClass($data) }, text: $data.Abbr + ' - ' + $data.Name"
                                        class="label" style="clear:both; padding:5px; margin-bottom:10px; width:150px;"></div>
                                </div>
                            </div>

                            <div style="float:left;">
                                <strong>Select How Many</strong>
                                
                                <div style="clear:both;"> 
                                    <select name="quantity-select" style="width:120px; margin-top:10px;" data-bind='options: $root.QuantityArray, optionsCaption: "How many...", value: $data.EditQuantity'></select>                             
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
			</tbody>
		</table>
    </div>
</script>
