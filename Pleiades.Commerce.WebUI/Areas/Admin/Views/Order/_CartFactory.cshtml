<!-- Cart & CartItem -->
    <script type="text/javascript">
        var PushMkt = PushMkt || {};

        PushMkt.CartItem = function (product, inventoryItem, quantity) {
            var self = this;
            self.Quantity = ko.observable(quantity);
            self.Sku = ko.observable(inventoryItem);
            self.Product = product;
        }

        PushMkt.Cart = function () {
            var self = this;

            self.Items = ko.observableArray(); // array of CartItem objects
            
            self.NumberOfDistinctItems = ko.computed(function () {
                return self.Items().length;
            });

            self.TotalQuantity = ko.computed(function () {
                return AQ(self.Items()).sum(function (x) { return x.Quantity(); });
            });

            self.QuantityBySkuCode = function (skucode) {
                return AQ(self.Items())
                    .where(function (x) { return x.Sku().SkuCode == skucode; })
                    .sum(function (x) { return x.Quantity(); });
            };

            self.ItemBySkuCode = function (skucode) {
                return AQ(self.Items())
                    .firstOrDefault(function (x) { return x.Sku().SkuCode == skucode; });
            };

            self.RemoveBySkuCode =  function (skucode) {
                AQ(self.Items())
                    .where(function(x) { return x.Sku().SkuCode == skucode; })
                    .each(function(x) { self.Items.remove(x); });
            };
        };

        PushMkt.SelectedCartItem = function (cartItem, cart) {
            var self = this;
            self.CartItem = ko.observable(cartItem);
            self.Cart = ko.observable(cart);

            self.Colors = ko.observableArray();
            self.Sizes = ko.observableArray();
            self.Inventory = ko.observableArray();
            self.Sku = ko.observable();
            self.FilteredSizes = ko.observableArray();
            self.QuantityOptions = ko.observableArray();
            self.EditColor = ko.observable();
            self.EditSize = ko.observable();
            self.EditQuantity = ko.observable();

            self.CurrentAvailableSizes = function () {
                if (self.HasColor() && !self.EditColor()) {
                    return [];
                }
                if (!self.HasSize()) {
                    return [];
                }

                var inventory = self.InventoryByColorAndSize(self.EditColor(), null);

                var availableSizeInventory =
                    AQ(inventory)
                        .where(function (x) { return x.Available > 0; })
                        .select(function (x) { return x.Size })
                        .toArray();

                return availableSizeInventory;
            };

            self.UpdateFilteredSizes = function () {
                self.FilteredSizes(self.CurrentAvailableSizes());
            };

            self.UpdateQuantityOptions = function () {
                if (!self.HasValidSelection()) {
                    return;
                }

                var oldQuantity = self.EditQuantity();
                var sku = self.InventoryByColorAndSize(self.EditColor(), self.EditSize())[0];

                self.QuantityOptions.removeAll();
                for (var count = 1; count <= sku.Available; count++) {
                    self.QuantityOptions.push({ value: count, text: count });
                }

                self.EditQuantity(oldQuantity > sku.Available ? sku.Available : oldQuantity);
            };

            self.InventoryByColorAndSize = function (color, size) {
                if (color && size) {
                    return AQ(self.Inventory())
                        .where(function (x) { return x.Color.Id == color.Id && x.Size.Id == size.Id; })
                        .toArray();
                }
                if (color) {
                    return AQ(self.Inventory())
                        .where(function (x) { return x.Color.Id == color.Id; })
                        .toArray();
                }
                if (size) {
                    return AQ(self.Inventory())
                        .where(function (x) { return x.Size.Id == size.Id; })
                        .toArray();
                }
                return self.Inventory();
            };

            self.HasSize = function () {
                return self.CartItem().Sku().Size != null;
            };

            self.HasColor = function () {
                return self.CartItem().Sku().Color != null;
            };

            self.HasValidSelection = function () {
                if (self.HasColor() && self.HasSize()) {
                    return (self.EditColor() && self.EditSize());
                }
                if (self.HasColor()) {
                    return (self.EditColor() && true);
                }
                if (self.HasSize()) {
                    return (self.EditSize() && true);
                }
                return true;
            };

            self.AcceptChanges = function () {
                var finalSku = self.SelectedSku();
                var finalQuantity = self.EditQuantity()

                // Get all the other items in the Cart...
                var items = AQ(self.Cart().Items())
                    .where(function (x) { return x.Sku().SkuCode == finalSku.SkuCode; })
                    .where(function (x) { return x != self.CartItem(); });

                // ... and consolidate their quantity with mine
                items.each(function (x) {
                    self.Cart().Items.remove(x);
                    finalQuantity += x.Quantity();
                });

                self.CartItem().Sku(finalSku);
                self.CartItem().Quantity(finalQuantity > finalSku.Available ? finalSku.Available : finalQuantity);
            };

            self.SelectedSku = ko.computed(
                function () {
                    if (!self.HasValidSelection()) {
                        return null;
                    }
                    var sku = self.InventoryByColorAndSize(self.EditColor(), self.EditSize())[0];
                    return sku;
                }
            );

            self.Image = ko.computed(
                function () {
                    var skus = self.InventoryByColorAndSize(self.EditColor(), null);
                    return skus.length ? skus[0].ImageBundle : null;
                }
            );
        }
    </script>