    <!-- Cart & CartItem -->
    <script type="text/javascript">
        var PushMkt = PushMkt || {};

        PushMkt.CartItem = function (product, inventoryItem, quantity) {
            var self = this;
            self.Quantity = ko.observable(quantity);
            self.Sku = ko.observable(inventoryItem);
            self.Product = product;
        }

        // Reference data
        PushMkt.ShippingOptions = [
            { Id: "1", Name: "UPS Ground (7-10 days)", Cost: 7.95 },
            { Id: "2", Name: "UPS Ground Quicker (3-5 days)", Cost: 14.95 },
            { Id: "3", Name: "UPS Ground Express (next day)", Cost: 21.95 },
        ];

        PushMkt.ExpirationMonths = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
        PushMkt.ExpirationYears = AQ.range(2013, 2030).toArray();


        PushMkt.ShippingInfo = function () {
            var self = this;
            self.EmailAddress = ko.observable();
            self.Name = ko.observable();
            self.Address1 = ko.observable();
            self.Address2 = ko.observable();
            self.City = ko.observable();
            self.State = ko.observable();
            self.ZipCode = ko.observable();
            self.Phone = ko.observable();
            self.ShippingOption = ko.observable();
        }

        PushMkt.BillingInfo = function () {
            var self = this;
            self.Name = ko.observable();
            self.Address1 = ko.observable();
            self.Address2 = ko.observable();
            self.City = ko.observable();
            self.State = ko.observable();
            self.ZipCode = ko.observable();

            self.CardNumber = ko.observable();
            self.ExpirationMonth = ko.observable();
            self.ExpirationYear = ko.observable();
            self.CVV = ko.observable();
        }

        PushMkt.Cart = function () {
            var self = this;

            self.Items = ko.observableArray(); // array of CartItem objects
            self.ShippingInfo = new PushMkt.ShippingInfo();
            self.BillingInfo = new PushMkt.BillingInfo();

            self.CopyShippingToBilling = function () {
                self.BillingInfo.Name(self.ShippingInfo.Name());
                self.BillingInfo.Address1(self.ShippingInfo.Address1());
                self.BillingInfo.Address2(self.ShippingInfo.Address2());
                self.BillingInfo.City(self.ShippingInfo.City());
                self.BillingInfo.State(self.ShippingInfo.State());
                self.BillingInfo.ZipCode(self.ShippingInfo.ZipCode());
            }

            self.NumberOfDistinctItems = ko.computed(function () {
                return self.Items().length;
            });

            self.TotalQuantity = ko.computed(function () {
                return AQ(self.Items()).sum(function (x) { return x.Quantity(); });
            });

            self.QuantityBySkuCode = function (skucode) {
                return AQ(self.Items())
                    .where(function (x) { return x.Sku().SkuCode == skucode; })
                    .sum(function (x) { return x.Quantity(); });
            };

            self.ItemBySkuCode = function (skucode) {
                return AQ(self.Items())
                    .firstOrDefault(function (x) { return x.Sku().SkuCode == skucode; });
            };

            self.RemoveBySkuCode = function (skucode) {
                AQ(self.Items())
                    .where(function (x) { return x.Sku().SkuCode == skucode; })
                    .each(function (x) { self.Items.remove(x); });
            };

            // monies
            self.SubTotal = ko.computed(function () {
                var result = AQ(self.Items())
                    .sum(function (x) { return x.Quantity() * x.Product.UnitPrice; });
                return result;
            });

            self.ShippingCost = ko.computed(function () {
                if (!self.ShippingInfo.ShippingOption()) {
                    return 0;
                }
                var option = AQ(PushMkt.ShippingOptions)
                        .first(function (x) { return x.Id == self.ShippingInfo.ShippingOption(); });
                return option.Cost;
            });

            self.Taxes = ko.computed(function () {
                if (!self.ShippingInfo.State()) {
                    return 0;
                }
                var state = AQ(PushMkt.StatesOfAmerica)
                        .first(function (x) { return x.abbreviation == self.ShippingInfo.State(); });
                var taxPercentage = state.tax;
                return self.SubTotal() * (taxPercentage / 100.0);
            });

            self.GrandTotal = ko.computed(function () {
                return self.SubTotal() + self.Taxes() + self.ShippingCost();
            });
        };

        PushMkt.SelectedCartItem = function (cartItem, cart) {
            var self = this;
            self.CartItem = ko.observable(cartItem);
            self.Cart = ko.observable(cart);

            self.Colors = ko.observableArray();
            self.Sizes = ko.observableArray();
            self.Inventory = ko.observableArray();
            self.Sku = ko.observable();
            self.FilteredSizes = ko.observableArray();
            self.QuantityOptions = ko.observableArray();
            self.EditColor = ko.observable();
            self.EditSize = ko.observable();
            self.EditQuantity = ko.observable();

            self.CurrentAvailableSizes = function () {
                if (self.HasColor() && !self.EditColor()) {
                    return [];
                }
                if (!self.HasSize()) {
                    return [];
                }

                var inventory = self.InventoryByColorAndSize(self.EditColor(), null);

                var availableSizeInventory =
                    AQ(inventory)
                        .where(function (x) { return x.Available > 0; })
                        .select(function (x) { return x.Size })
                        .toArray();

                return availableSizeInventory;
            };

            self.UpdateFilteredSizes = function () {
                self.FilteredSizes(self.CurrentAvailableSizes());
            };

            self.UpdateQuantityOptions = function () {
                if (!self.HasValidSelection()) {
                    return;
                }

                var oldQuantity = self.EditQuantity();
                var sku = self.InventoryByColorAndSize(self.EditColor(), self.EditSize())[0];

                self.QuantityOptions.removeAll();
                for (var count = 1; count <= sku.Available; count++) {
                    self.QuantityOptions.push({ value: count, text: count });
                }

                self.EditQuantity(oldQuantity > sku.Available ? sku.Available : oldQuantity);
            };

            self.InventoryByColorAndSize = function (color, size) {
                if (color && size) {
                    return AQ(self.Inventory())
                        .where(function (x) { return x.Color.Id == color.Id && x.Size.Id == size.Id; })
                        .toArray();
                }
                if (color) {
                    return AQ(self.Inventory())
                        .where(function (x) { return x.Color.Id == color.Id; })
                        .toArray();
                }
                if (size) {
                    return AQ(self.Inventory())
                        .where(function (x) { return x.Size.Id == size.Id; })
                        .toArray();
                }
                return self.Inventory();
            };

            self.HasSize = function () {
                return self.CartItem().Sku().Size != null;
            };

            self.HasColor = function () {
                return self.CartItem().Sku().Color != null;
            };

            self.HasValidSelection = function () {
                if (self.HasColor() && self.HasSize()) {
                    return (self.EditColor() && self.EditSize());
                }
                if (self.HasColor()) {
                    return (self.EditColor() && true);
                }
                if (self.HasSize()) {
                    return (self.EditSize() && true);
                }
                return true;
            };

            self.AcceptChanges = function () {
                var finalSku = self.SelectedSku();
                var finalQuantity = self.EditQuantity()

                // Get all the other items in the Cart...
                var items = AQ(self.Cart().Items())
                    .where(function (x) { return x.Sku().SkuCode == finalSku.SkuCode; })
                    .where(function (x) { return x != self.CartItem(); });

                // ... and consolidate their quantity with mine
                items.each(function (x) {
                    self.Cart().Items.remove(x);
                    finalQuantity += x.Quantity();
                });

                self.CartItem().Sku(finalSku);
                self.CartItem().Quantity(finalQuantity > finalSku.Available ? finalSku.Available : finalQuantity);
            };

            self.SelectedSku = ko.computed(
                function () {
                    if (!self.HasValidSelection()) {
                        return null;
                    }
                    var sku = self.InventoryByColorAndSize(self.EditColor(), self.EditSize())[0];
                    return sku;
                }
            );

            self.Image = ko.computed(
                function () {
                    var skus = self.InventoryByColorAndSize(self.EditColor(), null);
                    return skus.length ? skus[0].ImageBundle : null;
                }
            );
        }
    </script>
    <style>
    #order-summary tr td:nth-child(1)
    {
        width:160px;
        text-align:left;
    }
    #order-summary tr td:nth-child(2)
    {
        width:90px;
        text-align:right;
    }
    .order-summary-item div, .order-summary-item span, .order-summary-item strong, .order-summary span
    {
        font-size: 11px;
        line-height: 14px;
    }    
    </style>
    <script type="text/html" id="Order-Summary">
        <div style="float:left; width:250px;">
            <h4 style="margin-bottom:15px; margin-top:20px; float:left;">Order Summary</h4>
            <a href="#" name="glideToReview" data-bind="click:$root.BackToReviewOrder" style="margin-top:20px; margin-left:10px; float:left;">(edit)</a>

            <table>
            <tbody data-bind="foreach: $root.Cart().Items">
                <tr>
                    <td valign="top" style="width:100px; padding-bottom:10px;">
                	    <div data-bind="template: { name: 'Image-Bundle-Thumbnail-Viewer', data: { ImageBundle: $data.Sku().ImageBundle, LightboxSuffixId: 'Review' } }">
			            </div>
                    </td>

                    <td valign="top" style="width:150px;">
                        <div class="order-summary-item" style="width:150px; vertical-align:top; float:left;">
                            <div style="font-weight:bold" data-bind="text: $data.Product.Name"></div>                            
                            <div data-bind="if: $data.Sku().Color || $data.Sku().Size">
                                <span data-bind="if: $data.Sku().Color">Color: </span><span data-bind="text: $data.Sku().Color.Name"></span>
                                <span data-bind="if: $data.Sku().Size">Size: <span data-bind="text: $data.Sku().Size.Name"></span>
                            </div>
                            <div>
                                <span>Quantity:</span> <span data-bind="text: $data.Quantity"></span>
                            </div>
                            <div>
                                <span>Price per Item:</span> <span data-bind="text: ToMoney($data.Product.UnitPrice)"></span>
                            </div>
                        </div>
                    </td>
                </tr>
            </tbody>
            <table>

            <!-- Add the items from my Order -->
            <table id="order-summary">
                <tr>
                    <td>Order Subtotal:</td>
                    <td><span data-bind="text: ToMoney($root.Cart().SubTotal())"></span></td>
                </tr>
                <tr data-bind="if: $root.Cart().ShippingInfo.State()">
                    <td>Sales Tax (<span data-bind="text: $root.Cart().ShippingInfo.State()"></span>):</td>
                    <td><span data-bind="text: ToMoney($root.Cart().Taxes())"></span></td>
                </tr>
                <tr>
                    <td>Shipping:</td>
                    <td><span data-bind="text: ToMoney($root.Cart().ShippingCost())"></span></td>
                </tr>
                <tr>
                    <td><span style="font-weight:bold; color:#444;">Order Total:</span></td>
                    <td><span style="font-weight:bold; color:#444;" data-bind="text: ToMoney($root.Cart().GrandTotal())"></span></td>
                </tr>
            </table>
        </div>
    </script>
    